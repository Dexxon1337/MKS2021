
cv08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004edc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005204  08005204  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005204  08005204  00015204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800520c  0800520c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800520c  0800520c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000052c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000059c  2000059c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fc8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e9  00000000  00000000  00035068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00037658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f90  00000000  00000000  000386c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ce6  00000000  00000000  00039650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121da  00000000  00000000  0005f336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e62e1  00000000  00000000  00071510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001577f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e68  00000000  00000000  00157844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005074 	.word	0x08005074

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005074 	.word	0x08005074

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	2b00      	cmp	r3, #0
 800059e:	d013      	beq.n	80005c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00b      	beq.n	80005c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	e000      	b.n	80005b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f9      	beq.n	80005b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffd1 	bl	8000588 <ITM_SendChar>
	return 0;
 80005e6:	2300      	movs	r3, #0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	static int row = 0;
	static const int keyboard[4][4] = { { 1, 2, 3, 21 }, { 4, 5, 6, 22 }, { 7,
			8, 9, 23 }, { 11, 0, 12, 24 }, };
	if (key == -1) {
 80005f8:	4b4b      	ldr	r3, [pc, #300]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000602:	d142      	bne.n	800068a <HAL_TIM_PeriodElapsedCallback+0x9a>
		if (HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin) == GPIO_PIN_RESET)
 8000604:	2108      	movs	r1, #8
 8000606:	4849      	ldr	r0, [pc, #292]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000608:	f001 fdfc 	bl	8002204 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d108      	bne.n	8000624 <HAL_TIM_PeriodElapsedCallback+0x34>
			key = keyboard[row][0];
 8000612:	4b47      	ldr	r3, [pc, #284]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a47      	ldr	r2, [pc, #284]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	4413      	add	r3, r2
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	b25a      	sxtb	r2, r3
 8000620:	4b41      	ldr	r3, [pc, #260]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000622:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin) == GPIO_PIN_RESET)
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	4841      	ldr	r0, [pc, #260]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000628:	f001 fdec 	bl	8002204 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d109      	bne.n	8000646 <HAL_TIM_PeriodElapsedCallback+0x56>
			key = keyboard[row][1];
 8000632:	4b3f      	ldr	r3, [pc, #252]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a3f      	ldr	r2, [pc, #252]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	4413      	add	r3, r2
 800063c:	3304      	adds	r3, #4
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	b25a      	sxtb	r2, r3
 8000642:	4b39      	ldr	r3, [pc, #228]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000644:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin) == GPIO_PIN_RESET)
 8000646:	2120      	movs	r1, #32
 8000648:	4838      	ldr	r0, [pc, #224]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800064a:	f001 fddb 	bl	8002204 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d109      	bne.n	8000668 <HAL_TIM_PeriodElapsedCallback+0x78>
			key = keyboard[row][1];
 8000654:	4b36      	ldr	r3, [pc, #216]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a36      	ldr	r2, [pc, #216]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800065a:	011b      	lsls	r3, r3, #4
 800065c:	4413      	add	r3, r2
 800065e:	3304      	adds	r3, #4
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	b25a      	sxtb	r2, r3
 8000664:	4b30      	ldr	r3, [pc, #192]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000666:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col4_GPIO_Port, Col4_Pin) == GPIO_PIN_RESET)
 8000668:	2110      	movs	r1, #16
 800066a:	4830      	ldr	r0, [pc, #192]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800066c:	f001 fdca 	bl	8002204 <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d109      	bne.n	800068a <HAL_TIM_PeriodElapsedCallback+0x9a>
			key = keyboard[row][1];
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a2e      	ldr	r2, [pc, #184]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	4413      	add	r3, r2
 8000680:	3304      	adds	r3, #4
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	b25a      	sxtb	r2, r3
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000688:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2102      	movs	r1, #2
 800068e:	482a      	ldr	r0, [pc, #168]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000690:	f001 fdd0 	bl	8002234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069a:	4828      	ldr	r0, [pc, #160]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800069c:	f001 fdca 	bl	8002234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	4825      	ldr	r0, [pc, #148]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006a6:	f001 fdc5 	bl	8002234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b0:	4822      	ldr	r0, [pc, #136]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006b2:	f001 fdbf 	bl	8002234 <HAL_GPIO_WritePin>
	switch (row) {
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d830      	bhi.n	8000720 <HAL_TIM_PeriodElapsedCallback+0x130>
 80006be:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c4:	080006d5 	.word	0x080006d5
 80006c8:	080006e7 	.word	0x080006e7
 80006cc:	080006fb 	.word	0x080006fb
 80006d0:	0800070d 	.word	0x0800070d
	case 0:
		row = 1;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2102      	movs	r1, #2
 80006de:	4816      	ldr	r0, [pc, #88]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80006e0:	f001 fda8 	bl	8002234 <HAL_GPIO_WritePin>
		break;
 80006e4:	e01c      	b.n	8000720 <HAL_TIM_PeriodElapsedCallback+0x130>
	case 1:
		row = 2;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006f4:	f001 fd9e 	bl	8002234 <HAL_GPIO_WritePin>
		break;
 80006f8:	e012      	b.n	8000720 <HAL_TIM_PeriodElapsedCallback+0x130>
	case 2:
		row = 3;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006fc:	2203      	movs	r2, #3
 80006fe:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000706:	f001 fd95 	bl	8002234 <HAL_GPIO_WritePin>
		break;
 800070a:	e009      	b.n	8000720 <HAL_TIM_PeriodElapsedCallback+0x130>
	case 3:
		row = 0;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800071a:	f001 fd8b 	bl	8002234 <HAL_GPIO_WritePin>
		break;
 800071e:	bf00      	nop
	}
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000008c 	.word	0x2000008c
 800072c:	40021000 	.word	0x40021000
 8000730:	20000090 	.word	0x20000090
 8000734:	08005114 	.word	0x08005114
 8000738:	40021800 	.word	0x40021800
 800073c:	40021400 	.word	0x40021400

08000740 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000746:	f000 fd9d 	bl	8001284 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800074a:	f000 f87b 	bl	8000844 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800074e:	f000 f9cb 	bl	8000ae8 <MX_GPIO_Init>
	MX_ETH_Init();
 8000752:	f000 f8e1 	bl	8000918 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000756:	f000 f96f 	bl	8000a38 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800075a:	f000 f997 	bl	8000a8c <MX_USB_OTG_FS_PCD_Init>
	MX_TIM3_Init();
 800075e:	f000 f91d 	bl	800099c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8000762:	482f      	ldr	r0, [pc, #188]	; (8000820 <main+0xe0>)
 8000764:	f002 fb60 	bl	8002e28 <HAL_TIM_Base_Start_IT>
	static uint32_t inputStartTime = 0;
	// Keylock status codes: 0 idle, 1 input in progress
	uint8_t keylockStatus = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	73bb      	strb	r3, [r7, #14]
	uint8_t keylockPosition = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]
	const uint8_t keylockLength = 6;
 8000770:	2306      	movs	r3, #6
 8000772:	737b      	strb	r3, [r7, #13]
	const uint8_t keylockPin[6] = { 5, 4, 7, 2, 6, 3 };
 8000774:	4a2b      	ldr	r2, [pc, #172]	; (8000824 <main+0xe4>)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077c:	6018      	str	r0, [r3, #0]
 800077e:	3304      	adds	r3, #4
 8000780:	8019      	strh	r1, [r3, #0]
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		//HAL_Delay(250);
		if (key != -1) {
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <main+0xe8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b25b      	sxtb	r3, r3
 8000788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800078c:	d0f9      	beq.n	8000782 <main+0x42>
			if (keylockStatus == 0) {
 800078e:	7bbb      	ldrb	r3, [r7, #14]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d106      	bne.n	80007a2 <main+0x62>
				keylockStatus = 1;
 8000794:	2301      	movs	r3, #1
 8000796:	73bb      	strb	r3, [r7, #14]
				inputStartTime = HAL_GetTick();
 8000798:	f000 fdda 	bl	8001350 <HAL_GetTick>
 800079c:	4603      	mov	r3, r0
 800079e:	4a23      	ldr	r2, [pc, #140]	; (800082c <main+0xec>)
 80007a0:	6013      	str	r3, [r2, #0]
			}

			if (key == keylockPin[keylockPosition]) {
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <main+0xe8>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	f107 0110 	add.w	r1, r7, #16
 80007b0:	440b      	add	r3, r1
 80007b2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d120      	bne.n	80007fc <main+0xbc>
				printf("Key ");
 80007ba:	481d      	ldr	r0, [pc, #116]	; (8000830 <main+0xf0>)
 80007bc:	f003 fc8e 	bl	80040dc <iprintf>
				printf(key);
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <main+0xe8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 fc88 	bl	80040dc <iprintf>
				printf(" is correct.\n");
 80007cc:	4819      	ldr	r0, [pc, #100]	; (8000834 <main+0xf4>)
 80007ce:	f003 fd0b 	bl	80041e8 <puts>
				keylockPosition++;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	3301      	adds	r3, #1
 80007d6:	73fb      	strb	r3, [r7, #15]
				if (keylockPosition == (keylockLength - 1)) {
 80007d8:	7bfa      	ldrb	r2, [r7, #15]
 80007da:	7b7b      	ldrb	r3, [r7, #13]
 80007dc:	3b01      	subs	r3, #1
 80007de:	429a      	cmp	r2, r3
 80007e0:	d1cf      	bne.n	8000782 <main+0x42>
					printf("The code was correctly entered. UNLOCKED.\n");
 80007e2:	4815      	ldr	r0, [pc, #84]	; (8000838 <main+0xf8>)
 80007e4:	f003 fd00 	bl	80041e8 <puts>
					keylockStatus = 2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	73bb      	strb	r3, [r7, #14]
					inputStartTime = HAL_GetTick();
 80007ec:	f000 fdb0 	bl	8001350 <HAL_GetTick>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <main+0xec>)
 80007f4:	6013      	str	r3, [r2, #0]
					keylockPosition = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]
 80007fa:	e7c2      	b.n	8000782 <main+0x42>
				}
			} else {
				printf("Input key ");
 80007fc:	480f      	ldr	r0, [pc, #60]	; (800083c <main+0xfc>)
 80007fe:	f003 fc6d 	bl	80040dc <iprintf>
				printf(key);
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <main+0xe8>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b25b      	sxtb	r3, r3
 8000808:	4618      	mov	r0, r3
 800080a:	f003 fc67 	bl	80040dc <iprintf>
				printf(" was incorrect. Please start the input again.\n");
 800080e:	480c      	ldr	r0, [pc, #48]	; (8000840 <main+0x100>)
 8000810:	f003 fcea 	bl	80041e8 <puts>
				keylockStatus = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	73bb      	strb	r3, [r7, #14]
				keylockPosition = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	73fb      	strb	r3, [r7, #15]
		if (key != -1) {
 800081c:	e7b1      	b.n	8000782 <main+0x42>
 800081e:	bf00      	nop
 8000820:	200004f8 	.word	0x200004f8
 8000824:	0800510c 	.word	0x0800510c
 8000828:	2000008c 	.word	0x2000008c
 800082c:	20000094 	.word	0x20000094
 8000830:	0800508c 	.word	0x0800508c
 8000834:	08005094 	.word	0x08005094
 8000838:	080050a4 	.word	0x080050a4
 800083c:	080050d0 	.word	0x080050d0
 8000840:	080050dc 	.word	0x080050dc

08000844 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	; 0x50
 8000848:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2230      	movs	r2, #48	; 0x30
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f003 fc3a 	bl	80040cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <SystemClock_Config+0xcc>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a27      	ldr	r2, [pc, #156]	; (8000910 <SystemClock_Config+0xcc>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b25      	ldr	r3, [pc, #148]	; (8000910 <SystemClock_Config+0xcc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <SystemClock_Config+0xd0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a21      	ldr	r2, [pc, #132]	; (8000914 <SystemClock_Config+0xd0>)
 800088e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <SystemClock_Config+0xd0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a0:	2301      	movs	r3, #1
 80008a2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80008b4:	2304      	movs	r3, #4
 80008b6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80008b8:	23a8      	movs	r3, #168	; 0xa8
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008bc:	2302      	movs	r3, #2
 80008be:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80008c0:	2307      	movs	r3, #7
 80008c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fde9 	bl	80024a0 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x94>
		Error_Handler();
 80008d4:	f000 fa04 	bl	8000ce0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008d8:	230f      	movs	r3, #15
 80008da:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008dc:	2302      	movs	r3, #2
 80008de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008e8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ee:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	2105      	movs	r1, #5
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 f84a 	bl	8002990 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xc2>
		Error_Handler();
 8000902:	f000 f9ed 	bl	8000ce0 <Error_Handler>
	}
}
 8000906:	bf00      	nop
 8000908:	3750      	adds	r7, #80	; 0x50
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_ETH_Init+0x78>)
 800091e:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <MX_ETH_Init+0x7c>)
 8000920:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_ETH_Init+0x78>)
 8000924:	2201      	movs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
	heth.Init.Speed = ETH_SPEED_100M;
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_ETH_Init+0x78>)
 800092a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800092e:	609a      	str	r2, [r3, #8]
	heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_ETH_Init+0x78>)
 8000932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000936:	60da      	str	r2, [r3, #12]
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_ETH_Init+0x78>)
 800093a:	2200      	movs	r2, #0
 800093c:	821a      	strh	r2, [r3, #16]
	MACAddr[0] = 0x00;
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_ETH_Init+0x80>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_ETH_Init+0x80>)
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_ETH_Init+0x80>)
 800094c:	22e1      	movs	r2, #225	; 0xe1
 800094e:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_ETH_Init+0x80>)
 8000952:	2200      	movs	r2, #0
 8000954:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_ETH_Init+0x80>)
 8000958:	2200      	movs	r2, #0
 800095a:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_ETH_Init+0x80>)
 800095e:	2200      	movs	r2, #0
 8000960:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_ETH_Init+0x78>)
 8000964:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <MX_ETH_Init+0x80>)
 8000966:	615a      	str	r2, [r3, #20]
	heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_ETH_Init+0x78>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_ETH_Init+0x78>)
 8000970:	2200      	movs	r2, #0
 8000972:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_ETH_Init+0x78>)
 8000976:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800097a:	621a      	str	r2, [r3, #32]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_ETH_Init+0x78>)
 800097e:	f000 fe29 	bl	80015d4 <HAL_ETH_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ETH_Init+0x74>
		Error_Handler();
 8000988:	f000 f9aa 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000540 	.word	0x20000540
 8000994:	40028000 	.word	0x40028000
 8000998:	20000098 	.word	0x20000098

0800099c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009b0:	463b      	mov	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_TIM3_Init+0x94>)
 80009ba:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <MX_TIM3_Init+0x98>)
 80009bc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 8399;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_TIM3_Init+0x94>)
 80009c0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80009c4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_TIM3_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 99;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_TIM3_Init+0x94>)
 80009ce:	2263      	movs	r2, #99	; 0x63
 80009d0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_TIM3_Init+0x94>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_TIM3_Init+0x94>)
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80009de:	4814      	ldr	r0, [pc, #80]	; (8000a30 <MX_TIM3_Init+0x94>)
 80009e0:	f002 f9d2 	bl	8002d88 <HAL_TIM_Base_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM3_Init+0x52>
		Error_Handler();
 80009ea:	f000 f979 	bl	8000ce0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4619      	mov	r1, r3
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <MX_TIM3_Init+0x94>)
 80009fc:	f002 fb8c 	bl	8003118 <HAL_TIM_ConfigClockSource>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM3_Init+0x6e>
		Error_Handler();
 8000a06:	f000 f96b 	bl	8000ce0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000a12:	463b      	mov	r3, r7
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <MX_TIM3_Init+0x94>)
 8000a18:	f002 fda8 	bl	800356c <HAL_TIMEx_MasterConfigSynchronization>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000a22:	f000 f95d 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200004f8 	.word	0x200004f8
 8000a34:	40000400 	.word	0x40000400

08000a38 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_USART3_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a70:	f002 fe0c 	bl	800368c <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000a7a:	f000 f931 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000ac 	.word	0x200000ac
 8000a88:	40004800 	.word	0x40004800

08000a8c <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a96:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad0:	f001 fbc9 	bl	8002266 <HAL_PCD_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8000ada:	f000 f901 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000f0 	.word	0x200000f0

08000ae8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
 8000b02:	4b71      	ldr	r3, [pc, #452]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a70      	ldr	r2, [pc, #448]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b6e      	ldr	r3, [pc, #440]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	623b      	str	r3, [r7, #32]
 8000b18:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
 8000b1e:	4b6a      	ldr	r3, [pc, #424]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a69      	ldr	r2, [pc, #420]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b67      	ldr	r3, [pc, #412]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
 8000b3a:	4b63      	ldr	r3, [pc, #396]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a62      	ldr	r2, [pc, #392]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b40:	f043 0320 	orr.w	r3, r3, #32
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b60      	ldr	r3, [pc, #384]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0320 	and.w	r3, r3, #32
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	4b5c      	ldr	r3, [pc, #368]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a5b      	ldr	r2, [pc, #364]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b59      	ldr	r3, [pc, #356]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b55      	ldr	r3, [pc, #340]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a54      	ldr	r2, [pc, #336]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b52      	ldr	r3, [pc, #328]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b4e      	ldr	r3, [pc, #312]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a4d      	ldr	r2, [pc, #308]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b4b      	ldr	r3, [pc, #300]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b47      	ldr	r3, [pc, #284]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a46      	ldr	r2, [pc, #280]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b44      	ldr	r3, [pc, #272]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a3f      	ldr	r2, [pc, #252]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b3d      	ldr	r3, [pc, #244]	; (8000cc8 <MX_GPIO_Init+0x1e0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, Row3_Pin | Row4_Pin | Row2_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000be4:	4839      	ldr	r0, [pc, #228]	; (8000ccc <MX_GPIO_Init+0x1e4>)
 8000be6:	f001 fb25 	bl	8002234 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bf0:	4837      	ldr	r0, [pc, #220]	; (8000cd0 <MX_GPIO_Init+0x1e8>)
 8000bf2:	f001 fb1f 	bl	8002234 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, Row1_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2142      	movs	r1, #66	; 0x42
 8000bfa:	4836      	ldr	r0, [pc, #216]	; (8000cd4 <MX_GPIO_Init+0x1ec>)
 8000bfc:	f001 fb1a 	bl	8002234 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Col1_Pin Col4_Pin Col3_Pin Col2_Pin */
	GPIO_InitStruct.Pin = Col1_Pin | Col4_Pin | Col3_Pin | Col2_Pin;
 8000c00:	2378      	movs	r3, #120	; 0x78
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	4831      	ldr	r0, [pc, #196]	; (8000cd8 <MX_GPIO_Init+0x1f0>)
 8000c14:	f001 f94a 	bl	8001eac <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	482b      	ldr	r0, [pc, #172]	; (8000cdc <MX_GPIO_Init+0x1f4>)
 8000c30:	f001 f93c 	bl	8001eac <HAL_GPIO_Init>

	/*Configure GPIO pins : Row3_Pin Row4_Pin Row2_Pin */
	GPIO_InitStruct.Pin = Row3_Pin | Row4_Pin | Row2_Pin;
 8000c34:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c3a:	2311      	movs	r3, #17
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481f      	ldr	r0, [pc, #124]	; (8000ccc <MX_GPIO_Init+0x1e4>)
 8000c4e:	f001 f92d 	bl	8001eac <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000c52:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4819      	ldr	r0, [pc, #100]	; (8000cd0 <MX_GPIO_Init+0x1e8>)
 8000c6c:	f001 f91e 	bl	8001eac <HAL_GPIO_Init>

	/*Configure GPIO pin : Row1_Pin */
	GPIO_InitStruct.Pin = Row1_Pin;
 8000c70:	2302      	movs	r3, #2
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c74:	2311      	movs	r3, #17
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <MX_GPIO_Init+0x1ec>)
 8000c88:	f001 f910 	bl	8001eac <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c8c:	2340      	movs	r3, #64	; 0x40
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_GPIO_Init+0x1ec>)
 8000ca4:	f001 f902 	bl	8001eac <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_GPIO_Init+0x1ec>)
 8000cbc:	f001 f8f6 	bl	8001eac <HAL_GPIO_Init>

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40021400 	.word	0x40021400
 8000cd0:	40020400 	.word	0x40020400
 8000cd4:	40021800 	.word	0x40021800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40020800 	.word	0x40020800

08000ce0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a55      	ldr	r2, [pc, #340]	; (8000eb0 <HAL_ETH_MspInit+0x174>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	f040 80a4 	bne.w	8000ea8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
 8000d64:	4b53      	ldr	r3, [pc, #332]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4a52      	ldr	r2, [pc, #328]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d70:	4b50      	ldr	r3, [pc, #320]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d78:	623b      	str	r3, [r7, #32]
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	4b4c      	ldr	r3, [pc, #304]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a4b      	ldr	r2, [pc, #300]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000d86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8c:	4b49      	ldr	r3, [pc, #292]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	4b45      	ldr	r3, [pc, #276]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	4a44      	ldr	r2, [pc, #272]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000da2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
 8000da8:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a3d      	ldr	r2, [pc, #244]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc4:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a36      	ldr	r2, [pc, #216]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b34      	ldr	r3, [pc, #208]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e16:	6313      	str	r3, [r2, #48]	; 0x30
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <HAL_ETH_MspInit+0x178>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e24:	2332      	movs	r3, #50	; 0x32
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e34:	230b      	movs	r3, #11
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481e      	ldr	r0, [pc, #120]	; (8000eb8 <HAL_ETH_MspInit+0x17c>)
 8000e40:	f001 f834 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e44:	2386      	movs	r3, #134	; 0x86
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e54:	230b      	movs	r3, #11
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4817      	ldr	r0, [pc, #92]	; (8000ebc <HAL_ETH_MspInit+0x180>)
 8000e60:	f001 f824 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e76:	230b      	movs	r3, #11
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <HAL_ETH_MspInit+0x184>)
 8000e82:	f001 f813 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e98:	230b      	movs	r3, #11
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000ea4:	f001 f802 	bl	8001eac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3738      	adds	r7, #56	; 0x38
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40028000 	.word	0x40028000
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40021800 	.word	0x40021800

08000ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_TIM_Base_MspInit+0x48>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d115      	bne.n	8000f06 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <HAL_TIM_Base_MspInit+0x4c>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <HAL_TIM_Base_MspInit+0x4c>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_TIM_Base_MspInit+0x4c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	201d      	movs	r0, #29
 8000efc:	f000 fb33 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f00:	201d      	movs	r0, #29
 8000f02:	f000 fb4c 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40000400 	.word	0x40000400
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_UART_MspInit+0x84>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d12c      	bne.n	8000f94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_UART_MspInit+0x88>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f84:	2307      	movs	r3, #7
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_UART_MspInit+0x8c>)
 8000f90:	f000 ff8c 	bl	8001eac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40004800 	.word	0x40004800
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020c00 	.word	0x40020c00

08000fa8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fc8:	d13f      	bne.n	800104a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <HAL_PCD_MspInit+0xac>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a20      	ldr	r2, [pc, #128]	; (8001054 <HAL_PCD_MspInit+0xac>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <HAL_PCD_MspInit+0xac>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fe6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4815      	ldr	r0, [pc, #84]	; (8001058 <HAL_PCD_MspInit+0xb0>)
 8001004:	f000 ff52 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	480e      	ldr	r0, [pc, #56]	; (8001058 <HAL_PCD_MspInit+0xb0>)
 800101e:	f000 ff45 	bl	8001eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_PCD_MspInit+0xac>)
 8001024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <HAL_PCD_MspInit+0xac>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102c:	6353      	str	r3, [r2, #52]	; 0x34
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_PCD_MspInit+0xac>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_PCD_MspInit+0xac>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_PCD_MspInit+0xac>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f93e 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <TIM3_IRQHandler+0x10>)
 80010b6:	f001 ff27 	bl	8002f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200004f8 	.word	0x200004f8

080010c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e00a      	b.n	80010ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010d6:	f3af 8000 	nop.w
 80010da:	4601      	mov	r1, r0
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	60ba      	str	r2, [r7, #8]
 80010e2:	b2ca      	uxtb	r2, r1
 80010e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dbf0      	blt.n	80010d6 <_read+0x12>
	}

return len;
 80010f4:	687b      	ldr	r3, [r7, #4]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e009      	b.n	8001124 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa5c 	bl	80005d6 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf1      	blt.n	8001110 <_write+0x12>
	}
	return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_close>:

int _close(int file)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115e:	605a      	str	r2, [r3, #4]
	return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_isatty>:

int _isatty(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	return 1;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
	return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <_sbrk+0x5c>)
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <_sbrk+0x60>)
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <_sbrk+0x64>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <_sbrk+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d207      	bcs.n	80011e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d0:	f002 ff52 	bl	8004078 <__errno>
 80011d4:	4603      	mov	r3, r0
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	e009      	b.n	80011f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <_sbrk+0x64>)
 80011f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20030000 	.word	0x20030000
 8001200:	00000400 	.word	0x00000400
 8001204:	200000a0 	.word	0x200000a0
 8001208:	200005a0 	.word	0x200005a0

0800120c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <SystemInit+0x20>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <SystemInit+0x20>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001268 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001236:	490e      	ldr	r1, [pc, #56]	; (8001270 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001238:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800124c:	4c0b      	ldr	r4, [pc, #44]	; (800127c <LoopFillZerobss+0x26>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800125a:	f7ff ffd7 	bl	800120c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125e:	f002 ff11 	bl	8004084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff fa6d 	bl	8000740 <main>
  bx  lr    
 8001266:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001268:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001274:	08005214 	.word	0x08005214
  ldr r2, =_sbss
 8001278:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800127c:	2000059c 	.word	0x2000059c

08001280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_Init+0x40>)
 800128e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_Init+0x40>)
 800129a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_Init+0x40>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 f94f 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f808 	bl	80012c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fd18 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023c00 	.word	0x40023c00

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f967 	bl	80015ba <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f000 f92f 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_InitTick+0x5c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000000 	.word	0x20000000
 8001320:	20000008 	.word	0x20000008
 8001324:	20000004 	.word	0x20000004

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000008 	.word	0x20000008
 800134c:	20000588 	.word	0x20000588

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000588 	.word	0x20000588

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff ffee 	bl	8001350 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d005      	beq.n	800138e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_Delay+0x44>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800138e:	bf00      	nop
 8001390:	f7ff ffde 	bl	8001350 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8f7      	bhi.n	8001390 <HAL_Delay+0x28>
  {
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008

080013b0 <__NVIC_SetPriorityGrouping>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_GetPriorityGrouping>:
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <__NVIC_EnableIRQ+0x38>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff29 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff3e 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff31 	bl	8001414 <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa2 	bl	800150c <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80015e4:	4baa      	ldr	r3, [pc, #680]	; (8001890 <HAL_ETH_Init+0x2bc>)
 80015e6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e183      	b.n	8001902 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fb94 	bl	8000d3c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	4b9e      	ldr	r3, [pc, #632]	; (8001894 <HAL_ETH_Init+0x2c0>)
 800161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161c:	4a9d      	ldr	r2, [pc, #628]	; (8001894 <HAL_ETH_Init+0x2c0>)
 800161e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001622:	6453      	str	r3, [r2, #68]	; 0x44
 8001624:	4b9b      	ldr	r3, [pc, #620]	; (8001894 <HAL_ETH_Init+0x2c0>)
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001630:	4b99      	ldr	r3, [pc, #612]	; (8001898 <HAL_ETH_Init+0x2c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a98      	ldr	r2, [pc, #608]	; (8001898 <HAL_ETH_Init+0x2c4>)
 8001636:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800163a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800163c:	4b96      	ldr	r3, [pc, #600]	; (8001898 <HAL_ETH_Init+0x2c4>)
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4994      	ldr	r1, [pc, #592]	; (8001898 <HAL_ETH_Init+0x2c4>)
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0201 	orr.w	r2, r2, #1
 800165c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001660:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001662:	f7ff fe75 	bl	8001350 <HAL_GetTick>
 8001666:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001668:	e011      	b.n	800168e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800166a:	f7ff fe71 	bl	8001350 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001678:	d909      	bls.n	800168e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2203      	movs	r2, #3
 800167e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e139      	b.n	8001902 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e4      	bne.n	800166a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f023 031c 	bic.w	r3, r3, #28
 80016ae:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016b0:	f001 fb36 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 80016b4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4a78      	ldr	r2, [pc, #480]	; (800189c <HAL_ETH_Init+0x2c8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d908      	bls.n	80016d0 <HAL_ETH_Init+0xfc>
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4a77      	ldr	r2, [pc, #476]	; (80018a0 <HAL_ETH_Init+0x2cc>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d804      	bhi.n	80016d0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	e027      	b.n	8001720 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	4a73      	ldr	r2, [pc, #460]	; (80018a0 <HAL_ETH_Init+0x2cc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d908      	bls.n	80016ea <HAL_ETH_Init+0x116>
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	4a6d      	ldr	r2, [pc, #436]	; (8001890 <HAL_ETH_Init+0x2bc>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d204      	bcs.n	80016ea <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f043 030c 	orr.w	r3, r3, #12
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	e01a      	b.n	8001720 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4a68      	ldr	r2, [pc, #416]	; (8001890 <HAL_ETH_Init+0x2bc>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d303      	bcc.n	80016fa <HAL_ETH_Init+0x126>
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4a6b      	ldr	r2, [pc, #428]	; (80018a4 <HAL_ETH_Init+0x2d0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d911      	bls.n	800171e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4a69      	ldr	r2, [pc, #420]	; (80018a4 <HAL_ETH_Init+0x2d0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d908      	bls.n	8001714 <HAL_ETH_Init+0x140>
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4a68      	ldr	r2, [pc, #416]	; (80018a8 <HAL_ETH_Init+0x2d4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d804      	bhi.n	8001714 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	e005      	b.n	8001720 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	e000      	b.n	8001720 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800171e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800172c:	2100      	movs	r1, #0
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f954 	bl	80019dc <HAL_ETH_WritePHYRegister>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00b      	beq.n	8001752 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800173e:	6939      	ldr	r1, [r7, #16]
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f9b1 	bl	8001aa8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0d7      	b.n	8001902 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001752:	20ff      	movs	r0, #255	; 0xff
 8001754:	f7ff fe08 	bl	8001368 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a5 	beq.w	80018ac <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001762:	f7ff fdf5 	bl	8001350 <HAL_GetTick>
 8001766:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	461a      	mov	r2, r3
 800176e:	2101      	movs	r1, #1
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f8cb 	bl	800190c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001776:	f7ff fdeb 	bl	8001350 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	; 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d90f      	bls.n	80017a8 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800178c:	6939      	ldr	r1, [r7, #16]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f98a 	bl	8001aa8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e0ac      	b.n	8001902 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0da      	beq.n	8001768 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80017b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b6:	2100      	movs	r1, #0
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f90f 	bl	80019dc <HAL_ETH_WritePHYRegister>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00b      	beq.n	80017dc <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017c8:	6939      	ldr	r1, [r7, #16]
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f96c 	bl	8001aa8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80017d8:	2301      	movs	r3, #1
 80017da:	e092      	b.n	8001902 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80017dc:	f7ff fdb8 	bl	8001350 <HAL_GetTick>
 80017e0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	461a      	mov	r2, r3
 80017e8:	2101      	movs	r1, #1
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f88e 	bl	800190c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80017f0:	f7ff fdae 	bl	8001350 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d90f      	bls.n	8001822 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001806:	6939      	ldr	r1, [r7, #16]
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f94d 	bl	8001aa8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e06f      	b.n	8001902 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0da      	beq.n	80017e2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	461a      	mov	r2, r3
 8001832:	2110      	movs	r1, #16
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f869 	bl	800190c <HAL_ETH_ReadPHYRegister>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00b      	beq.n	8001858 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001844:	6939      	ldr	r1, [r7, #16]
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f92e 	bl	8001aa8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001854:	2301      	movs	r3, #1
 8001856:	e054      	b.n	8001902 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	d004      	beq.n	800186c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	e002      	b.n	8001872 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	e035      	b.n	80018f0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	e030      	b.n	80018f0 <HAL_ETH_Init+0x31c>
 800188e:	bf00      	nop
 8001890:	03938700 	.word	0x03938700
 8001894:	40023800 	.word	0x40023800
 8001898:	40013800 	.word	0x40013800
 800189c:	01312cff 	.word	0x01312cff
 80018a0:	02160ebf 	.word	0x02160ebf
 80018a4:	05f5e0ff 	.word	0x05f5e0ff
 80018a8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	085b      	lsrs	r3, r3, #1
 80018ba:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80018bc:	4313      	orrs	r3, r2
 80018be:	b29b      	uxth	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	2100      	movs	r1, #0
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f889 	bl	80019dc <HAL_ETH_WritePHYRegister>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00b      	beq.n	80018e8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80018d4:	6939      	ldr	r1, [r7, #16]
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f8e6 	bl	8001aa8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e00c      	b.n	8001902 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80018e8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80018ec:	f7ff fd3c 	bl	8001368 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80018f0:	6939      	ldr	r1, [r7, #16]
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f8d8 	bl	8001aa8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop

0800190c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	460b      	mov	r3, r1
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b82      	cmp	r3, #130	; 0x82
 800192c:	d101      	bne.n	8001932 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800192e:	2302      	movs	r3, #2
 8001930:	e050      	b.n	80019d4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2282      	movs	r2, #130	; 0x82
 8001936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f003 031c 	and.w	r3, r3, #28
 8001948:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8a1b      	ldrh	r3, [r3, #16]
 800194e:	02db      	lsls	r3, r3, #11
 8001950:	b29b      	uxth	r3, r3
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	4313      	orrs	r3, r2
 8001956:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001958:	897b      	ldrh	r3, [r7, #10]
 800195a:	019b      	lsls	r3, r3, #6
 800195c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	4313      	orrs	r3, r2
 8001964:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f023 0302 	bic.w	r3, r3, #2
 800196c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800197e:	f7ff fce7 	bl	8001350 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001984:	e015      	b.n	80019b2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001986:	f7ff fce3 	bl	8001350 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001994:	d309      	bcc.n	80019aa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e014      	b.n	80019d4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1e4      	bne.n	8001986 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	460b      	mov	r3, r1
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b42      	cmp	r3, #66	; 0x42
 80019fc:	d101      	bne.n	8001a02 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80019fe:	2302      	movs	r3, #2
 8001a00:	e04e      	b.n	8001aa0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2242      	movs	r2, #66	; 0x42
 8001a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f003 031c 	and.w	r3, r3, #28
 8001a18:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8a1b      	ldrh	r3, [r3, #16]
 8001a1e:	02db      	lsls	r3, r3, #11
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a28:	897b      	ldrh	r3, [r7, #10]
 8001a2a:	019b      	lsls	r3, r3, #6
 8001a2c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a58:	f7ff fc7a 	bl	8001350 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a5e:	e015      	b.n	8001a8c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a60:	f7ff fc76 	bl	8001350 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6e:	d309      	bcc.n	8001a84 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e00d      	b.n	8001aa0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1e4      	bne.n	8001a60 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0b0      	sub	sp, #192	; 0xc0
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	663b      	str	r3, [r7, #96]	; 0x60
 8001af4:	e001      	b.n	8001afa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001afe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b04:	2300      	movs	r3, #0
 8001b06:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b14:	2340      	movs	r3, #64	; 0x40
 8001b16:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b80:	4bac      	ldr	r3, [pc, #688]	; (8001e34 <ETH_MACDMAConfig+0x38c>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001b88:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001b8c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001b90:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001b94:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001b9a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001b9e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001ba2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ba8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001bac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001bb0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001bb4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001bb8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001bbc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001bbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bd0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff fbc3 	bl	8001368 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bf0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001bf4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001bfa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c00:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c06:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c0c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c18:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c1a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff fb9e 	bl	8001368 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c34:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c3e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c48:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c58:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c66:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001c68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c6c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001c6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001c72:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001c78:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001c7e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001c84:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c98:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff fb5f 	bl	8001368 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cb2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cb4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001cb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff fb4a 	bl	8001368 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cdc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001cec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cf0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d02:	2304      	movs	r3, #4
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d32:	3318      	adds	r3, #24
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d3e:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <ETH_MACDMAConfig+0x390>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d46:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001d48:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d4a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001d4c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001d4e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001d50:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001d52:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001d54:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001d56:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001d58:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001d5a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001d5e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001d62:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001d66:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7a:	3318      	adds	r3, #24
 8001d7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d80:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8a:	3318      	adds	r3, #24
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7ff fae8 	bl	8001368 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da0:	3318      	adds	r3, #24
 8001da2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001db0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001db4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001db8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dbc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001dbe:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001dc2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f7ff fac1 	bl	8001368 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001df2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d10f      	bne.n	8001e1c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e04:	331c      	adds	r3, #28
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e18:	331c      	adds	r3, #28
 8001e1a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	461a      	mov	r2, r3
 8001e22:	2100      	movs	r1, #0
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f809 	bl	8001e3c <ETH_MACAddressConfig>
}
 8001e2a:	bf00      	nop
 8001e2c:	37c0      	adds	r7, #192	; 0xc0
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	ff20810f 	.word	0xff20810f
 8001e38:	f8de3f23 	.word	0xf8de3f23

08001e3c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3305      	adds	r3, #5
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	3204      	adds	r2, #4
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <ETH_MACAddressConfig+0x68>)
 8001e5e:	4413      	add	r3, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3303      	adds	r3, #3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	061a      	lsls	r2, r3, #24
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3302      	adds	r3, #2
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	4313      	orrs	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <ETH_MACAddressConfig+0x6c>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	6013      	str	r3, [r2, #0]
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40028040 	.word	0x40028040
 8001ea8:	40028044 	.word	0x40028044

08001eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e177      	b.n	80021b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 8166 	bne.w	80021b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d005      	beq.n	8001efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d130      	bne.n	8001f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 0201 	and.w	r2, r3, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d017      	beq.n	8001f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d123      	bne.n	8001ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	08da      	lsrs	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0203 	and.w	r2, r3, #3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80c0 	beq.w	80021b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b66      	ldr	r3, [pc, #408]	; (80021d0 <HAL_GPIO_Init+0x324>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a65      	ldr	r2, [pc, #404]	; (80021d0 <HAL_GPIO_Init+0x324>)
 800203c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_GPIO_Init+0x324>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204e:	4a61      	ldr	r2, [pc, #388]	; (80021d4 <HAL_GPIO_Init+0x328>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a58      	ldr	r2, [pc, #352]	; (80021d8 <HAL_GPIO_Init+0x32c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d037      	beq.n	80020ea <HAL_GPIO_Init+0x23e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a57      	ldr	r2, [pc, #348]	; (80021dc <HAL_GPIO_Init+0x330>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d031      	beq.n	80020e6 <HAL_GPIO_Init+0x23a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a56      	ldr	r2, [pc, #344]	; (80021e0 <HAL_GPIO_Init+0x334>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02b      	beq.n	80020e2 <HAL_GPIO_Init+0x236>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a55      	ldr	r2, [pc, #340]	; (80021e4 <HAL_GPIO_Init+0x338>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d025      	beq.n	80020de <HAL_GPIO_Init+0x232>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a54      	ldr	r2, [pc, #336]	; (80021e8 <HAL_GPIO_Init+0x33c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <HAL_GPIO_Init+0x22e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a53      	ldr	r2, [pc, #332]	; (80021ec <HAL_GPIO_Init+0x340>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0x22a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_GPIO_Init+0x344>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0x226>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a51      	ldr	r2, [pc, #324]	; (80021f4 <HAL_GPIO_Init+0x348>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00d      	beq.n	80020ce <HAL_GPIO_Init+0x222>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a50      	ldr	r2, [pc, #320]	; (80021f8 <HAL_GPIO_Init+0x34c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x21e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4f      	ldr	r2, [pc, #316]	; (80021fc <HAL_GPIO_Init+0x350>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x21a>
 80020c2:	2309      	movs	r3, #9
 80020c4:	e012      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020c6:	230a      	movs	r3, #10
 80020c8:	e010      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020ca:	2308      	movs	r3, #8
 80020cc:	e00e      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e00c      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020d2:	2306      	movs	r3, #6
 80020d4:	e00a      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020d6:	2305      	movs	r3, #5
 80020d8:	e008      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020da:	2304      	movs	r3, #4
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020de:	2303      	movs	r3, #3
 80020e0:	e004      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e002      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020ea:	2300      	movs	r3, #0
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	f002 0203 	and.w	r2, r2, #3
 80020f2:	0092      	lsls	r2, r2, #2
 80020f4:	4093      	lsls	r3, r2
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020fc:	4935      	ldr	r1, [pc, #212]	; (80021d4 <HAL_GPIO_Init+0x328>)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3302      	adds	r3, #2
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_GPIO_Init+0x354>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800212e:	4a34      	ldr	r2, [pc, #208]	; (8002200 <HAL_GPIO_Init+0x354>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002134:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_GPIO_Init+0x354>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002158:	4a29      	ldr	r2, [pc, #164]	; (8002200 <HAL_GPIO_Init+0x354>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_GPIO_Init+0x354>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002182:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <HAL_GPIO_Init+0x354>)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_GPIO_Init+0x354>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <HAL_GPIO_Init+0x354>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3301      	adds	r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b0f      	cmp	r3, #15
 80021bc:	f67f ae84 	bls.w	8001ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3724      	adds	r7, #36	; 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40013800 	.word	0x40013800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40020c00 	.word	0x40020c00
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40021400 	.word	0x40021400
 80021f0:	40021800 	.word	0x40021800
 80021f4:	40021c00 	.word	0x40021c00
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40022400 	.word	0x40022400
 8002200:	40013c00 	.word	0x40013c00

08002204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	e001      	b.n	8002226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002250:	e003      	b.n	800225a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	619a      	str	r2, [r3, #24]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002266:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002268:	b08f      	sub	sp, #60	; 0x3c
 800226a:	af0a      	add	r7, sp, #40	; 0x28
 800226c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e10f      	b.n	8002498 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe fe88 	bl	8000fa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2203      	movs	r2, #3
 800229c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 fc5f 	bl	8003b7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	687e      	ldr	r6, [r7, #4]
 80022c4:	466d      	mov	r5, sp
 80022c6:	f106 0410 	add.w	r4, r6, #16
 80022ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022da:	1d33      	adds	r3, r6, #4
 80022dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022de:	6838      	ldr	r0, [r7, #0]
 80022e0:	f001 fbea 	bl	8003ab8 <USB_CoreInit>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0d0      	b.n	8002498 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f001 fc4d 	bl	8003b9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]
 8002306:	e04a      	b.n	800239e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	333d      	adds	r3, #61	; 0x3d
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	333c      	adds	r3, #60	; 0x3c
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	b298      	uxth	r0, r3
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3342      	adds	r3, #66	; 0x42
 8002344:	4602      	mov	r2, r0
 8002346:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	333f      	adds	r3, #63	; 0x3f
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3344      	adds	r3, #68	; 0x44
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3348      	adds	r3, #72	; 0x48
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	3350      	adds	r3, #80	; 0x50
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	3301      	adds	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d3af      	bcc.n	8002308 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	e044      	b.n	8002438 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	3301      	adds	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	d3b5      	bcc.n	80023ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	687e      	ldr	r6, [r7, #4]
 800244a:	466d      	mov	r5, sp
 800244c:	f106 0410 	add.w	r4, r6, #16
 8002450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002458:	e894 0003 	ldmia.w	r4, {r0, r1}
 800245c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002460:	1d33      	adds	r3, r6, #4
 8002462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002464:	6838      	ldr	r0, [r7, #0]
 8002466:	f001 fbe5 	bl	8003c34 <USB_DevInit>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e00d      	b.n	8002498 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f001 fd90 	bl	8003fb6 <USB_DevDisconnect>

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e264      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d075      	beq.n	80025aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024be:	4ba3      	ldr	r3, [pc, #652]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d00c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ca:	4ba0      	ldr	r3, [pc, #640]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d112      	bne.n	80024fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d6:	4b9d      	ldr	r3, [pc, #628]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e2:	d10b      	bne.n	80024fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	4b99      	ldr	r3, [pc, #612]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d05b      	beq.n	80025a8 <HAL_RCC_OscConfig+0x108>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d157      	bne.n	80025a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e23f      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002504:	d106      	bne.n	8002514 <HAL_RCC_OscConfig+0x74>
 8002506:	4b91      	ldr	r3, [pc, #580]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a90      	ldr	r2, [pc, #576]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e01d      	b.n	8002550 <HAL_RCC_OscConfig+0xb0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x98>
 800251e:	4b8b      	ldr	r3, [pc, #556]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a8a      	ldr	r2, [pc, #552]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a87      	ldr	r2, [pc, #540]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0xb0>
 8002538:	4b84      	ldr	r3, [pc, #528]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a83      	ldr	r2, [pc, #524]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b81      	ldr	r3, [pc, #516]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a80      	ldr	r2, [pc, #512]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7fe fefa 	bl	8001350 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002560:	f7fe fef6 	bl	8001350 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e204      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0xc0>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fee6 	bl	8001350 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7fe fee2 	bl	8001350 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1f0      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	4b6c      	ldr	r3, [pc, #432]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0xe8>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d063      	beq.n	800267e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025b6:	4b65      	ldr	r3, [pc, #404]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b62      	ldr	r3, [pc, #392]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d11c      	bne.n	8002608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ce:	4b5f      	ldr	r3, [pc, #380]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	4b5c      	ldr	r3, [pc, #368]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_RCC_OscConfig+0x152>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1c4      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b56      	ldr	r3, [pc, #344]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4952      	ldr	r1, [pc, #328]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	e03a      	b.n	800267e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002610:	4b4f      	ldr	r3, [pc, #316]	; (8002750 <HAL_RCC_OscConfig+0x2b0>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fe9b 	bl	8001350 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261e:	f7fe fe97 	bl	8001350 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1a5      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	4b46      	ldr	r3, [pc, #280]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b43      	ldr	r3, [pc, #268]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4940      	ldr	r1, [pc, #256]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <HAL_RCC_OscConfig+0x2b0>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fe7a 	bl	8001350 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002660:	f7fe fe76 	bl	8001350 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e184      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d030      	beq.n	80026ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d016      	beq.n	80026c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b30      	ldr	r3, [pc, #192]	; (8002754 <HAL_RCC_OscConfig+0x2b4>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe fe5a 	bl	8001350 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a0:	f7fe fe56 	bl	8001350 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e164      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x200>
 80026be:	e015      	b.n	80026ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c0:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_OscConfig+0x2b4>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c6:	f7fe fe43 	bl	8001350 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ce:	f7fe fe3f 	bl	8001350 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e14d      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80026e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80a0 	beq.w	800283a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a0e      	ldr	r2, [pc, #56]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_OscConfig+0x2b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d121      	bne.n	800277a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_RCC_OscConfig+0x2b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_RCC_OscConfig+0x2b8>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002742:	f7fe fe05 	bl	8001350 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	e011      	b.n	800276e <HAL_RCC_OscConfig+0x2ce>
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	42470000 	.word	0x42470000
 8002754:	42470e80 	.word	0x42470e80
 8002758:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275c:	f7fe fdf8 	bl	8001350 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e106      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b85      	ldr	r3, [pc, #532]	; (8002984 <HAL_RCC_OscConfig+0x4e4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d106      	bne.n	8002790 <HAL_RCC_OscConfig+0x2f0>
 8002782:	4b81      	ldr	r3, [pc, #516]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	4a80      	ldr	r2, [pc, #512]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6713      	str	r3, [r2, #112]	; 0x70
 800278e:	e01c      	b.n	80027ca <HAL_RCC_OscConfig+0x32a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b05      	cmp	r3, #5
 8002796:	d10c      	bne.n	80027b2 <HAL_RCC_OscConfig+0x312>
 8002798:	4b7b      	ldr	r3, [pc, #492]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	4a7a      	ldr	r2, [pc, #488]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	6713      	str	r3, [r2, #112]	; 0x70
 80027a4:	4b78      	ldr	r3, [pc, #480]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a77      	ldr	r2, [pc, #476]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	e00b      	b.n	80027ca <HAL_RCC_OscConfig+0x32a>
 80027b2:	4b75      	ldr	r3, [pc, #468]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a74      	ldr	r2, [pc, #464]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	4b72      	ldr	r3, [pc, #456]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a71      	ldr	r2, [pc, #452]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d015      	beq.n	80027fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7fe fdbd 	bl	8001350 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe fdb9 	bl	8001350 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e0c5      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ee      	beq.n	80027da <HAL_RCC_OscConfig+0x33a>
 80027fc:	e014      	b.n	8002828 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7fe fda7 	bl	8001350 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fda3 	bl	8001350 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0af      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281c:	4b5a      	ldr	r3, [pc, #360]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ee      	bne.n	8002806 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d105      	bne.n	800283a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282e:	4b56      	ldr	r3, [pc, #344]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a55      	ldr	r2, [pc, #340]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 8002834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 809b 	beq.w	800297a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002844:	4b50      	ldr	r3, [pc, #320]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d05c      	beq.n	800290a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d141      	bne.n	80028dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002858:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_RCC_OscConfig+0x4ec>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fe fd77 	bl	8001350 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fd73 	bl	8001350 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e081      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002878:	4b43      	ldr	r3, [pc, #268]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	019b      	lsls	r3, r3, #6
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	3b01      	subs	r3, #1
 800289e:	041b      	lsls	r3, r3, #16
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	061b      	lsls	r3, r3, #24
 80028a8:	4937      	ldr	r1, [pc, #220]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ae:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_RCC_OscConfig+0x4ec>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fd4c 	bl	8001350 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe fd48 	bl	8001350 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e056      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x41c>
 80028da:	e04e      	b.n	800297a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028dc:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_OscConfig+0x4ec>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe fd35 	bl	8001350 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fd31 	bl	8001350 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e03f      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fc:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x44a>
 8002908:	e037      	b.n	800297a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e032      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <HAL_RCC_OscConfig+0x4e8>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d028      	beq.n	8002976 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d121      	bne.n	8002976 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d11a      	bne.n	8002976 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002946:	4013      	ands	r3, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800294c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800294e:	4293      	cmp	r3, r2
 8002950:	d111      	bne.n	8002976 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	3b01      	subs	r3, #1
 8002960:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d107      	bne.n	8002976 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40007000 	.word	0x40007000
 8002988:	40023800 	.word	0x40023800
 800298c:	42470060 	.word	0x42470060

08002990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0cc      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b68      	ldr	r3, [pc, #416]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d90c      	bls.n	80029cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b63      	ldr	r3, [pc, #396]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0b8      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e4:	4b59      	ldr	r3, [pc, #356]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a58      	ldr	r2, [pc, #352]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029fc:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a52      	ldr	r2, [pc, #328]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b50      	ldr	r3, [pc, #320]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	494d      	ldr	r1, [pc, #308]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d044      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d119      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e07f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e06f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5e:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e067      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6e:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4934      	ldr	r1, [pc, #208]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a80:	f7fe fc66 	bl	8001350 <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a88:	f7fe fc62 	bl	8001350 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e04f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 020c 	and.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d1eb      	bne.n	8002a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d20c      	bcs.n	8002ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e032      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4916      	ldr	r1, [pc, #88]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	490e      	ldr	r1, [pc, #56]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b16:	f000 f821 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	490a      	ldr	r1, [pc, #40]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	5ccb      	ldrb	r3, [r1, r3]
 8002b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2e:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fbc6 	bl	80012c8 <HAL_InitTick>

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023c00 	.word	0x40023c00
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	08005154 	.word	0x08005154
 8002b54:	20000000 	.word	0x20000000
 8002b58:	20000004 	.word	0x20000004

08002b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b74:	4b67      	ldr	r3, [pc, #412]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d00d      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0x40>
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	f200 80bd 	bhi.w	8002d00 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x34>
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d003      	beq.n	8002b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b8e:	e0b7      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4b61      	ldr	r3, [pc, #388]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b92:	60bb      	str	r3, [r7, #8]
       break;
 8002b94:	e0b7      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b96:	4b61      	ldr	r3, [pc, #388]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b98:	60bb      	str	r3, [r7, #8]
      break;
 8002b9a:	e0b4      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b9c:	4b5d      	ldr	r3, [pc, #372]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d04d      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb2:	4b58      	ldr	r3, [pc, #352]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	099b      	lsrs	r3, r3, #6
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bc2:	f04f 0100 	mov.w	r1, #0
 8002bc6:	ea02 0800 	and.w	r8, r2, r0
 8002bca:	ea03 0901 	and.w	r9, r3, r1
 8002bce:	4640      	mov	r0, r8
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	014b      	lsls	r3, r1, #5
 8002bdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002be0:	0142      	lsls	r2, r0, #5
 8002be2:	4610      	mov	r0, r2
 8002be4:	4619      	mov	r1, r3
 8002be6:	ebb0 0008 	subs.w	r0, r0, r8
 8002bea:	eb61 0109 	sbc.w	r1, r1, r9
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	018b      	lsls	r3, r1, #6
 8002bf8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bfc:	0182      	lsls	r2, r0, #6
 8002bfe:	1a12      	subs	r2, r2, r0
 8002c00:	eb63 0301 	sbc.w	r3, r3, r1
 8002c04:	f04f 0000 	mov.w	r0, #0
 8002c08:	f04f 0100 	mov.w	r1, #0
 8002c0c:	00d9      	lsls	r1, r3, #3
 8002c0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c12:	00d0      	lsls	r0, r2, #3
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	eb12 0208 	adds.w	r2, r2, r8
 8002c1c:	eb43 0309 	adc.w	r3, r3, r9
 8002c20:	f04f 0000 	mov.w	r0, #0
 8002c24:	f04f 0100 	mov.w	r1, #0
 8002c28:	0259      	lsls	r1, r3, #9
 8002c2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c2e:	0250      	lsls	r0, r2, #9
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	f7fd fb26 	bl	8000290 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e04a      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4e:	4b31      	ldr	r3, [pc, #196]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	461a      	mov	r2, r3
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c5e:	f04f 0100 	mov.w	r1, #0
 8002c62:	ea02 0400 	and.w	r4, r2, r0
 8002c66:	ea03 0501 	and.w	r5, r3, r1
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	014b      	lsls	r3, r1, #5
 8002c78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c7c:	0142      	lsls	r2, r0, #5
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	1b00      	subs	r0, r0, r4
 8002c84:	eb61 0105 	sbc.w	r1, r1, r5
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	018b      	lsls	r3, r1, #6
 8002c92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c96:	0182      	lsls	r2, r0, #6
 8002c98:	1a12      	subs	r2, r2, r0
 8002c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9e:	f04f 0000 	mov.w	r0, #0
 8002ca2:	f04f 0100 	mov.w	r1, #0
 8002ca6:	00d9      	lsls	r1, r3, #3
 8002ca8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cac:	00d0      	lsls	r0, r2, #3
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	1912      	adds	r2, r2, r4
 8002cb4:	eb45 0303 	adc.w	r3, r5, r3
 8002cb8:	f04f 0000 	mov.w	r0, #0
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	0299      	lsls	r1, r3, #10
 8002cc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cc6:	0290      	lsls	r0, r2, #10
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	f7fd fada 	bl	8000290 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	60bb      	str	r3, [r7, #8]
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d02:	60bb      	str	r3, [r7, #8]
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	68bb      	ldr	r3, [r7, #8]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	00f42400 	.word	0x00f42400
 8002d1c:	007a1200 	.word	0x007a1200

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000000 	.word	0x20000000

08002d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d3c:	f7ff fff0 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0a9b      	lsrs	r3, r3, #10
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	08005164 	.word	0x08005164

08002d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d64:	f7ff ffdc 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0b5b      	lsrs	r3, r3, #13
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08005164 	.word	0x08005164

08002d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e041      	b.n	8002e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe f88a 	bl	8000ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f000 fa96 	bl	80032f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d001      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e04e      	b.n	8002ede <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	; (8002eec <HAL_TIM_Base_Start_IT+0xc4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d022      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6a:	d01d      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d018      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d013      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00e      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <HAL_TIM_Base_Start_IT+0xd4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d009      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d111      	bne.n	8002ecc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d010      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0201 	orr.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eca:	e007      	b.n	8002edc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800
 8002ef8:	40000c00 	.word	0x40000c00
 8002efc:	40010400 	.word	0x40010400
 8002f00:	40014000 	.word	0x40014000
 8002f04:	40001800 	.word	0x40001800

08002f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0202 	mvn.w	r2, #2
 8002f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f9b5 	bl	80032ba <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f9a7 	bl	80032a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f9b8 	bl	80032ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d122      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0204 	mvn.w	r2, #4
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f98b 	bl	80032ba <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f97d 	bl	80032a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f98e 	bl	80032ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d122      	bne.n	800300c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d11b      	bne.n	800300c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0208 	mvn.w	r2, #8
 8002fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f961 	bl	80032ba <HAL_TIM_IC_CaptureCallback>
 8002ff8:	e005      	b.n	8003006 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f953 	bl	80032a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f964 	bl	80032ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b10      	cmp	r3, #16
 8003018:	d122      	bne.n	8003060 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b10      	cmp	r3, #16
 8003026:	d11b      	bne.n	8003060 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0210 	mvn.w	r2, #16
 8003030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2208      	movs	r2, #8
 8003036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f937 	bl	80032ba <HAL_TIM_IC_CaptureCallback>
 800304c:	e005      	b.n	800305a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f929 	bl	80032a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f93a 	bl	80032ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b01      	cmp	r3, #1
 800306c:	d10e      	bne.n	800308c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b01      	cmp	r3, #1
 800307a:	d107      	bne.n	800308c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0201 	mvn.w	r2, #1
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fab2 	bl	80005f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b80      	cmp	r3, #128	; 0x80
 8003098:	d10e      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	2b80      	cmp	r3, #128	; 0x80
 80030a6:	d107      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fae0 	bl	8003678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d10e      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d107      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8ff 	bl	80032e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d107      	bne.n	8003110 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0220 	mvn.w	r2, #32
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 faaa 	bl	8003664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_TIM_ConfigClockSource+0x1c>
 8003130:	2302      	movs	r3, #2
 8003132:	e0b4      	b.n	800329e <HAL_TIM_ConfigClockSource+0x186>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800315a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800316c:	d03e      	beq.n	80031ec <HAL_TIM_ConfigClockSource+0xd4>
 800316e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003172:	f200 8087 	bhi.w	8003284 <HAL_TIM_ConfigClockSource+0x16c>
 8003176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317a:	f000 8086 	beq.w	800328a <HAL_TIM_ConfigClockSource+0x172>
 800317e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003182:	d87f      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x16c>
 8003184:	2b70      	cmp	r3, #112	; 0x70
 8003186:	d01a      	beq.n	80031be <HAL_TIM_ConfigClockSource+0xa6>
 8003188:	2b70      	cmp	r3, #112	; 0x70
 800318a:	d87b      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x16c>
 800318c:	2b60      	cmp	r3, #96	; 0x60
 800318e:	d050      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x11a>
 8003190:	2b60      	cmp	r3, #96	; 0x60
 8003192:	d877      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x16c>
 8003194:	2b50      	cmp	r3, #80	; 0x50
 8003196:	d03c      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0xfa>
 8003198:	2b50      	cmp	r3, #80	; 0x50
 800319a:	d873      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d058      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x13a>
 80031a0:	2b40      	cmp	r3, #64	; 0x40
 80031a2:	d86f      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x16c>
 80031a4:	2b30      	cmp	r3, #48	; 0x30
 80031a6:	d064      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x15a>
 80031a8:	2b30      	cmp	r3, #48	; 0x30
 80031aa:	d86b      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d060      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x15a>
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d867      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d05c      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x15a>
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d05a      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x15a>
 80031bc:	e062      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6899      	ldr	r1, [r3, #8]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f000 f9ad 	bl	800352c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	609a      	str	r2, [r3, #8]
      break;
 80031ea:	e04f      	b.n	800328c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f000 f996 	bl	800352c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800320e:	609a      	str	r2, [r3, #8]
      break;
 8003210:	e03c      	b.n	800328c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	461a      	mov	r2, r3
 8003220:	f000 f90a 	bl	8003438 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2150      	movs	r1, #80	; 0x50
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f963 	bl	80034f6 <TIM_ITRx_SetConfig>
      break;
 8003230:	e02c      	b.n	800328c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	461a      	mov	r2, r3
 8003240:	f000 f929 	bl	8003496 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2160      	movs	r1, #96	; 0x60
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f953 	bl	80034f6 <TIM_ITRx_SetConfig>
      break;
 8003250:	e01c      	b.n	800328c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	461a      	mov	r2, r3
 8003260:	f000 f8ea 	bl	8003438 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2140      	movs	r1, #64	; 0x40
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f943 	bl	80034f6 <TIM_ITRx_SetConfig>
      break;
 8003270:	e00c      	b.n	800328c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4619      	mov	r1, r3
 800327c:	4610      	mov	r0, r2
 800327e:	f000 f93a 	bl	80034f6 <TIM_ITRx_SetConfig>
      break;
 8003282:	e003      	b.n	800328c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
      break;
 8003288:	e000      	b.n	800328c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800328a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a40      	ldr	r2, [pc, #256]	; (800340c <TIM_Base_SetConfig+0x114>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d013      	beq.n	8003338 <TIM_Base_SetConfig+0x40>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003316:	d00f      	beq.n	8003338 <TIM_Base_SetConfig+0x40>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a3d      	ldr	r2, [pc, #244]	; (8003410 <TIM_Base_SetConfig+0x118>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00b      	beq.n	8003338 <TIM_Base_SetConfig+0x40>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a3c      	ldr	r2, [pc, #240]	; (8003414 <TIM_Base_SetConfig+0x11c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d007      	beq.n	8003338 <TIM_Base_SetConfig+0x40>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a3b      	ldr	r2, [pc, #236]	; (8003418 <TIM_Base_SetConfig+0x120>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_Base_SetConfig+0x40>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a3a      	ldr	r2, [pc, #232]	; (800341c <TIM_Base_SetConfig+0x124>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d108      	bne.n	800334a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a2f      	ldr	r2, [pc, #188]	; (800340c <TIM_Base_SetConfig+0x114>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d02b      	beq.n	80033aa <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003358:	d027      	beq.n	80033aa <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a2c      	ldr	r2, [pc, #176]	; (8003410 <TIM_Base_SetConfig+0x118>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d023      	beq.n	80033aa <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a2b      	ldr	r2, [pc, #172]	; (8003414 <TIM_Base_SetConfig+0x11c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01f      	beq.n	80033aa <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a2a      	ldr	r2, [pc, #168]	; (8003418 <TIM_Base_SetConfig+0x120>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01b      	beq.n	80033aa <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a29      	ldr	r2, [pc, #164]	; (800341c <TIM_Base_SetConfig+0x124>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d017      	beq.n	80033aa <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a28      	ldr	r2, [pc, #160]	; (8003420 <TIM_Base_SetConfig+0x128>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a27      	ldr	r2, [pc, #156]	; (8003424 <TIM_Base_SetConfig+0x12c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00f      	beq.n	80033aa <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a26      	ldr	r2, [pc, #152]	; (8003428 <TIM_Base_SetConfig+0x130>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00b      	beq.n	80033aa <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a25      	ldr	r2, [pc, #148]	; (800342c <TIM_Base_SetConfig+0x134>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a24      	ldr	r2, [pc, #144]	; (8003430 <TIM_Base_SetConfig+0x138>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d003      	beq.n	80033aa <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a23      	ldr	r2, [pc, #140]	; (8003434 <TIM_Base_SetConfig+0x13c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d108      	bne.n	80033bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a0a      	ldr	r2, [pc, #40]	; (800340c <TIM_Base_SetConfig+0x114>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_Base_SetConfig+0xf8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a0c      	ldr	r2, [pc, #48]	; (800341c <TIM_Base_SetConfig+0x124>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d103      	bne.n	80033f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	615a      	str	r2, [r3, #20]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40010400 	.word	0x40010400
 8003420:	40014000 	.word	0x40014000
 8003424:	40014400 	.word	0x40014400
 8003428:	40014800 	.word	0x40014800
 800342c:	40001800 	.word	0x40001800
 8003430:	40001c00 	.word	0x40001c00
 8003434:	40002000 	.word	0x40002000

08003438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f023 0201 	bic.w	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f023 030a 	bic.w	r3, r3, #10
 8003474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003496:	b480      	push	{r7}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f023 0210 	bic.w	r2, r3, #16
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	031b      	lsls	r3, r3, #12
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	f043 0307 	orr.w	r3, r3, #7
 8003518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	609a      	str	r2, [r3, #8]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	021a      	lsls	r2, r3, #8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	431a      	orrs	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4313      	orrs	r3, r2
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	609a      	str	r2, [r3, #8]
}
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003580:	2302      	movs	r3, #2
 8003582:	e05a      	b.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a21      	ldr	r2, [pc, #132]	; (8003648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d022      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d01d      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d018      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1a      	ldr	r2, [pc, #104]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00e      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a18      	ldr	r2, [pc, #96]	; (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a17      	ldr	r2, [pc, #92]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a15      	ldr	r2, [pc, #84]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d10c      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	4313      	orrs	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40010400 	.word	0x40010400
 800365c:	40014000 	.word	0x40014000
 8003660:	40001800 	.word	0x40001800

08003664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e03f      	b.n	800371e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fc30 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	; 0x24
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f829 	bl	8003728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372c:	b09f      	sub	sp, #124	; 0x7c
 800372e:	af00      	add	r7, sp, #0
 8003730:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800373c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373e:	68d9      	ldr	r1, [r3, #12]
 8003740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	ea40 0301 	orr.w	r3, r0, r1
 8003748:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800374a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	431a      	orrs	r2, r3
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	431a      	orrs	r2, r3
 800375a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	4313      	orrs	r3, r2
 8003760:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800376c:	f021 010c 	bic.w	r1, r1, #12
 8003770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003776:	430b      	orrs	r3, r1
 8003778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800377a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003786:	6999      	ldr	r1, [r3, #24]
 8003788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	ea40 0301 	orr.w	r3, r0, r1
 8003790:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4bc5      	ldr	r3, [pc, #788]	; (8003aac <UART_SetConfig+0x384>)
 8003798:	429a      	cmp	r2, r3
 800379a:	d004      	beq.n	80037a6 <UART_SetConfig+0x7e>
 800379c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4bc3      	ldr	r3, [pc, #780]	; (8003ab0 <UART_SetConfig+0x388>)
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d103      	bne.n	80037ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037a6:	f7ff fadb 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 80037aa:	6778      	str	r0, [r7, #116]	; 0x74
 80037ac:	e002      	b.n	80037b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037ae:	f7ff fac3 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 80037b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037bc:	f040 80b6 	bne.w	800392c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c2:	461c      	mov	r4, r3
 80037c4:	f04f 0500 	mov.w	r5, #0
 80037c8:	4622      	mov	r2, r4
 80037ca:	462b      	mov	r3, r5
 80037cc:	1891      	adds	r1, r2, r2
 80037ce:	6439      	str	r1, [r7, #64]	; 0x40
 80037d0:	415b      	adcs	r3, r3
 80037d2:	647b      	str	r3, [r7, #68]	; 0x44
 80037d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037d8:	1912      	adds	r2, r2, r4
 80037da:	eb45 0303 	adc.w	r3, r5, r3
 80037de:	f04f 0000 	mov.w	r0, #0
 80037e2:	f04f 0100 	mov.w	r1, #0
 80037e6:	00d9      	lsls	r1, r3, #3
 80037e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ec:	00d0      	lsls	r0, r2, #3
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	1911      	adds	r1, r2, r4
 80037f4:	6639      	str	r1, [r7, #96]	; 0x60
 80037f6:	416b      	adcs	r3, r5
 80037f8:	667b      	str	r3, [r7, #100]	; 0x64
 80037fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	461a      	mov	r2, r3
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	1891      	adds	r1, r2, r2
 8003806:	63b9      	str	r1, [r7, #56]	; 0x38
 8003808:	415b      	adcs	r3, r3
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800380c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003810:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003814:	f7fc fd3c 	bl	8000290 <__aeabi_uldivmod>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4ba5      	ldr	r3, [pc, #660]	; (8003ab4 <UART_SetConfig+0x38c>)
 800381e:	fba3 2302 	umull	r2, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	011e      	lsls	r6, r3, #4
 8003826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003828:	461c      	mov	r4, r3
 800382a:	f04f 0500 	mov.w	r5, #0
 800382e:	4622      	mov	r2, r4
 8003830:	462b      	mov	r3, r5
 8003832:	1891      	adds	r1, r2, r2
 8003834:	6339      	str	r1, [r7, #48]	; 0x30
 8003836:	415b      	adcs	r3, r3
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
 800383a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800383e:	1912      	adds	r2, r2, r4
 8003840:	eb45 0303 	adc.w	r3, r5, r3
 8003844:	f04f 0000 	mov.w	r0, #0
 8003848:	f04f 0100 	mov.w	r1, #0
 800384c:	00d9      	lsls	r1, r3, #3
 800384e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003852:	00d0      	lsls	r0, r2, #3
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	1911      	adds	r1, r2, r4
 800385a:	65b9      	str	r1, [r7, #88]	; 0x58
 800385c:	416b      	adcs	r3, r5
 800385e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	461a      	mov	r2, r3
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	1891      	adds	r1, r2, r2
 800386c:	62b9      	str	r1, [r7, #40]	; 0x28
 800386e:	415b      	adcs	r3, r3
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003876:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800387a:	f7fc fd09 	bl	8000290 <__aeabi_uldivmod>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4b8c      	ldr	r3, [pc, #560]	; (8003ab4 <UART_SetConfig+0x38c>)
 8003884:	fba3 1302 	umull	r1, r3, r3, r2
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	2164      	movs	r1, #100	; 0x64
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	3332      	adds	r3, #50	; 0x32
 8003896:	4a87      	ldr	r2, [pc, #540]	; (8003ab4 <UART_SetConfig+0x38c>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038a4:	441e      	add	r6, r3
 80038a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a8:	4618      	mov	r0, r3
 80038aa:	f04f 0100 	mov.w	r1, #0
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	1894      	adds	r4, r2, r2
 80038b4:	623c      	str	r4, [r7, #32]
 80038b6:	415b      	adcs	r3, r3
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038be:	1812      	adds	r2, r2, r0
 80038c0:	eb41 0303 	adc.w	r3, r1, r3
 80038c4:	f04f 0400 	mov.w	r4, #0
 80038c8:	f04f 0500 	mov.w	r5, #0
 80038cc:	00dd      	lsls	r5, r3, #3
 80038ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038d2:	00d4      	lsls	r4, r2, #3
 80038d4:	4622      	mov	r2, r4
 80038d6:	462b      	mov	r3, r5
 80038d8:	1814      	adds	r4, r2, r0
 80038da:	653c      	str	r4, [r7, #80]	; 0x50
 80038dc:	414b      	adcs	r3, r1
 80038de:	657b      	str	r3, [r7, #84]	; 0x54
 80038e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	461a      	mov	r2, r3
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	1891      	adds	r1, r2, r2
 80038ec:	61b9      	str	r1, [r7, #24]
 80038ee:	415b      	adcs	r3, r3
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038fa:	f7fc fcc9 	bl	8000290 <__aeabi_uldivmod>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4b6c      	ldr	r3, [pc, #432]	; (8003ab4 <UART_SetConfig+0x38c>)
 8003904:	fba3 1302 	umull	r1, r3, r3, r2
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	2164      	movs	r1, #100	; 0x64
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	3332      	adds	r3, #50	; 0x32
 8003916:	4a67      	ldr	r2, [pc, #412]	; (8003ab4 <UART_SetConfig+0x38c>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	f003 0207 	and.w	r2, r3, #7
 8003922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4432      	add	r2, r6
 8003928:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800392a:	e0b9      	b.n	8003aa0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800392c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800392e:	461c      	mov	r4, r3
 8003930:	f04f 0500 	mov.w	r5, #0
 8003934:	4622      	mov	r2, r4
 8003936:	462b      	mov	r3, r5
 8003938:	1891      	adds	r1, r2, r2
 800393a:	6139      	str	r1, [r7, #16]
 800393c:	415b      	adcs	r3, r3
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003944:	1912      	adds	r2, r2, r4
 8003946:	eb45 0303 	adc.w	r3, r5, r3
 800394a:	f04f 0000 	mov.w	r0, #0
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	00d9      	lsls	r1, r3, #3
 8003954:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003958:	00d0      	lsls	r0, r2, #3
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	eb12 0804 	adds.w	r8, r2, r4
 8003962:	eb43 0905 	adc.w	r9, r3, r5
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4618      	mov	r0, r3
 800396c:	f04f 0100 	mov.w	r1, #0
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	008b      	lsls	r3, r1, #2
 800397a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800397e:	0082      	lsls	r2, r0, #2
 8003980:	4640      	mov	r0, r8
 8003982:	4649      	mov	r1, r9
 8003984:	f7fc fc84 	bl	8000290 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4b49      	ldr	r3, [pc, #292]	; (8003ab4 <UART_SetConfig+0x38c>)
 800398e:	fba3 2302 	umull	r2, r3, r3, r2
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	011e      	lsls	r6, r3, #4
 8003996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003998:	4618      	mov	r0, r3
 800399a:	f04f 0100 	mov.w	r1, #0
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	1894      	adds	r4, r2, r2
 80039a4:	60bc      	str	r4, [r7, #8]
 80039a6:	415b      	adcs	r3, r3
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039ae:	1812      	adds	r2, r2, r0
 80039b0:	eb41 0303 	adc.w	r3, r1, r3
 80039b4:	f04f 0400 	mov.w	r4, #0
 80039b8:	f04f 0500 	mov.w	r5, #0
 80039bc:	00dd      	lsls	r5, r3, #3
 80039be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039c2:	00d4      	lsls	r4, r2, #3
 80039c4:	4622      	mov	r2, r4
 80039c6:	462b      	mov	r3, r5
 80039c8:	1814      	adds	r4, r2, r0
 80039ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80039cc:	414b      	adcs	r3, r1
 80039ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f04f 0100 	mov.w	r1, #0
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	008b      	lsls	r3, r1, #2
 80039e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039e8:	0082      	lsls	r2, r0, #2
 80039ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80039ee:	f7fc fc4f 	bl	8000290 <__aeabi_uldivmod>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <UART_SetConfig+0x38c>)
 80039f8:	fba3 1302 	umull	r1, r3, r3, r2
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	2164      	movs	r1, #100	; 0x64
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	3332      	adds	r3, #50	; 0x32
 8003a0a:	4a2a      	ldr	r2, [pc, #168]	; (8003ab4 <UART_SetConfig+0x38c>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a16:	441e      	add	r6, r3
 8003a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f04f 0100 	mov.w	r1, #0
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	1894      	adds	r4, r2, r2
 8003a26:	603c      	str	r4, [r7, #0]
 8003a28:	415b      	adcs	r3, r3
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a30:	1812      	adds	r2, r2, r0
 8003a32:	eb41 0303 	adc.w	r3, r1, r3
 8003a36:	f04f 0400 	mov.w	r4, #0
 8003a3a:	f04f 0500 	mov.w	r5, #0
 8003a3e:	00dd      	lsls	r5, r3, #3
 8003a40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a44:	00d4      	lsls	r4, r2, #3
 8003a46:	4622      	mov	r2, r4
 8003a48:	462b      	mov	r3, r5
 8003a4a:	eb12 0a00 	adds.w	sl, r2, r0
 8003a4e:	eb43 0b01 	adc.w	fp, r3, r1
 8003a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	008b      	lsls	r3, r1, #2
 8003a66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a6a:	0082      	lsls	r2, r0, #2
 8003a6c:	4650      	mov	r0, sl
 8003a6e:	4659      	mov	r1, fp
 8003a70:	f7fc fc0e 	bl	8000290 <__aeabi_uldivmod>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <UART_SetConfig+0x38c>)
 8003a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	2164      	movs	r1, #100	; 0x64
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	3332      	adds	r3, #50	; 0x32
 8003a8c:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <UART_SetConfig+0x38c>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	f003 020f 	and.w	r2, r3, #15
 8003a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4432      	add	r2, r6
 8003a9e:	609a      	str	r2, [r3, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	377c      	adds	r7, #124	; 0x7c
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aaa:	bf00      	nop
 8003aac:	40011000 	.word	0x40011000
 8003ab0:	40011400 	.word	0x40011400
 8003ab4:	51eb851f 	.word	0x51eb851f

08003ab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ab8:	b084      	sub	sp, #16
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	f107 001c 	add.w	r0, r7, #28
 8003ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d122      	bne.n	8003b16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d105      	bne.n	8003b0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa82 	bl	8004014 <USB_CoreReset>
 8003b10:	4603      	mov	r3, r0
 8003b12:	73fb      	strb	r3, [r7, #15]
 8003b14:	e01a      	b.n	8003b4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fa76 	bl	8004014 <USB_CoreReset>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38
 8003b3e:	e005      	b.n	8003b4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d10b      	bne.n	8003b6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f043 0206 	orr.w	r2, r3, #6
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b76:	b004      	add	sp, #16
 8003b78:	4770      	bx	lr

08003b7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f023 0201 	bic.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d115      	bne.n	8003bea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bca:	2001      	movs	r0, #1
 8003bcc:	f7fd fbcc 	bl	8001368 <HAL_Delay>
      ms++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fa0e 	bl	8003ff8 <USB_GetMode>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d01e      	beq.n	8003c20 <USB_SetCurrentMode+0x84>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b31      	cmp	r3, #49	; 0x31
 8003be6:	d9f0      	bls.n	8003bca <USB_SetCurrentMode+0x2e>
 8003be8:	e01a      	b.n	8003c20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d115      	bne.n	8003c1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f7fd fbb3 	bl	8001368 <HAL_Delay>
      ms++;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f9f5 	bl	8003ff8 <USB_GetMode>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <USB_SetCurrentMode+0x84>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b31      	cmp	r3, #49	; 0x31
 8003c18:	d9f0      	bls.n	8003bfc <USB_SetCurrentMode+0x60>
 8003c1a:	e001      	b.n	8003c20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e005      	b.n	8003c2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b32      	cmp	r3, #50	; 0x32
 8003c24:	d101      	bne.n	8003c2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c34:	b084      	sub	sp, #16
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	e009      	b.n	8003c68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	3340      	adds	r3, #64	; 0x40
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	2200      	movs	r2, #0
 8003c60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	3301      	adds	r3, #1
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b0e      	cmp	r3, #14
 8003c6c:	d9f2      	bls.n	8003c54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d11c      	bne.n	8003cae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c82:	f043 0302 	orr.w	r3, r3, #2
 8003c86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
 8003cac:	e00b      	b.n	8003cc6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2300      	movs	r3, #0
 8003cd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd8:	4619      	mov	r1, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	680b      	ldr	r3, [r1, #0]
 8003ce4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d10c      	bne.n	8003d06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f945 	bl	8003f84 <USB_SetDevSpeed>
 8003cfa:	e008      	b.n	8003d0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f940 	bl	8003f84 <USB_SetDevSpeed>
 8003d04:	e003      	b.n	8003d0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d06:	2103      	movs	r1, #3
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f93b 	bl	8003f84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d0e:	2110      	movs	r1, #16
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f8f3 	bl	8003efc <USB_FlushTxFifo>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f90f 	bl	8003f44 <USB_FlushRxFifo>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d36:	461a      	mov	r2, r3
 8003d38:	2300      	movs	r3, #0
 8003d3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d42:	461a      	mov	r2, r3
 8003d44:	2300      	movs	r3, #0
 8003d46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2300      	movs	r3, #0
 8003d52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	e043      	b.n	8003de2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d70:	d118      	bne.n	8003da4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d84:	461a      	mov	r2, r3
 8003d86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	e013      	b.n	8003db6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e008      	b.n	8003db6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db0:	461a      	mov	r2, r3
 8003db2:	2300      	movs	r3, #0
 8003db4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	3301      	adds	r3, #1
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d3b7      	bcc.n	8003d5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	e043      	b.n	8003e78 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e06:	d118      	bne.n	8003e3a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e013      	b.n	8003e4c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e30:	461a      	mov	r2, r3
 8003e32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	e008      	b.n	8003e4c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e46:	461a      	mov	r2, r3
 8003e48:	2300      	movs	r3, #0
 8003e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	3301      	adds	r3, #1
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d3b7      	bcc.n	8003df0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ea0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d105      	bne.n	8003eb4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f043 0210 	orr.w	r2, r3, #16
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699a      	ldr	r2, [r3, #24]
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <USB_DevInit+0x2c4>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f043 0208 	orr.w	r2, r3, #8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d107      	bne.n	8003ee8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ef4:	b004      	add	sp, #16
 8003ef6:	4770      	bx	lr
 8003ef8:	803c3800 	.word	0x803c3800

08003efc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	019b      	lsls	r3, r3, #6
 8003f0e:	f043 0220 	orr.w	r2, r3, #32
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <USB_FlushTxFifo+0x44>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e006      	b.n	8003f34 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d0f1      	beq.n	8003f16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	00030d40 	.word	0x00030d40

08003f44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2210      	movs	r2, #16
 8003f54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <USB_FlushRxFifo+0x3c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e006      	b.n	8003f74 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d0f1      	beq.n	8003f56 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	00030d40 	.word	0x00030d40

08003f84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b085      	sub	sp, #20
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fd0:	f023 0303 	bic.w	r3, r3, #3
 8003fd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 0301 	and.w	r3, r3, #1
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	4a13      	ldr	r2, [pc, #76]	; (8004074 <USB_CoreReset+0x60>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d901      	bls.n	8004030 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e01a      	b.n	8004066 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	daf3      	bge.n	8004020 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3301      	adds	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <USB_CoreReset+0x60>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d901      	bls.n	8004058 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e006      	b.n	8004066 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d0f1      	beq.n	8004048 <USB_CoreReset+0x34>

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	00030d40 	.word	0x00030d40

08004078 <__errno>:
 8004078:	4b01      	ldr	r3, [pc, #4]	; (8004080 <__errno+0x8>)
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	2000000c 	.word	0x2000000c

08004084 <__libc_init_array>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	4d0d      	ldr	r5, [pc, #52]	; (80040bc <__libc_init_array+0x38>)
 8004088:	4c0d      	ldr	r4, [pc, #52]	; (80040c0 <__libc_init_array+0x3c>)
 800408a:	1b64      	subs	r4, r4, r5
 800408c:	10a4      	asrs	r4, r4, #2
 800408e:	2600      	movs	r6, #0
 8004090:	42a6      	cmp	r6, r4
 8004092:	d109      	bne.n	80040a8 <__libc_init_array+0x24>
 8004094:	4d0b      	ldr	r5, [pc, #44]	; (80040c4 <__libc_init_array+0x40>)
 8004096:	4c0c      	ldr	r4, [pc, #48]	; (80040c8 <__libc_init_array+0x44>)
 8004098:	f000 ffec 	bl	8005074 <_init>
 800409c:	1b64      	subs	r4, r4, r5
 800409e:	10a4      	asrs	r4, r4, #2
 80040a0:	2600      	movs	r6, #0
 80040a2:	42a6      	cmp	r6, r4
 80040a4:	d105      	bne.n	80040b2 <__libc_init_array+0x2e>
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
 80040a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ac:	4798      	blx	r3
 80040ae:	3601      	adds	r6, #1
 80040b0:	e7ee      	b.n	8004090 <__libc_init_array+0xc>
 80040b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b6:	4798      	blx	r3
 80040b8:	3601      	adds	r6, #1
 80040ba:	e7f2      	b.n	80040a2 <__libc_init_array+0x1e>
 80040bc:	0800520c 	.word	0x0800520c
 80040c0:	0800520c 	.word	0x0800520c
 80040c4:	0800520c 	.word	0x0800520c
 80040c8:	08005210 	.word	0x08005210

080040cc <memset>:
 80040cc:	4402      	add	r2, r0
 80040ce:	4603      	mov	r3, r0
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d100      	bne.n	80040d6 <memset+0xa>
 80040d4:	4770      	bx	lr
 80040d6:	f803 1b01 	strb.w	r1, [r3], #1
 80040da:	e7f9      	b.n	80040d0 <memset+0x4>

080040dc <iprintf>:
 80040dc:	b40f      	push	{r0, r1, r2, r3}
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <iprintf+0x2c>)
 80040e0:	b513      	push	{r0, r1, r4, lr}
 80040e2:	681c      	ldr	r4, [r3, #0]
 80040e4:	b124      	cbz	r4, 80040f0 <iprintf+0x14>
 80040e6:	69a3      	ldr	r3, [r4, #24]
 80040e8:	b913      	cbnz	r3, 80040f0 <iprintf+0x14>
 80040ea:	4620      	mov	r0, r4
 80040ec:	f000 fa5e 	bl	80045ac <__sinit>
 80040f0:	ab05      	add	r3, sp, #20
 80040f2:	9a04      	ldr	r2, [sp, #16]
 80040f4:	68a1      	ldr	r1, [r4, #8]
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	4620      	mov	r0, r4
 80040fa:	f000 fc2f 	bl	800495c <_vfiprintf_r>
 80040fe:	b002      	add	sp, #8
 8004100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004104:	b004      	add	sp, #16
 8004106:	4770      	bx	lr
 8004108:	2000000c 	.word	0x2000000c

0800410c <_puts_r>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	460e      	mov	r6, r1
 8004110:	4605      	mov	r5, r0
 8004112:	b118      	cbz	r0, 800411c <_puts_r+0x10>
 8004114:	6983      	ldr	r3, [r0, #24]
 8004116:	b90b      	cbnz	r3, 800411c <_puts_r+0x10>
 8004118:	f000 fa48 	bl	80045ac <__sinit>
 800411c:	69ab      	ldr	r3, [r5, #24]
 800411e:	68ac      	ldr	r4, [r5, #8]
 8004120:	b913      	cbnz	r3, 8004128 <_puts_r+0x1c>
 8004122:	4628      	mov	r0, r5
 8004124:	f000 fa42 	bl	80045ac <__sinit>
 8004128:	4b2c      	ldr	r3, [pc, #176]	; (80041dc <_puts_r+0xd0>)
 800412a:	429c      	cmp	r4, r3
 800412c:	d120      	bne.n	8004170 <_puts_r+0x64>
 800412e:	686c      	ldr	r4, [r5, #4]
 8004130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004132:	07db      	lsls	r3, r3, #31
 8004134:	d405      	bmi.n	8004142 <_puts_r+0x36>
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	0598      	lsls	r0, r3, #22
 800413a:	d402      	bmi.n	8004142 <_puts_r+0x36>
 800413c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800413e:	f000 fad3 	bl	80046e8 <__retarget_lock_acquire_recursive>
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	0719      	lsls	r1, r3, #28
 8004146:	d51d      	bpl.n	8004184 <_puts_r+0x78>
 8004148:	6923      	ldr	r3, [r4, #16]
 800414a:	b1db      	cbz	r3, 8004184 <_puts_r+0x78>
 800414c:	3e01      	subs	r6, #1
 800414e:	68a3      	ldr	r3, [r4, #8]
 8004150:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004154:	3b01      	subs	r3, #1
 8004156:	60a3      	str	r3, [r4, #8]
 8004158:	bb39      	cbnz	r1, 80041aa <_puts_r+0x9e>
 800415a:	2b00      	cmp	r3, #0
 800415c:	da38      	bge.n	80041d0 <_puts_r+0xc4>
 800415e:	4622      	mov	r2, r4
 8004160:	210a      	movs	r1, #10
 8004162:	4628      	mov	r0, r5
 8004164:	f000 f848 	bl	80041f8 <__swbuf_r>
 8004168:	3001      	adds	r0, #1
 800416a:	d011      	beq.n	8004190 <_puts_r+0x84>
 800416c:	250a      	movs	r5, #10
 800416e:	e011      	b.n	8004194 <_puts_r+0x88>
 8004170:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <_puts_r+0xd4>)
 8004172:	429c      	cmp	r4, r3
 8004174:	d101      	bne.n	800417a <_puts_r+0x6e>
 8004176:	68ac      	ldr	r4, [r5, #8]
 8004178:	e7da      	b.n	8004130 <_puts_r+0x24>
 800417a:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <_puts_r+0xd8>)
 800417c:	429c      	cmp	r4, r3
 800417e:	bf08      	it	eq
 8004180:	68ec      	ldreq	r4, [r5, #12]
 8004182:	e7d5      	b.n	8004130 <_puts_r+0x24>
 8004184:	4621      	mov	r1, r4
 8004186:	4628      	mov	r0, r5
 8004188:	f000 f888 	bl	800429c <__swsetup_r>
 800418c:	2800      	cmp	r0, #0
 800418e:	d0dd      	beq.n	800414c <_puts_r+0x40>
 8004190:	f04f 35ff 	mov.w	r5, #4294967295
 8004194:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004196:	07da      	lsls	r2, r3, #31
 8004198:	d405      	bmi.n	80041a6 <_puts_r+0x9a>
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	059b      	lsls	r3, r3, #22
 800419e:	d402      	bmi.n	80041a6 <_puts_r+0x9a>
 80041a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041a2:	f000 faa2 	bl	80046ea <__retarget_lock_release_recursive>
 80041a6:	4628      	mov	r0, r5
 80041a8:	bd70      	pop	{r4, r5, r6, pc}
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	da04      	bge.n	80041b8 <_puts_r+0xac>
 80041ae:	69a2      	ldr	r2, [r4, #24]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	dc06      	bgt.n	80041c2 <_puts_r+0xb6>
 80041b4:	290a      	cmp	r1, #10
 80041b6:	d004      	beq.n	80041c2 <_puts_r+0xb6>
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	6022      	str	r2, [r4, #0]
 80041be:	7019      	strb	r1, [r3, #0]
 80041c0:	e7c5      	b.n	800414e <_puts_r+0x42>
 80041c2:	4622      	mov	r2, r4
 80041c4:	4628      	mov	r0, r5
 80041c6:	f000 f817 	bl	80041f8 <__swbuf_r>
 80041ca:	3001      	adds	r0, #1
 80041cc:	d1bf      	bne.n	800414e <_puts_r+0x42>
 80041ce:	e7df      	b.n	8004190 <_puts_r+0x84>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	250a      	movs	r5, #10
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	6022      	str	r2, [r4, #0]
 80041d8:	701d      	strb	r5, [r3, #0]
 80041da:	e7db      	b.n	8004194 <_puts_r+0x88>
 80041dc:	08005190 	.word	0x08005190
 80041e0:	080051b0 	.word	0x080051b0
 80041e4:	08005170 	.word	0x08005170

080041e8 <puts>:
 80041e8:	4b02      	ldr	r3, [pc, #8]	; (80041f4 <puts+0xc>)
 80041ea:	4601      	mov	r1, r0
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	f7ff bf8d 	b.w	800410c <_puts_r>
 80041f2:	bf00      	nop
 80041f4:	2000000c 	.word	0x2000000c

080041f8 <__swbuf_r>:
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fa:	460e      	mov	r6, r1
 80041fc:	4614      	mov	r4, r2
 80041fe:	4605      	mov	r5, r0
 8004200:	b118      	cbz	r0, 800420a <__swbuf_r+0x12>
 8004202:	6983      	ldr	r3, [r0, #24]
 8004204:	b90b      	cbnz	r3, 800420a <__swbuf_r+0x12>
 8004206:	f000 f9d1 	bl	80045ac <__sinit>
 800420a:	4b21      	ldr	r3, [pc, #132]	; (8004290 <__swbuf_r+0x98>)
 800420c:	429c      	cmp	r4, r3
 800420e:	d12b      	bne.n	8004268 <__swbuf_r+0x70>
 8004210:	686c      	ldr	r4, [r5, #4]
 8004212:	69a3      	ldr	r3, [r4, #24]
 8004214:	60a3      	str	r3, [r4, #8]
 8004216:	89a3      	ldrh	r3, [r4, #12]
 8004218:	071a      	lsls	r2, r3, #28
 800421a:	d52f      	bpl.n	800427c <__swbuf_r+0x84>
 800421c:	6923      	ldr	r3, [r4, #16]
 800421e:	b36b      	cbz	r3, 800427c <__swbuf_r+0x84>
 8004220:	6923      	ldr	r3, [r4, #16]
 8004222:	6820      	ldr	r0, [r4, #0]
 8004224:	1ac0      	subs	r0, r0, r3
 8004226:	6963      	ldr	r3, [r4, #20]
 8004228:	b2f6      	uxtb	r6, r6
 800422a:	4283      	cmp	r3, r0
 800422c:	4637      	mov	r7, r6
 800422e:	dc04      	bgt.n	800423a <__swbuf_r+0x42>
 8004230:	4621      	mov	r1, r4
 8004232:	4628      	mov	r0, r5
 8004234:	f000 f926 	bl	8004484 <_fflush_r>
 8004238:	bb30      	cbnz	r0, 8004288 <__swbuf_r+0x90>
 800423a:	68a3      	ldr	r3, [r4, #8]
 800423c:	3b01      	subs	r3, #1
 800423e:	60a3      	str	r3, [r4, #8]
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	6022      	str	r2, [r4, #0]
 8004246:	701e      	strb	r6, [r3, #0]
 8004248:	6963      	ldr	r3, [r4, #20]
 800424a:	3001      	adds	r0, #1
 800424c:	4283      	cmp	r3, r0
 800424e:	d004      	beq.n	800425a <__swbuf_r+0x62>
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	07db      	lsls	r3, r3, #31
 8004254:	d506      	bpl.n	8004264 <__swbuf_r+0x6c>
 8004256:	2e0a      	cmp	r6, #10
 8004258:	d104      	bne.n	8004264 <__swbuf_r+0x6c>
 800425a:	4621      	mov	r1, r4
 800425c:	4628      	mov	r0, r5
 800425e:	f000 f911 	bl	8004484 <_fflush_r>
 8004262:	b988      	cbnz	r0, 8004288 <__swbuf_r+0x90>
 8004264:	4638      	mov	r0, r7
 8004266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <__swbuf_r+0x9c>)
 800426a:	429c      	cmp	r4, r3
 800426c:	d101      	bne.n	8004272 <__swbuf_r+0x7a>
 800426e:	68ac      	ldr	r4, [r5, #8]
 8004270:	e7cf      	b.n	8004212 <__swbuf_r+0x1a>
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <__swbuf_r+0xa0>)
 8004274:	429c      	cmp	r4, r3
 8004276:	bf08      	it	eq
 8004278:	68ec      	ldreq	r4, [r5, #12]
 800427a:	e7ca      	b.n	8004212 <__swbuf_r+0x1a>
 800427c:	4621      	mov	r1, r4
 800427e:	4628      	mov	r0, r5
 8004280:	f000 f80c 	bl	800429c <__swsetup_r>
 8004284:	2800      	cmp	r0, #0
 8004286:	d0cb      	beq.n	8004220 <__swbuf_r+0x28>
 8004288:	f04f 37ff 	mov.w	r7, #4294967295
 800428c:	e7ea      	b.n	8004264 <__swbuf_r+0x6c>
 800428e:	bf00      	nop
 8004290:	08005190 	.word	0x08005190
 8004294:	080051b0 	.word	0x080051b0
 8004298:	08005170 	.word	0x08005170

0800429c <__swsetup_r>:
 800429c:	4b32      	ldr	r3, [pc, #200]	; (8004368 <__swsetup_r+0xcc>)
 800429e:	b570      	push	{r4, r5, r6, lr}
 80042a0:	681d      	ldr	r5, [r3, #0]
 80042a2:	4606      	mov	r6, r0
 80042a4:	460c      	mov	r4, r1
 80042a6:	b125      	cbz	r5, 80042b2 <__swsetup_r+0x16>
 80042a8:	69ab      	ldr	r3, [r5, #24]
 80042aa:	b913      	cbnz	r3, 80042b2 <__swsetup_r+0x16>
 80042ac:	4628      	mov	r0, r5
 80042ae:	f000 f97d 	bl	80045ac <__sinit>
 80042b2:	4b2e      	ldr	r3, [pc, #184]	; (800436c <__swsetup_r+0xd0>)
 80042b4:	429c      	cmp	r4, r3
 80042b6:	d10f      	bne.n	80042d8 <__swsetup_r+0x3c>
 80042b8:	686c      	ldr	r4, [r5, #4]
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042c0:	0719      	lsls	r1, r3, #28
 80042c2:	d42c      	bmi.n	800431e <__swsetup_r+0x82>
 80042c4:	06dd      	lsls	r5, r3, #27
 80042c6:	d411      	bmi.n	80042ec <__swsetup_r+0x50>
 80042c8:	2309      	movs	r3, #9
 80042ca:	6033      	str	r3, [r6, #0]
 80042cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042d0:	81a3      	strh	r3, [r4, #12]
 80042d2:	f04f 30ff 	mov.w	r0, #4294967295
 80042d6:	e03e      	b.n	8004356 <__swsetup_r+0xba>
 80042d8:	4b25      	ldr	r3, [pc, #148]	; (8004370 <__swsetup_r+0xd4>)
 80042da:	429c      	cmp	r4, r3
 80042dc:	d101      	bne.n	80042e2 <__swsetup_r+0x46>
 80042de:	68ac      	ldr	r4, [r5, #8]
 80042e0:	e7eb      	b.n	80042ba <__swsetup_r+0x1e>
 80042e2:	4b24      	ldr	r3, [pc, #144]	; (8004374 <__swsetup_r+0xd8>)
 80042e4:	429c      	cmp	r4, r3
 80042e6:	bf08      	it	eq
 80042e8:	68ec      	ldreq	r4, [r5, #12]
 80042ea:	e7e6      	b.n	80042ba <__swsetup_r+0x1e>
 80042ec:	0758      	lsls	r0, r3, #29
 80042ee:	d512      	bpl.n	8004316 <__swsetup_r+0x7a>
 80042f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042f2:	b141      	cbz	r1, 8004306 <__swsetup_r+0x6a>
 80042f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042f8:	4299      	cmp	r1, r3
 80042fa:	d002      	beq.n	8004302 <__swsetup_r+0x66>
 80042fc:	4630      	mov	r0, r6
 80042fe:	f000 fa59 	bl	80047b4 <_free_r>
 8004302:	2300      	movs	r3, #0
 8004304:	6363      	str	r3, [r4, #52]	; 0x34
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800430c:	81a3      	strh	r3, [r4, #12]
 800430e:	2300      	movs	r3, #0
 8004310:	6063      	str	r3, [r4, #4]
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	f043 0308 	orr.w	r3, r3, #8
 800431c:	81a3      	strh	r3, [r4, #12]
 800431e:	6923      	ldr	r3, [r4, #16]
 8004320:	b94b      	cbnz	r3, 8004336 <__swsetup_r+0x9a>
 8004322:	89a3      	ldrh	r3, [r4, #12]
 8004324:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432c:	d003      	beq.n	8004336 <__swsetup_r+0x9a>
 800432e:	4621      	mov	r1, r4
 8004330:	4630      	mov	r0, r6
 8004332:	f000 f9ff 	bl	8004734 <__smakebuf_r>
 8004336:	89a0      	ldrh	r0, [r4, #12]
 8004338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800433c:	f010 0301 	ands.w	r3, r0, #1
 8004340:	d00a      	beq.n	8004358 <__swsetup_r+0xbc>
 8004342:	2300      	movs	r3, #0
 8004344:	60a3      	str	r3, [r4, #8]
 8004346:	6963      	ldr	r3, [r4, #20]
 8004348:	425b      	negs	r3, r3
 800434a:	61a3      	str	r3, [r4, #24]
 800434c:	6923      	ldr	r3, [r4, #16]
 800434e:	b943      	cbnz	r3, 8004362 <__swsetup_r+0xc6>
 8004350:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004354:	d1ba      	bne.n	80042cc <__swsetup_r+0x30>
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	0781      	lsls	r1, r0, #30
 800435a:	bf58      	it	pl
 800435c:	6963      	ldrpl	r3, [r4, #20]
 800435e:	60a3      	str	r3, [r4, #8]
 8004360:	e7f4      	b.n	800434c <__swsetup_r+0xb0>
 8004362:	2000      	movs	r0, #0
 8004364:	e7f7      	b.n	8004356 <__swsetup_r+0xba>
 8004366:	bf00      	nop
 8004368:	2000000c 	.word	0x2000000c
 800436c:	08005190 	.word	0x08005190
 8004370:	080051b0 	.word	0x080051b0
 8004374:	08005170 	.word	0x08005170

08004378 <__sflush_r>:
 8004378:	898a      	ldrh	r2, [r1, #12]
 800437a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800437e:	4605      	mov	r5, r0
 8004380:	0710      	lsls	r0, r2, #28
 8004382:	460c      	mov	r4, r1
 8004384:	d458      	bmi.n	8004438 <__sflush_r+0xc0>
 8004386:	684b      	ldr	r3, [r1, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	dc05      	bgt.n	8004398 <__sflush_r+0x20>
 800438c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	dc02      	bgt.n	8004398 <__sflush_r+0x20>
 8004392:	2000      	movs	r0, #0
 8004394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800439a:	2e00      	cmp	r6, #0
 800439c:	d0f9      	beq.n	8004392 <__sflush_r+0x1a>
 800439e:	2300      	movs	r3, #0
 80043a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043a4:	682f      	ldr	r7, [r5, #0]
 80043a6:	602b      	str	r3, [r5, #0]
 80043a8:	d032      	beq.n	8004410 <__sflush_r+0x98>
 80043aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	075a      	lsls	r2, r3, #29
 80043b0:	d505      	bpl.n	80043be <__sflush_r+0x46>
 80043b2:	6863      	ldr	r3, [r4, #4]
 80043b4:	1ac0      	subs	r0, r0, r3
 80043b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043b8:	b10b      	cbz	r3, 80043be <__sflush_r+0x46>
 80043ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043bc:	1ac0      	subs	r0, r0, r3
 80043be:	2300      	movs	r3, #0
 80043c0:	4602      	mov	r2, r0
 80043c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043c4:	6a21      	ldr	r1, [r4, #32]
 80043c6:	4628      	mov	r0, r5
 80043c8:	47b0      	blx	r6
 80043ca:	1c43      	adds	r3, r0, #1
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	d106      	bne.n	80043de <__sflush_r+0x66>
 80043d0:	6829      	ldr	r1, [r5, #0]
 80043d2:	291d      	cmp	r1, #29
 80043d4:	d82c      	bhi.n	8004430 <__sflush_r+0xb8>
 80043d6:	4a2a      	ldr	r2, [pc, #168]	; (8004480 <__sflush_r+0x108>)
 80043d8:	40ca      	lsrs	r2, r1
 80043da:	07d6      	lsls	r6, r2, #31
 80043dc:	d528      	bpl.n	8004430 <__sflush_r+0xb8>
 80043de:	2200      	movs	r2, #0
 80043e0:	6062      	str	r2, [r4, #4]
 80043e2:	04d9      	lsls	r1, r3, #19
 80043e4:	6922      	ldr	r2, [r4, #16]
 80043e6:	6022      	str	r2, [r4, #0]
 80043e8:	d504      	bpl.n	80043f4 <__sflush_r+0x7c>
 80043ea:	1c42      	adds	r2, r0, #1
 80043ec:	d101      	bne.n	80043f2 <__sflush_r+0x7a>
 80043ee:	682b      	ldr	r3, [r5, #0]
 80043f0:	b903      	cbnz	r3, 80043f4 <__sflush_r+0x7c>
 80043f2:	6560      	str	r0, [r4, #84]	; 0x54
 80043f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043f6:	602f      	str	r7, [r5, #0]
 80043f8:	2900      	cmp	r1, #0
 80043fa:	d0ca      	beq.n	8004392 <__sflush_r+0x1a>
 80043fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004400:	4299      	cmp	r1, r3
 8004402:	d002      	beq.n	800440a <__sflush_r+0x92>
 8004404:	4628      	mov	r0, r5
 8004406:	f000 f9d5 	bl	80047b4 <_free_r>
 800440a:	2000      	movs	r0, #0
 800440c:	6360      	str	r0, [r4, #52]	; 0x34
 800440e:	e7c1      	b.n	8004394 <__sflush_r+0x1c>
 8004410:	6a21      	ldr	r1, [r4, #32]
 8004412:	2301      	movs	r3, #1
 8004414:	4628      	mov	r0, r5
 8004416:	47b0      	blx	r6
 8004418:	1c41      	adds	r1, r0, #1
 800441a:	d1c7      	bne.n	80043ac <__sflush_r+0x34>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0c4      	beq.n	80043ac <__sflush_r+0x34>
 8004422:	2b1d      	cmp	r3, #29
 8004424:	d001      	beq.n	800442a <__sflush_r+0xb2>
 8004426:	2b16      	cmp	r3, #22
 8004428:	d101      	bne.n	800442e <__sflush_r+0xb6>
 800442a:	602f      	str	r7, [r5, #0]
 800442c:	e7b1      	b.n	8004392 <__sflush_r+0x1a>
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	e7ad      	b.n	8004394 <__sflush_r+0x1c>
 8004438:	690f      	ldr	r7, [r1, #16]
 800443a:	2f00      	cmp	r7, #0
 800443c:	d0a9      	beq.n	8004392 <__sflush_r+0x1a>
 800443e:	0793      	lsls	r3, r2, #30
 8004440:	680e      	ldr	r6, [r1, #0]
 8004442:	bf08      	it	eq
 8004444:	694b      	ldreq	r3, [r1, #20]
 8004446:	600f      	str	r7, [r1, #0]
 8004448:	bf18      	it	ne
 800444a:	2300      	movne	r3, #0
 800444c:	eba6 0807 	sub.w	r8, r6, r7
 8004450:	608b      	str	r3, [r1, #8]
 8004452:	f1b8 0f00 	cmp.w	r8, #0
 8004456:	dd9c      	ble.n	8004392 <__sflush_r+0x1a>
 8004458:	6a21      	ldr	r1, [r4, #32]
 800445a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800445c:	4643      	mov	r3, r8
 800445e:	463a      	mov	r2, r7
 8004460:	4628      	mov	r0, r5
 8004462:	47b0      	blx	r6
 8004464:	2800      	cmp	r0, #0
 8004466:	dc06      	bgt.n	8004476 <__sflush_r+0xfe>
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800446e:	81a3      	strh	r3, [r4, #12]
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	e78e      	b.n	8004394 <__sflush_r+0x1c>
 8004476:	4407      	add	r7, r0
 8004478:	eba8 0800 	sub.w	r8, r8, r0
 800447c:	e7e9      	b.n	8004452 <__sflush_r+0xda>
 800447e:	bf00      	nop
 8004480:	20400001 	.word	0x20400001

08004484 <_fflush_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	690b      	ldr	r3, [r1, #16]
 8004488:	4605      	mov	r5, r0
 800448a:	460c      	mov	r4, r1
 800448c:	b913      	cbnz	r3, 8004494 <_fflush_r+0x10>
 800448e:	2500      	movs	r5, #0
 8004490:	4628      	mov	r0, r5
 8004492:	bd38      	pop	{r3, r4, r5, pc}
 8004494:	b118      	cbz	r0, 800449e <_fflush_r+0x1a>
 8004496:	6983      	ldr	r3, [r0, #24]
 8004498:	b90b      	cbnz	r3, 800449e <_fflush_r+0x1a>
 800449a:	f000 f887 	bl	80045ac <__sinit>
 800449e:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <_fflush_r+0x6c>)
 80044a0:	429c      	cmp	r4, r3
 80044a2:	d11b      	bne.n	80044dc <_fflush_r+0x58>
 80044a4:	686c      	ldr	r4, [r5, #4]
 80044a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0ef      	beq.n	800448e <_fflush_r+0xa>
 80044ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044b0:	07d0      	lsls	r0, r2, #31
 80044b2:	d404      	bmi.n	80044be <_fflush_r+0x3a>
 80044b4:	0599      	lsls	r1, r3, #22
 80044b6:	d402      	bmi.n	80044be <_fflush_r+0x3a>
 80044b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ba:	f000 f915 	bl	80046e8 <__retarget_lock_acquire_recursive>
 80044be:	4628      	mov	r0, r5
 80044c0:	4621      	mov	r1, r4
 80044c2:	f7ff ff59 	bl	8004378 <__sflush_r>
 80044c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044c8:	07da      	lsls	r2, r3, #31
 80044ca:	4605      	mov	r5, r0
 80044cc:	d4e0      	bmi.n	8004490 <_fflush_r+0xc>
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	059b      	lsls	r3, r3, #22
 80044d2:	d4dd      	bmi.n	8004490 <_fflush_r+0xc>
 80044d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044d6:	f000 f908 	bl	80046ea <__retarget_lock_release_recursive>
 80044da:	e7d9      	b.n	8004490 <_fflush_r+0xc>
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <_fflush_r+0x70>)
 80044de:	429c      	cmp	r4, r3
 80044e0:	d101      	bne.n	80044e6 <_fflush_r+0x62>
 80044e2:	68ac      	ldr	r4, [r5, #8]
 80044e4:	e7df      	b.n	80044a6 <_fflush_r+0x22>
 80044e6:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <_fflush_r+0x74>)
 80044e8:	429c      	cmp	r4, r3
 80044ea:	bf08      	it	eq
 80044ec:	68ec      	ldreq	r4, [r5, #12]
 80044ee:	e7da      	b.n	80044a6 <_fflush_r+0x22>
 80044f0:	08005190 	.word	0x08005190
 80044f4:	080051b0 	.word	0x080051b0
 80044f8:	08005170 	.word	0x08005170

080044fc <std>:
 80044fc:	2300      	movs	r3, #0
 80044fe:	b510      	push	{r4, lr}
 8004500:	4604      	mov	r4, r0
 8004502:	e9c0 3300 	strd	r3, r3, [r0]
 8004506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800450a:	6083      	str	r3, [r0, #8]
 800450c:	8181      	strh	r1, [r0, #12]
 800450e:	6643      	str	r3, [r0, #100]	; 0x64
 8004510:	81c2      	strh	r2, [r0, #14]
 8004512:	6183      	str	r3, [r0, #24]
 8004514:	4619      	mov	r1, r3
 8004516:	2208      	movs	r2, #8
 8004518:	305c      	adds	r0, #92	; 0x5c
 800451a:	f7ff fdd7 	bl	80040cc <memset>
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <std+0x38>)
 8004520:	6263      	str	r3, [r4, #36]	; 0x24
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <std+0x3c>)
 8004524:	62a3      	str	r3, [r4, #40]	; 0x28
 8004526:	4b05      	ldr	r3, [pc, #20]	; (800453c <std+0x40>)
 8004528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <std+0x44>)
 800452c:	6224      	str	r4, [r4, #32]
 800452e:	6323      	str	r3, [r4, #48]	; 0x30
 8004530:	bd10      	pop	{r4, pc}
 8004532:	bf00      	nop
 8004534:	08004f05 	.word	0x08004f05
 8004538:	08004f27 	.word	0x08004f27
 800453c:	08004f5f 	.word	0x08004f5f
 8004540:	08004f83 	.word	0x08004f83

08004544 <_cleanup_r>:
 8004544:	4901      	ldr	r1, [pc, #4]	; (800454c <_cleanup_r+0x8>)
 8004546:	f000 b8af 	b.w	80046a8 <_fwalk_reent>
 800454a:	bf00      	nop
 800454c:	08004485 	.word	0x08004485

08004550 <__sfmoreglue>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	1e4a      	subs	r2, r1, #1
 8004554:	2568      	movs	r5, #104	; 0x68
 8004556:	4355      	muls	r5, r2
 8004558:	460e      	mov	r6, r1
 800455a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800455e:	f000 f979 	bl	8004854 <_malloc_r>
 8004562:	4604      	mov	r4, r0
 8004564:	b140      	cbz	r0, 8004578 <__sfmoreglue+0x28>
 8004566:	2100      	movs	r1, #0
 8004568:	e9c0 1600 	strd	r1, r6, [r0]
 800456c:	300c      	adds	r0, #12
 800456e:	60a0      	str	r0, [r4, #8]
 8004570:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004574:	f7ff fdaa 	bl	80040cc <memset>
 8004578:	4620      	mov	r0, r4
 800457a:	bd70      	pop	{r4, r5, r6, pc}

0800457c <__sfp_lock_acquire>:
 800457c:	4801      	ldr	r0, [pc, #4]	; (8004584 <__sfp_lock_acquire+0x8>)
 800457e:	f000 b8b3 	b.w	80046e8 <__retarget_lock_acquire_recursive>
 8004582:	bf00      	nop
 8004584:	20000594 	.word	0x20000594

08004588 <__sfp_lock_release>:
 8004588:	4801      	ldr	r0, [pc, #4]	; (8004590 <__sfp_lock_release+0x8>)
 800458a:	f000 b8ae 	b.w	80046ea <__retarget_lock_release_recursive>
 800458e:	bf00      	nop
 8004590:	20000594 	.word	0x20000594

08004594 <__sinit_lock_acquire>:
 8004594:	4801      	ldr	r0, [pc, #4]	; (800459c <__sinit_lock_acquire+0x8>)
 8004596:	f000 b8a7 	b.w	80046e8 <__retarget_lock_acquire_recursive>
 800459a:	bf00      	nop
 800459c:	2000058f 	.word	0x2000058f

080045a0 <__sinit_lock_release>:
 80045a0:	4801      	ldr	r0, [pc, #4]	; (80045a8 <__sinit_lock_release+0x8>)
 80045a2:	f000 b8a2 	b.w	80046ea <__retarget_lock_release_recursive>
 80045a6:	bf00      	nop
 80045a8:	2000058f 	.word	0x2000058f

080045ac <__sinit>:
 80045ac:	b510      	push	{r4, lr}
 80045ae:	4604      	mov	r4, r0
 80045b0:	f7ff fff0 	bl	8004594 <__sinit_lock_acquire>
 80045b4:	69a3      	ldr	r3, [r4, #24]
 80045b6:	b11b      	cbz	r3, 80045c0 <__sinit+0x14>
 80045b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045bc:	f7ff bff0 	b.w	80045a0 <__sinit_lock_release>
 80045c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045c4:	6523      	str	r3, [r4, #80]	; 0x50
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <__sinit+0x68>)
 80045c8:	4a13      	ldr	r2, [pc, #76]	; (8004618 <__sinit+0x6c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80045ce:	42a3      	cmp	r3, r4
 80045d0:	bf04      	itt	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	61a3      	streq	r3, [r4, #24]
 80045d6:	4620      	mov	r0, r4
 80045d8:	f000 f820 	bl	800461c <__sfp>
 80045dc:	6060      	str	r0, [r4, #4]
 80045de:	4620      	mov	r0, r4
 80045e0:	f000 f81c 	bl	800461c <__sfp>
 80045e4:	60a0      	str	r0, [r4, #8]
 80045e6:	4620      	mov	r0, r4
 80045e8:	f000 f818 	bl	800461c <__sfp>
 80045ec:	2200      	movs	r2, #0
 80045ee:	60e0      	str	r0, [r4, #12]
 80045f0:	2104      	movs	r1, #4
 80045f2:	6860      	ldr	r0, [r4, #4]
 80045f4:	f7ff ff82 	bl	80044fc <std>
 80045f8:	68a0      	ldr	r0, [r4, #8]
 80045fa:	2201      	movs	r2, #1
 80045fc:	2109      	movs	r1, #9
 80045fe:	f7ff ff7d 	bl	80044fc <std>
 8004602:	68e0      	ldr	r0, [r4, #12]
 8004604:	2202      	movs	r2, #2
 8004606:	2112      	movs	r1, #18
 8004608:	f7ff ff78 	bl	80044fc <std>
 800460c:	2301      	movs	r3, #1
 800460e:	61a3      	str	r3, [r4, #24]
 8004610:	e7d2      	b.n	80045b8 <__sinit+0xc>
 8004612:	bf00      	nop
 8004614:	0800516c 	.word	0x0800516c
 8004618:	08004545 	.word	0x08004545

0800461c <__sfp>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	4607      	mov	r7, r0
 8004620:	f7ff ffac 	bl	800457c <__sfp_lock_acquire>
 8004624:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <__sfp+0x84>)
 8004626:	681e      	ldr	r6, [r3, #0]
 8004628:	69b3      	ldr	r3, [r6, #24]
 800462a:	b913      	cbnz	r3, 8004632 <__sfp+0x16>
 800462c:	4630      	mov	r0, r6
 800462e:	f7ff ffbd 	bl	80045ac <__sinit>
 8004632:	3648      	adds	r6, #72	; 0x48
 8004634:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004638:	3b01      	subs	r3, #1
 800463a:	d503      	bpl.n	8004644 <__sfp+0x28>
 800463c:	6833      	ldr	r3, [r6, #0]
 800463e:	b30b      	cbz	r3, 8004684 <__sfp+0x68>
 8004640:	6836      	ldr	r6, [r6, #0]
 8004642:	e7f7      	b.n	8004634 <__sfp+0x18>
 8004644:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004648:	b9d5      	cbnz	r5, 8004680 <__sfp+0x64>
 800464a:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <__sfp+0x88>)
 800464c:	60e3      	str	r3, [r4, #12]
 800464e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004652:	6665      	str	r5, [r4, #100]	; 0x64
 8004654:	f000 f847 	bl	80046e6 <__retarget_lock_init_recursive>
 8004658:	f7ff ff96 	bl	8004588 <__sfp_lock_release>
 800465c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004660:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004664:	6025      	str	r5, [r4, #0]
 8004666:	61a5      	str	r5, [r4, #24]
 8004668:	2208      	movs	r2, #8
 800466a:	4629      	mov	r1, r5
 800466c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004670:	f7ff fd2c 	bl	80040cc <memset>
 8004674:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004678:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800467c:	4620      	mov	r0, r4
 800467e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004680:	3468      	adds	r4, #104	; 0x68
 8004682:	e7d9      	b.n	8004638 <__sfp+0x1c>
 8004684:	2104      	movs	r1, #4
 8004686:	4638      	mov	r0, r7
 8004688:	f7ff ff62 	bl	8004550 <__sfmoreglue>
 800468c:	4604      	mov	r4, r0
 800468e:	6030      	str	r0, [r6, #0]
 8004690:	2800      	cmp	r0, #0
 8004692:	d1d5      	bne.n	8004640 <__sfp+0x24>
 8004694:	f7ff ff78 	bl	8004588 <__sfp_lock_release>
 8004698:	230c      	movs	r3, #12
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	e7ee      	b.n	800467c <__sfp+0x60>
 800469e:	bf00      	nop
 80046a0:	0800516c 	.word	0x0800516c
 80046a4:	ffff0001 	.word	0xffff0001

080046a8 <_fwalk_reent>:
 80046a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046ac:	4606      	mov	r6, r0
 80046ae:	4688      	mov	r8, r1
 80046b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046b4:	2700      	movs	r7, #0
 80046b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046ba:	f1b9 0901 	subs.w	r9, r9, #1
 80046be:	d505      	bpl.n	80046cc <_fwalk_reent+0x24>
 80046c0:	6824      	ldr	r4, [r4, #0]
 80046c2:	2c00      	cmp	r4, #0
 80046c4:	d1f7      	bne.n	80046b6 <_fwalk_reent+0xe>
 80046c6:	4638      	mov	r0, r7
 80046c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046cc:	89ab      	ldrh	r3, [r5, #12]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d907      	bls.n	80046e2 <_fwalk_reent+0x3a>
 80046d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046d6:	3301      	adds	r3, #1
 80046d8:	d003      	beq.n	80046e2 <_fwalk_reent+0x3a>
 80046da:	4629      	mov	r1, r5
 80046dc:	4630      	mov	r0, r6
 80046de:	47c0      	blx	r8
 80046e0:	4307      	orrs	r7, r0
 80046e2:	3568      	adds	r5, #104	; 0x68
 80046e4:	e7e9      	b.n	80046ba <_fwalk_reent+0x12>

080046e6 <__retarget_lock_init_recursive>:
 80046e6:	4770      	bx	lr

080046e8 <__retarget_lock_acquire_recursive>:
 80046e8:	4770      	bx	lr

080046ea <__retarget_lock_release_recursive>:
 80046ea:	4770      	bx	lr

080046ec <__swhatbuf_r>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	460e      	mov	r6, r1
 80046f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f4:	2900      	cmp	r1, #0
 80046f6:	b096      	sub	sp, #88	; 0x58
 80046f8:	4614      	mov	r4, r2
 80046fa:	461d      	mov	r5, r3
 80046fc:	da07      	bge.n	800470e <__swhatbuf_r+0x22>
 80046fe:	2300      	movs	r3, #0
 8004700:	602b      	str	r3, [r5, #0]
 8004702:	89b3      	ldrh	r3, [r6, #12]
 8004704:	061a      	lsls	r2, r3, #24
 8004706:	d410      	bmi.n	800472a <__swhatbuf_r+0x3e>
 8004708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800470c:	e00e      	b.n	800472c <__swhatbuf_r+0x40>
 800470e:	466a      	mov	r2, sp
 8004710:	f000 fc5e 	bl	8004fd0 <_fstat_r>
 8004714:	2800      	cmp	r0, #0
 8004716:	dbf2      	blt.n	80046fe <__swhatbuf_r+0x12>
 8004718:	9a01      	ldr	r2, [sp, #4]
 800471a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800471e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004722:	425a      	negs	r2, r3
 8004724:	415a      	adcs	r2, r3
 8004726:	602a      	str	r2, [r5, #0]
 8004728:	e7ee      	b.n	8004708 <__swhatbuf_r+0x1c>
 800472a:	2340      	movs	r3, #64	; 0x40
 800472c:	2000      	movs	r0, #0
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	b016      	add	sp, #88	; 0x58
 8004732:	bd70      	pop	{r4, r5, r6, pc}

08004734 <__smakebuf_r>:
 8004734:	898b      	ldrh	r3, [r1, #12]
 8004736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004738:	079d      	lsls	r5, r3, #30
 800473a:	4606      	mov	r6, r0
 800473c:	460c      	mov	r4, r1
 800473e:	d507      	bpl.n	8004750 <__smakebuf_r+0x1c>
 8004740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	6123      	str	r3, [r4, #16]
 8004748:	2301      	movs	r3, #1
 800474a:	6163      	str	r3, [r4, #20]
 800474c:	b002      	add	sp, #8
 800474e:	bd70      	pop	{r4, r5, r6, pc}
 8004750:	ab01      	add	r3, sp, #4
 8004752:	466a      	mov	r2, sp
 8004754:	f7ff ffca 	bl	80046ec <__swhatbuf_r>
 8004758:	9900      	ldr	r1, [sp, #0]
 800475a:	4605      	mov	r5, r0
 800475c:	4630      	mov	r0, r6
 800475e:	f000 f879 	bl	8004854 <_malloc_r>
 8004762:	b948      	cbnz	r0, 8004778 <__smakebuf_r+0x44>
 8004764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004768:	059a      	lsls	r2, r3, #22
 800476a:	d4ef      	bmi.n	800474c <__smakebuf_r+0x18>
 800476c:	f023 0303 	bic.w	r3, r3, #3
 8004770:	f043 0302 	orr.w	r3, r3, #2
 8004774:	81a3      	strh	r3, [r4, #12]
 8004776:	e7e3      	b.n	8004740 <__smakebuf_r+0xc>
 8004778:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <__smakebuf_r+0x7c>)
 800477a:	62b3      	str	r3, [r6, #40]	; 0x28
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	6020      	str	r0, [r4, #0]
 8004780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004784:	81a3      	strh	r3, [r4, #12]
 8004786:	9b00      	ldr	r3, [sp, #0]
 8004788:	6163      	str	r3, [r4, #20]
 800478a:	9b01      	ldr	r3, [sp, #4]
 800478c:	6120      	str	r0, [r4, #16]
 800478e:	b15b      	cbz	r3, 80047a8 <__smakebuf_r+0x74>
 8004790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004794:	4630      	mov	r0, r6
 8004796:	f000 fc2d 	bl	8004ff4 <_isatty_r>
 800479a:	b128      	cbz	r0, 80047a8 <__smakebuf_r+0x74>
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	f023 0303 	bic.w	r3, r3, #3
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	81a3      	strh	r3, [r4, #12]
 80047a8:	89a0      	ldrh	r0, [r4, #12]
 80047aa:	4305      	orrs	r5, r0
 80047ac:	81a5      	strh	r5, [r4, #12]
 80047ae:	e7cd      	b.n	800474c <__smakebuf_r+0x18>
 80047b0:	08004545 	.word	0x08004545

080047b4 <_free_r>:
 80047b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047b6:	2900      	cmp	r1, #0
 80047b8:	d048      	beq.n	800484c <_free_r+0x98>
 80047ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047be:	9001      	str	r0, [sp, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f1a1 0404 	sub.w	r4, r1, #4
 80047c6:	bfb8      	it	lt
 80047c8:	18e4      	addlt	r4, r4, r3
 80047ca:	f000 fc35 	bl	8005038 <__malloc_lock>
 80047ce:	4a20      	ldr	r2, [pc, #128]	; (8004850 <_free_r+0x9c>)
 80047d0:	9801      	ldr	r0, [sp, #4]
 80047d2:	6813      	ldr	r3, [r2, #0]
 80047d4:	4615      	mov	r5, r2
 80047d6:	b933      	cbnz	r3, 80047e6 <_free_r+0x32>
 80047d8:	6063      	str	r3, [r4, #4]
 80047da:	6014      	str	r4, [r2, #0]
 80047dc:	b003      	add	sp, #12
 80047de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047e2:	f000 bc2f 	b.w	8005044 <__malloc_unlock>
 80047e6:	42a3      	cmp	r3, r4
 80047e8:	d90b      	bls.n	8004802 <_free_r+0x4e>
 80047ea:	6821      	ldr	r1, [r4, #0]
 80047ec:	1862      	adds	r2, r4, r1
 80047ee:	4293      	cmp	r3, r2
 80047f0:	bf04      	itt	eq
 80047f2:	681a      	ldreq	r2, [r3, #0]
 80047f4:	685b      	ldreq	r3, [r3, #4]
 80047f6:	6063      	str	r3, [r4, #4]
 80047f8:	bf04      	itt	eq
 80047fa:	1852      	addeq	r2, r2, r1
 80047fc:	6022      	streq	r2, [r4, #0]
 80047fe:	602c      	str	r4, [r5, #0]
 8004800:	e7ec      	b.n	80047dc <_free_r+0x28>
 8004802:	461a      	mov	r2, r3
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	b10b      	cbz	r3, 800480c <_free_r+0x58>
 8004808:	42a3      	cmp	r3, r4
 800480a:	d9fa      	bls.n	8004802 <_free_r+0x4e>
 800480c:	6811      	ldr	r1, [r2, #0]
 800480e:	1855      	adds	r5, r2, r1
 8004810:	42a5      	cmp	r5, r4
 8004812:	d10b      	bne.n	800482c <_free_r+0x78>
 8004814:	6824      	ldr	r4, [r4, #0]
 8004816:	4421      	add	r1, r4
 8004818:	1854      	adds	r4, r2, r1
 800481a:	42a3      	cmp	r3, r4
 800481c:	6011      	str	r1, [r2, #0]
 800481e:	d1dd      	bne.n	80047dc <_free_r+0x28>
 8004820:	681c      	ldr	r4, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	6053      	str	r3, [r2, #4]
 8004826:	4421      	add	r1, r4
 8004828:	6011      	str	r1, [r2, #0]
 800482a:	e7d7      	b.n	80047dc <_free_r+0x28>
 800482c:	d902      	bls.n	8004834 <_free_r+0x80>
 800482e:	230c      	movs	r3, #12
 8004830:	6003      	str	r3, [r0, #0]
 8004832:	e7d3      	b.n	80047dc <_free_r+0x28>
 8004834:	6825      	ldr	r5, [r4, #0]
 8004836:	1961      	adds	r1, r4, r5
 8004838:	428b      	cmp	r3, r1
 800483a:	bf04      	itt	eq
 800483c:	6819      	ldreq	r1, [r3, #0]
 800483e:	685b      	ldreq	r3, [r3, #4]
 8004840:	6063      	str	r3, [r4, #4]
 8004842:	bf04      	itt	eq
 8004844:	1949      	addeq	r1, r1, r5
 8004846:	6021      	streq	r1, [r4, #0]
 8004848:	6054      	str	r4, [r2, #4]
 800484a:	e7c7      	b.n	80047dc <_free_r+0x28>
 800484c:	b003      	add	sp, #12
 800484e:	bd30      	pop	{r4, r5, pc}
 8004850:	200000a4 	.word	0x200000a4

08004854 <_malloc_r>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	1ccd      	adds	r5, r1, #3
 8004858:	f025 0503 	bic.w	r5, r5, #3
 800485c:	3508      	adds	r5, #8
 800485e:	2d0c      	cmp	r5, #12
 8004860:	bf38      	it	cc
 8004862:	250c      	movcc	r5, #12
 8004864:	2d00      	cmp	r5, #0
 8004866:	4606      	mov	r6, r0
 8004868:	db01      	blt.n	800486e <_malloc_r+0x1a>
 800486a:	42a9      	cmp	r1, r5
 800486c:	d903      	bls.n	8004876 <_malloc_r+0x22>
 800486e:	230c      	movs	r3, #12
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	2000      	movs	r0, #0
 8004874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004876:	f000 fbdf 	bl	8005038 <__malloc_lock>
 800487a:	4921      	ldr	r1, [pc, #132]	; (8004900 <_malloc_r+0xac>)
 800487c:	680a      	ldr	r2, [r1, #0]
 800487e:	4614      	mov	r4, r2
 8004880:	b99c      	cbnz	r4, 80048aa <_malloc_r+0x56>
 8004882:	4f20      	ldr	r7, [pc, #128]	; (8004904 <_malloc_r+0xb0>)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	b923      	cbnz	r3, 8004892 <_malloc_r+0x3e>
 8004888:	4621      	mov	r1, r4
 800488a:	4630      	mov	r0, r6
 800488c:	f000 fb2a 	bl	8004ee4 <_sbrk_r>
 8004890:	6038      	str	r0, [r7, #0]
 8004892:	4629      	mov	r1, r5
 8004894:	4630      	mov	r0, r6
 8004896:	f000 fb25 	bl	8004ee4 <_sbrk_r>
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	d123      	bne.n	80048e6 <_malloc_r+0x92>
 800489e:	230c      	movs	r3, #12
 80048a0:	6033      	str	r3, [r6, #0]
 80048a2:	4630      	mov	r0, r6
 80048a4:	f000 fbce 	bl	8005044 <__malloc_unlock>
 80048a8:	e7e3      	b.n	8004872 <_malloc_r+0x1e>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	1b5b      	subs	r3, r3, r5
 80048ae:	d417      	bmi.n	80048e0 <_malloc_r+0x8c>
 80048b0:	2b0b      	cmp	r3, #11
 80048b2:	d903      	bls.n	80048bc <_malloc_r+0x68>
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	441c      	add	r4, r3
 80048b8:	6025      	str	r5, [r4, #0]
 80048ba:	e004      	b.n	80048c6 <_malloc_r+0x72>
 80048bc:	6863      	ldr	r3, [r4, #4]
 80048be:	42a2      	cmp	r2, r4
 80048c0:	bf0c      	ite	eq
 80048c2:	600b      	streq	r3, [r1, #0]
 80048c4:	6053      	strne	r3, [r2, #4]
 80048c6:	4630      	mov	r0, r6
 80048c8:	f000 fbbc 	bl	8005044 <__malloc_unlock>
 80048cc:	f104 000b 	add.w	r0, r4, #11
 80048d0:	1d23      	adds	r3, r4, #4
 80048d2:	f020 0007 	bic.w	r0, r0, #7
 80048d6:	1ac2      	subs	r2, r0, r3
 80048d8:	d0cc      	beq.n	8004874 <_malloc_r+0x20>
 80048da:	1a1b      	subs	r3, r3, r0
 80048dc:	50a3      	str	r3, [r4, r2]
 80048de:	e7c9      	b.n	8004874 <_malloc_r+0x20>
 80048e0:	4622      	mov	r2, r4
 80048e2:	6864      	ldr	r4, [r4, #4]
 80048e4:	e7cc      	b.n	8004880 <_malloc_r+0x2c>
 80048e6:	1cc4      	adds	r4, r0, #3
 80048e8:	f024 0403 	bic.w	r4, r4, #3
 80048ec:	42a0      	cmp	r0, r4
 80048ee:	d0e3      	beq.n	80048b8 <_malloc_r+0x64>
 80048f0:	1a21      	subs	r1, r4, r0
 80048f2:	4630      	mov	r0, r6
 80048f4:	f000 faf6 	bl	8004ee4 <_sbrk_r>
 80048f8:	3001      	adds	r0, #1
 80048fa:	d1dd      	bne.n	80048b8 <_malloc_r+0x64>
 80048fc:	e7cf      	b.n	800489e <_malloc_r+0x4a>
 80048fe:	bf00      	nop
 8004900:	200000a4 	.word	0x200000a4
 8004904:	200000a8 	.word	0x200000a8

08004908 <__sfputc_r>:
 8004908:	6893      	ldr	r3, [r2, #8]
 800490a:	3b01      	subs	r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	b410      	push	{r4}
 8004910:	6093      	str	r3, [r2, #8]
 8004912:	da08      	bge.n	8004926 <__sfputc_r+0x1e>
 8004914:	6994      	ldr	r4, [r2, #24]
 8004916:	42a3      	cmp	r3, r4
 8004918:	db01      	blt.n	800491e <__sfputc_r+0x16>
 800491a:	290a      	cmp	r1, #10
 800491c:	d103      	bne.n	8004926 <__sfputc_r+0x1e>
 800491e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004922:	f7ff bc69 	b.w	80041f8 <__swbuf_r>
 8004926:	6813      	ldr	r3, [r2, #0]
 8004928:	1c58      	adds	r0, r3, #1
 800492a:	6010      	str	r0, [r2, #0]
 800492c:	7019      	strb	r1, [r3, #0]
 800492e:	4608      	mov	r0, r1
 8004930:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004934:	4770      	bx	lr

08004936 <__sfputs_r>:
 8004936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004938:	4606      	mov	r6, r0
 800493a:	460f      	mov	r7, r1
 800493c:	4614      	mov	r4, r2
 800493e:	18d5      	adds	r5, r2, r3
 8004940:	42ac      	cmp	r4, r5
 8004942:	d101      	bne.n	8004948 <__sfputs_r+0x12>
 8004944:	2000      	movs	r0, #0
 8004946:	e007      	b.n	8004958 <__sfputs_r+0x22>
 8004948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800494c:	463a      	mov	r2, r7
 800494e:	4630      	mov	r0, r6
 8004950:	f7ff ffda 	bl	8004908 <__sfputc_r>
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	d1f3      	bne.n	8004940 <__sfputs_r+0xa>
 8004958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800495c <_vfiprintf_r>:
 800495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004960:	460d      	mov	r5, r1
 8004962:	b09d      	sub	sp, #116	; 0x74
 8004964:	4614      	mov	r4, r2
 8004966:	4698      	mov	r8, r3
 8004968:	4606      	mov	r6, r0
 800496a:	b118      	cbz	r0, 8004974 <_vfiprintf_r+0x18>
 800496c:	6983      	ldr	r3, [r0, #24]
 800496e:	b90b      	cbnz	r3, 8004974 <_vfiprintf_r+0x18>
 8004970:	f7ff fe1c 	bl	80045ac <__sinit>
 8004974:	4b89      	ldr	r3, [pc, #548]	; (8004b9c <_vfiprintf_r+0x240>)
 8004976:	429d      	cmp	r5, r3
 8004978:	d11b      	bne.n	80049b2 <_vfiprintf_r+0x56>
 800497a:	6875      	ldr	r5, [r6, #4]
 800497c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800497e:	07d9      	lsls	r1, r3, #31
 8004980:	d405      	bmi.n	800498e <_vfiprintf_r+0x32>
 8004982:	89ab      	ldrh	r3, [r5, #12]
 8004984:	059a      	lsls	r2, r3, #22
 8004986:	d402      	bmi.n	800498e <_vfiprintf_r+0x32>
 8004988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800498a:	f7ff fead 	bl	80046e8 <__retarget_lock_acquire_recursive>
 800498e:	89ab      	ldrh	r3, [r5, #12]
 8004990:	071b      	lsls	r3, r3, #28
 8004992:	d501      	bpl.n	8004998 <_vfiprintf_r+0x3c>
 8004994:	692b      	ldr	r3, [r5, #16]
 8004996:	b9eb      	cbnz	r3, 80049d4 <_vfiprintf_r+0x78>
 8004998:	4629      	mov	r1, r5
 800499a:	4630      	mov	r0, r6
 800499c:	f7ff fc7e 	bl	800429c <__swsetup_r>
 80049a0:	b1c0      	cbz	r0, 80049d4 <_vfiprintf_r+0x78>
 80049a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049a4:	07dc      	lsls	r4, r3, #31
 80049a6:	d50e      	bpl.n	80049c6 <_vfiprintf_r+0x6a>
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ac:	b01d      	add	sp, #116	; 0x74
 80049ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b2:	4b7b      	ldr	r3, [pc, #492]	; (8004ba0 <_vfiprintf_r+0x244>)
 80049b4:	429d      	cmp	r5, r3
 80049b6:	d101      	bne.n	80049bc <_vfiprintf_r+0x60>
 80049b8:	68b5      	ldr	r5, [r6, #8]
 80049ba:	e7df      	b.n	800497c <_vfiprintf_r+0x20>
 80049bc:	4b79      	ldr	r3, [pc, #484]	; (8004ba4 <_vfiprintf_r+0x248>)
 80049be:	429d      	cmp	r5, r3
 80049c0:	bf08      	it	eq
 80049c2:	68f5      	ldreq	r5, [r6, #12]
 80049c4:	e7da      	b.n	800497c <_vfiprintf_r+0x20>
 80049c6:	89ab      	ldrh	r3, [r5, #12]
 80049c8:	0598      	lsls	r0, r3, #22
 80049ca:	d4ed      	bmi.n	80049a8 <_vfiprintf_r+0x4c>
 80049cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049ce:	f7ff fe8c 	bl	80046ea <__retarget_lock_release_recursive>
 80049d2:	e7e9      	b.n	80049a8 <_vfiprintf_r+0x4c>
 80049d4:	2300      	movs	r3, #0
 80049d6:	9309      	str	r3, [sp, #36]	; 0x24
 80049d8:	2320      	movs	r3, #32
 80049da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049de:	f8cd 800c 	str.w	r8, [sp, #12]
 80049e2:	2330      	movs	r3, #48	; 0x30
 80049e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ba8 <_vfiprintf_r+0x24c>
 80049e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049ec:	f04f 0901 	mov.w	r9, #1
 80049f0:	4623      	mov	r3, r4
 80049f2:	469a      	mov	sl, r3
 80049f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f8:	b10a      	cbz	r2, 80049fe <_vfiprintf_r+0xa2>
 80049fa:	2a25      	cmp	r2, #37	; 0x25
 80049fc:	d1f9      	bne.n	80049f2 <_vfiprintf_r+0x96>
 80049fe:	ebba 0b04 	subs.w	fp, sl, r4
 8004a02:	d00b      	beq.n	8004a1c <_vfiprintf_r+0xc0>
 8004a04:	465b      	mov	r3, fp
 8004a06:	4622      	mov	r2, r4
 8004a08:	4629      	mov	r1, r5
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f7ff ff93 	bl	8004936 <__sfputs_r>
 8004a10:	3001      	adds	r0, #1
 8004a12:	f000 80aa 	beq.w	8004b6a <_vfiprintf_r+0x20e>
 8004a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a18:	445a      	add	r2, fp
 8004a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80a2 	beq.w	8004b6a <_vfiprintf_r+0x20e>
 8004a26:	2300      	movs	r3, #0
 8004a28:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a30:	f10a 0a01 	add.w	sl, sl, #1
 8004a34:	9304      	str	r3, [sp, #16]
 8004a36:	9307      	str	r3, [sp, #28]
 8004a38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a3c:	931a      	str	r3, [sp, #104]	; 0x68
 8004a3e:	4654      	mov	r4, sl
 8004a40:	2205      	movs	r2, #5
 8004a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a46:	4858      	ldr	r0, [pc, #352]	; (8004ba8 <_vfiprintf_r+0x24c>)
 8004a48:	f7fb fbd2 	bl	80001f0 <memchr>
 8004a4c:	9a04      	ldr	r2, [sp, #16]
 8004a4e:	b9d8      	cbnz	r0, 8004a88 <_vfiprintf_r+0x12c>
 8004a50:	06d1      	lsls	r1, r2, #27
 8004a52:	bf44      	itt	mi
 8004a54:	2320      	movmi	r3, #32
 8004a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a5a:	0713      	lsls	r3, r2, #28
 8004a5c:	bf44      	itt	mi
 8004a5e:	232b      	movmi	r3, #43	; 0x2b
 8004a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a64:	f89a 3000 	ldrb.w	r3, [sl]
 8004a68:	2b2a      	cmp	r3, #42	; 0x2a
 8004a6a:	d015      	beq.n	8004a98 <_vfiprintf_r+0x13c>
 8004a6c:	9a07      	ldr	r2, [sp, #28]
 8004a6e:	4654      	mov	r4, sl
 8004a70:	2000      	movs	r0, #0
 8004a72:	f04f 0c0a 	mov.w	ip, #10
 8004a76:	4621      	mov	r1, r4
 8004a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a7c:	3b30      	subs	r3, #48	; 0x30
 8004a7e:	2b09      	cmp	r3, #9
 8004a80:	d94e      	bls.n	8004b20 <_vfiprintf_r+0x1c4>
 8004a82:	b1b0      	cbz	r0, 8004ab2 <_vfiprintf_r+0x156>
 8004a84:	9207      	str	r2, [sp, #28]
 8004a86:	e014      	b.n	8004ab2 <_vfiprintf_r+0x156>
 8004a88:	eba0 0308 	sub.w	r3, r0, r8
 8004a8c:	fa09 f303 	lsl.w	r3, r9, r3
 8004a90:	4313      	orrs	r3, r2
 8004a92:	9304      	str	r3, [sp, #16]
 8004a94:	46a2      	mov	sl, r4
 8004a96:	e7d2      	b.n	8004a3e <_vfiprintf_r+0xe2>
 8004a98:	9b03      	ldr	r3, [sp, #12]
 8004a9a:	1d19      	adds	r1, r3, #4
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	9103      	str	r1, [sp, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bfbb      	ittet	lt
 8004aa4:	425b      	neglt	r3, r3
 8004aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8004aaa:	9307      	strge	r3, [sp, #28]
 8004aac:	9307      	strlt	r3, [sp, #28]
 8004aae:	bfb8      	it	lt
 8004ab0:	9204      	strlt	r2, [sp, #16]
 8004ab2:	7823      	ldrb	r3, [r4, #0]
 8004ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ab6:	d10c      	bne.n	8004ad2 <_vfiprintf_r+0x176>
 8004ab8:	7863      	ldrb	r3, [r4, #1]
 8004aba:	2b2a      	cmp	r3, #42	; 0x2a
 8004abc:	d135      	bne.n	8004b2a <_vfiprintf_r+0x1ce>
 8004abe:	9b03      	ldr	r3, [sp, #12]
 8004ac0:	1d1a      	adds	r2, r3, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	9203      	str	r2, [sp, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bfb8      	it	lt
 8004aca:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ace:	3402      	adds	r4, #2
 8004ad0:	9305      	str	r3, [sp, #20]
 8004ad2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004bb8 <_vfiprintf_r+0x25c>
 8004ad6:	7821      	ldrb	r1, [r4, #0]
 8004ad8:	2203      	movs	r2, #3
 8004ada:	4650      	mov	r0, sl
 8004adc:	f7fb fb88 	bl	80001f0 <memchr>
 8004ae0:	b140      	cbz	r0, 8004af4 <_vfiprintf_r+0x198>
 8004ae2:	2340      	movs	r3, #64	; 0x40
 8004ae4:	eba0 000a 	sub.w	r0, r0, sl
 8004ae8:	fa03 f000 	lsl.w	r0, r3, r0
 8004aec:	9b04      	ldr	r3, [sp, #16]
 8004aee:	4303      	orrs	r3, r0
 8004af0:	3401      	adds	r4, #1
 8004af2:	9304      	str	r3, [sp, #16]
 8004af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af8:	482c      	ldr	r0, [pc, #176]	; (8004bac <_vfiprintf_r+0x250>)
 8004afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004afe:	2206      	movs	r2, #6
 8004b00:	f7fb fb76 	bl	80001f0 <memchr>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d03f      	beq.n	8004b88 <_vfiprintf_r+0x22c>
 8004b08:	4b29      	ldr	r3, [pc, #164]	; (8004bb0 <_vfiprintf_r+0x254>)
 8004b0a:	bb1b      	cbnz	r3, 8004b54 <_vfiprintf_r+0x1f8>
 8004b0c:	9b03      	ldr	r3, [sp, #12]
 8004b0e:	3307      	adds	r3, #7
 8004b10:	f023 0307 	bic.w	r3, r3, #7
 8004b14:	3308      	adds	r3, #8
 8004b16:	9303      	str	r3, [sp, #12]
 8004b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1a:	443b      	add	r3, r7
 8004b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b1e:	e767      	b.n	80049f0 <_vfiprintf_r+0x94>
 8004b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b24:	460c      	mov	r4, r1
 8004b26:	2001      	movs	r0, #1
 8004b28:	e7a5      	b.n	8004a76 <_vfiprintf_r+0x11a>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	3401      	adds	r4, #1
 8004b2e:	9305      	str	r3, [sp, #20]
 8004b30:	4619      	mov	r1, r3
 8004b32:	f04f 0c0a 	mov.w	ip, #10
 8004b36:	4620      	mov	r0, r4
 8004b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b3c:	3a30      	subs	r2, #48	; 0x30
 8004b3e:	2a09      	cmp	r2, #9
 8004b40:	d903      	bls.n	8004b4a <_vfiprintf_r+0x1ee>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0c5      	beq.n	8004ad2 <_vfiprintf_r+0x176>
 8004b46:	9105      	str	r1, [sp, #20]
 8004b48:	e7c3      	b.n	8004ad2 <_vfiprintf_r+0x176>
 8004b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b4e:	4604      	mov	r4, r0
 8004b50:	2301      	movs	r3, #1
 8004b52:	e7f0      	b.n	8004b36 <_vfiprintf_r+0x1da>
 8004b54:	ab03      	add	r3, sp, #12
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	462a      	mov	r2, r5
 8004b5a:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <_vfiprintf_r+0x258>)
 8004b5c:	a904      	add	r1, sp, #16
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f3af 8000 	nop.w
 8004b64:	4607      	mov	r7, r0
 8004b66:	1c78      	adds	r0, r7, #1
 8004b68:	d1d6      	bne.n	8004b18 <_vfiprintf_r+0x1bc>
 8004b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b6c:	07d9      	lsls	r1, r3, #31
 8004b6e:	d405      	bmi.n	8004b7c <_vfiprintf_r+0x220>
 8004b70:	89ab      	ldrh	r3, [r5, #12]
 8004b72:	059a      	lsls	r2, r3, #22
 8004b74:	d402      	bmi.n	8004b7c <_vfiprintf_r+0x220>
 8004b76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b78:	f7ff fdb7 	bl	80046ea <__retarget_lock_release_recursive>
 8004b7c:	89ab      	ldrh	r3, [r5, #12]
 8004b7e:	065b      	lsls	r3, r3, #25
 8004b80:	f53f af12 	bmi.w	80049a8 <_vfiprintf_r+0x4c>
 8004b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b86:	e711      	b.n	80049ac <_vfiprintf_r+0x50>
 8004b88:	ab03      	add	r3, sp, #12
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	462a      	mov	r2, r5
 8004b8e:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <_vfiprintf_r+0x258>)
 8004b90:	a904      	add	r1, sp, #16
 8004b92:	4630      	mov	r0, r6
 8004b94:	f000 f880 	bl	8004c98 <_printf_i>
 8004b98:	e7e4      	b.n	8004b64 <_vfiprintf_r+0x208>
 8004b9a:	bf00      	nop
 8004b9c:	08005190 	.word	0x08005190
 8004ba0:	080051b0 	.word	0x080051b0
 8004ba4:	08005170 	.word	0x08005170
 8004ba8:	080051d0 	.word	0x080051d0
 8004bac:	080051da 	.word	0x080051da
 8004bb0:	00000000 	.word	0x00000000
 8004bb4:	08004937 	.word	0x08004937
 8004bb8:	080051d6 	.word	0x080051d6

08004bbc <_printf_common>:
 8004bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc0:	4616      	mov	r6, r2
 8004bc2:	4699      	mov	r9, r3
 8004bc4:	688a      	ldr	r2, [r1, #8]
 8004bc6:	690b      	ldr	r3, [r1, #16]
 8004bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	bfb8      	it	lt
 8004bd0:	4613      	movlt	r3, r2
 8004bd2:	6033      	str	r3, [r6, #0]
 8004bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bd8:	4607      	mov	r7, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	b10a      	cbz	r2, 8004be2 <_printf_common+0x26>
 8004bde:	3301      	adds	r3, #1
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	0699      	lsls	r1, r3, #26
 8004be6:	bf42      	ittt	mi
 8004be8:	6833      	ldrmi	r3, [r6, #0]
 8004bea:	3302      	addmi	r3, #2
 8004bec:	6033      	strmi	r3, [r6, #0]
 8004bee:	6825      	ldr	r5, [r4, #0]
 8004bf0:	f015 0506 	ands.w	r5, r5, #6
 8004bf4:	d106      	bne.n	8004c04 <_printf_common+0x48>
 8004bf6:	f104 0a19 	add.w	sl, r4, #25
 8004bfa:	68e3      	ldr	r3, [r4, #12]
 8004bfc:	6832      	ldr	r2, [r6, #0]
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	42ab      	cmp	r3, r5
 8004c02:	dc26      	bgt.n	8004c52 <_printf_common+0x96>
 8004c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c08:	1e13      	subs	r3, r2, #0
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	bf18      	it	ne
 8004c0e:	2301      	movne	r3, #1
 8004c10:	0692      	lsls	r2, r2, #26
 8004c12:	d42b      	bmi.n	8004c6c <_printf_common+0xb0>
 8004c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c18:	4649      	mov	r1, r9
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	47c0      	blx	r8
 8004c1e:	3001      	adds	r0, #1
 8004c20:	d01e      	beq.n	8004c60 <_printf_common+0xa4>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	68e5      	ldr	r5, [r4, #12]
 8004c26:	6832      	ldr	r2, [r6, #0]
 8004c28:	f003 0306 	and.w	r3, r3, #6
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	bf08      	it	eq
 8004c30:	1aad      	subeq	r5, r5, r2
 8004c32:	68a3      	ldr	r3, [r4, #8]
 8004c34:	6922      	ldr	r2, [r4, #16]
 8004c36:	bf0c      	ite	eq
 8004c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c3c:	2500      	movne	r5, #0
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	bfc4      	itt	gt
 8004c42:	1a9b      	subgt	r3, r3, r2
 8004c44:	18ed      	addgt	r5, r5, r3
 8004c46:	2600      	movs	r6, #0
 8004c48:	341a      	adds	r4, #26
 8004c4a:	42b5      	cmp	r5, r6
 8004c4c:	d11a      	bne.n	8004c84 <_printf_common+0xc8>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e008      	b.n	8004c64 <_printf_common+0xa8>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4652      	mov	r2, sl
 8004c56:	4649      	mov	r1, r9
 8004c58:	4638      	mov	r0, r7
 8004c5a:	47c0      	blx	r8
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d103      	bne.n	8004c68 <_printf_common+0xac>
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c68:	3501      	adds	r5, #1
 8004c6a:	e7c6      	b.n	8004bfa <_printf_common+0x3e>
 8004c6c:	18e1      	adds	r1, r4, r3
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	2030      	movs	r0, #48	; 0x30
 8004c72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c76:	4422      	add	r2, r4
 8004c78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c80:	3302      	adds	r3, #2
 8004c82:	e7c7      	b.n	8004c14 <_printf_common+0x58>
 8004c84:	2301      	movs	r3, #1
 8004c86:	4622      	mov	r2, r4
 8004c88:	4649      	mov	r1, r9
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	47c0      	blx	r8
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d0e6      	beq.n	8004c60 <_printf_common+0xa4>
 8004c92:	3601      	adds	r6, #1
 8004c94:	e7d9      	b.n	8004c4a <_printf_common+0x8e>
	...

08004c98 <_printf_i>:
 8004c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	4691      	mov	r9, r2
 8004ca0:	7e27      	ldrb	r7, [r4, #24]
 8004ca2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ca4:	2f78      	cmp	r7, #120	; 0x78
 8004ca6:	4680      	mov	r8, r0
 8004ca8:	469a      	mov	sl, r3
 8004caa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cae:	d807      	bhi.n	8004cc0 <_printf_i+0x28>
 8004cb0:	2f62      	cmp	r7, #98	; 0x62
 8004cb2:	d80a      	bhi.n	8004cca <_printf_i+0x32>
 8004cb4:	2f00      	cmp	r7, #0
 8004cb6:	f000 80d8 	beq.w	8004e6a <_printf_i+0x1d2>
 8004cba:	2f58      	cmp	r7, #88	; 0x58
 8004cbc:	f000 80a3 	beq.w	8004e06 <_printf_i+0x16e>
 8004cc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cc8:	e03a      	b.n	8004d40 <_printf_i+0xa8>
 8004cca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cce:	2b15      	cmp	r3, #21
 8004cd0:	d8f6      	bhi.n	8004cc0 <_printf_i+0x28>
 8004cd2:	a001      	add	r0, pc, #4	; (adr r0, 8004cd8 <_printf_i+0x40>)
 8004cd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004cd8:	08004d31 	.word	0x08004d31
 8004cdc:	08004d45 	.word	0x08004d45
 8004ce0:	08004cc1 	.word	0x08004cc1
 8004ce4:	08004cc1 	.word	0x08004cc1
 8004ce8:	08004cc1 	.word	0x08004cc1
 8004cec:	08004cc1 	.word	0x08004cc1
 8004cf0:	08004d45 	.word	0x08004d45
 8004cf4:	08004cc1 	.word	0x08004cc1
 8004cf8:	08004cc1 	.word	0x08004cc1
 8004cfc:	08004cc1 	.word	0x08004cc1
 8004d00:	08004cc1 	.word	0x08004cc1
 8004d04:	08004e51 	.word	0x08004e51
 8004d08:	08004d75 	.word	0x08004d75
 8004d0c:	08004e33 	.word	0x08004e33
 8004d10:	08004cc1 	.word	0x08004cc1
 8004d14:	08004cc1 	.word	0x08004cc1
 8004d18:	08004e73 	.word	0x08004e73
 8004d1c:	08004cc1 	.word	0x08004cc1
 8004d20:	08004d75 	.word	0x08004d75
 8004d24:	08004cc1 	.word	0x08004cc1
 8004d28:	08004cc1 	.word	0x08004cc1
 8004d2c:	08004e3b 	.word	0x08004e3b
 8004d30:	680b      	ldr	r3, [r1, #0]
 8004d32:	1d1a      	adds	r2, r3, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	600a      	str	r2, [r1, #0]
 8004d38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0a3      	b.n	8004e8c <_printf_i+0x1f4>
 8004d44:	6825      	ldr	r5, [r4, #0]
 8004d46:	6808      	ldr	r0, [r1, #0]
 8004d48:	062e      	lsls	r6, r5, #24
 8004d4a:	f100 0304 	add.w	r3, r0, #4
 8004d4e:	d50a      	bpl.n	8004d66 <_printf_i+0xce>
 8004d50:	6805      	ldr	r5, [r0, #0]
 8004d52:	600b      	str	r3, [r1, #0]
 8004d54:	2d00      	cmp	r5, #0
 8004d56:	da03      	bge.n	8004d60 <_printf_i+0xc8>
 8004d58:	232d      	movs	r3, #45	; 0x2d
 8004d5a:	426d      	negs	r5, r5
 8004d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d60:	485e      	ldr	r0, [pc, #376]	; (8004edc <_printf_i+0x244>)
 8004d62:	230a      	movs	r3, #10
 8004d64:	e019      	b.n	8004d9a <_printf_i+0x102>
 8004d66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d6a:	6805      	ldr	r5, [r0, #0]
 8004d6c:	600b      	str	r3, [r1, #0]
 8004d6e:	bf18      	it	ne
 8004d70:	b22d      	sxthne	r5, r5
 8004d72:	e7ef      	b.n	8004d54 <_printf_i+0xbc>
 8004d74:	680b      	ldr	r3, [r1, #0]
 8004d76:	6825      	ldr	r5, [r4, #0]
 8004d78:	1d18      	adds	r0, r3, #4
 8004d7a:	6008      	str	r0, [r1, #0]
 8004d7c:	0628      	lsls	r0, r5, #24
 8004d7e:	d501      	bpl.n	8004d84 <_printf_i+0xec>
 8004d80:	681d      	ldr	r5, [r3, #0]
 8004d82:	e002      	b.n	8004d8a <_printf_i+0xf2>
 8004d84:	0669      	lsls	r1, r5, #25
 8004d86:	d5fb      	bpl.n	8004d80 <_printf_i+0xe8>
 8004d88:	881d      	ldrh	r5, [r3, #0]
 8004d8a:	4854      	ldr	r0, [pc, #336]	; (8004edc <_printf_i+0x244>)
 8004d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d8e:	bf0c      	ite	eq
 8004d90:	2308      	moveq	r3, #8
 8004d92:	230a      	movne	r3, #10
 8004d94:	2100      	movs	r1, #0
 8004d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d9a:	6866      	ldr	r6, [r4, #4]
 8004d9c:	60a6      	str	r6, [r4, #8]
 8004d9e:	2e00      	cmp	r6, #0
 8004da0:	bfa2      	ittt	ge
 8004da2:	6821      	ldrge	r1, [r4, #0]
 8004da4:	f021 0104 	bicge.w	r1, r1, #4
 8004da8:	6021      	strge	r1, [r4, #0]
 8004daa:	b90d      	cbnz	r5, 8004db0 <_printf_i+0x118>
 8004dac:	2e00      	cmp	r6, #0
 8004dae:	d04d      	beq.n	8004e4c <_printf_i+0x1b4>
 8004db0:	4616      	mov	r6, r2
 8004db2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004db6:	fb03 5711 	mls	r7, r3, r1, r5
 8004dba:	5dc7      	ldrb	r7, [r0, r7]
 8004dbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dc0:	462f      	mov	r7, r5
 8004dc2:	42bb      	cmp	r3, r7
 8004dc4:	460d      	mov	r5, r1
 8004dc6:	d9f4      	bls.n	8004db2 <_printf_i+0x11a>
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d10b      	bne.n	8004de4 <_printf_i+0x14c>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	07df      	lsls	r7, r3, #31
 8004dd0:	d508      	bpl.n	8004de4 <_printf_i+0x14c>
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	6861      	ldr	r1, [r4, #4]
 8004dd6:	4299      	cmp	r1, r3
 8004dd8:	bfde      	ittt	le
 8004dda:	2330      	movle	r3, #48	; 0x30
 8004ddc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004de0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004de4:	1b92      	subs	r2, r2, r6
 8004de6:	6122      	str	r2, [r4, #16]
 8004de8:	f8cd a000 	str.w	sl, [sp]
 8004dec:	464b      	mov	r3, r9
 8004dee:	aa03      	add	r2, sp, #12
 8004df0:	4621      	mov	r1, r4
 8004df2:	4640      	mov	r0, r8
 8004df4:	f7ff fee2 	bl	8004bbc <_printf_common>
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d14c      	bne.n	8004e96 <_printf_i+0x1fe>
 8004dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004e00:	b004      	add	sp, #16
 8004e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e06:	4835      	ldr	r0, [pc, #212]	; (8004edc <_printf_i+0x244>)
 8004e08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	680e      	ldr	r6, [r1, #0]
 8004e10:	061f      	lsls	r7, r3, #24
 8004e12:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e16:	600e      	str	r6, [r1, #0]
 8004e18:	d514      	bpl.n	8004e44 <_printf_i+0x1ac>
 8004e1a:	07d9      	lsls	r1, r3, #31
 8004e1c:	bf44      	itt	mi
 8004e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e22:	6023      	strmi	r3, [r4, #0]
 8004e24:	b91d      	cbnz	r5, 8004e2e <_printf_i+0x196>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	f023 0320 	bic.w	r3, r3, #32
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	2310      	movs	r3, #16
 8004e30:	e7b0      	b.n	8004d94 <_printf_i+0xfc>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	f043 0320 	orr.w	r3, r3, #32
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	2378      	movs	r3, #120	; 0x78
 8004e3c:	4828      	ldr	r0, [pc, #160]	; (8004ee0 <_printf_i+0x248>)
 8004e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e42:	e7e3      	b.n	8004e0c <_printf_i+0x174>
 8004e44:	065e      	lsls	r6, r3, #25
 8004e46:	bf48      	it	mi
 8004e48:	b2ad      	uxthmi	r5, r5
 8004e4a:	e7e6      	b.n	8004e1a <_printf_i+0x182>
 8004e4c:	4616      	mov	r6, r2
 8004e4e:	e7bb      	b.n	8004dc8 <_printf_i+0x130>
 8004e50:	680b      	ldr	r3, [r1, #0]
 8004e52:	6826      	ldr	r6, [r4, #0]
 8004e54:	6960      	ldr	r0, [r4, #20]
 8004e56:	1d1d      	adds	r5, r3, #4
 8004e58:	600d      	str	r5, [r1, #0]
 8004e5a:	0635      	lsls	r5, r6, #24
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	d501      	bpl.n	8004e64 <_printf_i+0x1cc>
 8004e60:	6018      	str	r0, [r3, #0]
 8004e62:	e002      	b.n	8004e6a <_printf_i+0x1d2>
 8004e64:	0671      	lsls	r1, r6, #25
 8004e66:	d5fb      	bpl.n	8004e60 <_printf_i+0x1c8>
 8004e68:	8018      	strh	r0, [r3, #0]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	6123      	str	r3, [r4, #16]
 8004e6e:	4616      	mov	r6, r2
 8004e70:	e7ba      	b.n	8004de8 <_printf_i+0x150>
 8004e72:	680b      	ldr	r3, [r1, #0]
 8004e74:	1d1a      	adds	r2, r3, #4
 8004e76:	600a      	str	r2, [r1, #0]
 8004e78:	681e      	ldr	r6, [r3, #0]
 8004e7a:	6862      	ldr	r2, [r4, #4]
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f7fb f9b6 	bl	80001f0 <memchr>
 8004e84:	b108      	cbz	r0, 8004e8a <_printf_i+0x1f2>
 8004e86:	1b80      	subs	r0, r0, r6
 8004e88:	6060      	str	r0, [r4, #4]
 8004e8a:	6863      	ldr	r3, [r4, #4]
 8004e8c:	6123      	str	r3, [r4, #16]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e94:	e7a8      	b.n	8004de8 <_printf_i+0x150>
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	4632      	mov	r2, r6
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	4640      	mov	r0, r8
 8004e9e:	47d0      	blx	sl
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d0ab      	beq.n	8004dfc <_printf_i+0x164>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	079b      	lsls	r3, r3, #30
 8004ea8:	d413      	bmi.n	8004ed2 <_printf_i+0x23a>
 8004eaa:	68e0      	ldr	r0, [r4, #12]
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	4298      	cmp	r0, r3
 8004eb0:	bfb8      	it	lt
 8004eb2:	4618      	movlt	r0, r3
 8004eb4:	e7a4      	b.n	8004e00 <_printf_i+0x168>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	4632      	mov	r2, r6
 8004eba:	4649      	mov	r1, r9
 8004ebc:	4640      	mov	r0, r8
 8004ebe:	47d0      	blx	sl
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d09b      	beq.n	8004dfc <_printf_i+0x164>
 8004ec4:	3501      	adds	r5, #1
 8004ec6:	68e3      	ldr	r3, [r4, #12]
 8004ec8:	9903      	ldr	r1, [sp, #12]
 8004eca:	1a5b      	subs	r3, r3, r1
 8004ecc:	42ab      	cmp	r3, r5
 8004ece:	dcf2      	bgt.n	8004eb6 <_printf_i+0x21e>
 8004ed0:	e7eb      	b.n	8004eaa <_printf_i+0x212>
 8004ed2:	2500      	movs	r5, #0
 8004ed4:	f104 0619 	add.w	r6, r4, #25
 8004ed8:	e7f5      	b.n	8004ec6 <_printf_i+0x22e>
 8004eda:	bf00      	nop
 8004edc:	080051e1 	.word	0x080051e1
 8004ee0:	080051f2 	.word	0x080051f2

08004ee4 <_sbrk_r>:
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	4d06      	ldr	r5, [pc, #24]	; (8004f00 <_sbrk_r+0x1c>)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4604      	mov	r4, r0
 8004eec:	4608      	mov	r0, r1
 8004eee:	602b      	str	r3, [r5, #0]
 8004ef0:	f7fc f956 	bl	80011a0 <_sbrk>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	d102      	bne.n	8004efe <_sbrk_r+0x1a>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	b103      	cbz	r3, 8004efe <_sbrk_r+0x1a>
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
 8004f00:	20000598 	.word	0x20000598

08004f04 <__sread>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	460c      	mov	r4, r1
 8004f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0c:	f000 f8a0 	bl	8005050 <_read_r>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	bfab      	itete	ge
 8004f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f16:	89a3      	ldrhlt	r3, [r4, #12]
 8004f18:	181b      	addge	r3, r3, r0
 8004f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f1e:	bfac      	ite	ge
 8004f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f22:	81a3      	strhlt	r3, [r4, #12]
 8004f24:	bd10      	pop	{r4, pc}

08004f26 <__swrite>:
 8004f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2a:	461f      	mov	r7, r3
 8004f2c:	898b      	ldrh	r3, [r1, #12]
 8004f2e:	05db      	lsls	r3, r3, #23
 8004f30:	4605      	mov	r5, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	4616      	mov	r6, r2
 8004f36:	d505      	bpl.n	8004f44 <__swrite+0x1e>
 8004f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f000 f868 	bl	8005014 <_lseek_r>
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f4e:	81a3      	strh	r3, [r4, #12]
 8004f50:	4632      	mov	r2, r6
 8004f52:	463b      	mov	r3, r7
 8004f54:	4628      	mov	r0, r5
 8004f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5a:	f000 b817 	b.w	8004f8c <_write_r>

08004f5e <__sseek>:
 8004f5e:	b510      	push	{r4, lr}
 8004f60:	460c      	mov	r4, r1
 8004f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f66:	f000 f855 	bl	8005014 <_lseek_r>
 8004f6a:	1c43      	adds	r3, r0, #1
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	bf15      	itete	ne
 8004f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f7a:	81a3      	strheq	r3, [r4, #12]
 8004f7c:	bf18      	it	ne
 8004f7e:	81a3      	strhne	r3, [r4, #12]
 8004f80:	bd10      	pop	{r4, pc}

08004f82 <__sclose>:
 8004f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f86:	f000 b813 	b.w	8004fb0 <_close_r>
	...

08004f8c <_write_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4d07      	ldr	r5, [pc, #28]	; (8004fac <_write_r+0x20>)
 8004f90:	4604      	mov	r4, r0
 8004f92:	4608      	mov	r0, r1
 8004f94:	4611      	mov	r1, r2
 8004f96:	2200      	movs	r2, #0
 8004f98:	602a      	str	r2, [r5, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f7fc f8af 	bl	80010fe <_write>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_write_r+0x1e>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_write_r+0x1e>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	20000598 	.word	0x20000598

08004fb0 <_close_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4d06      	ldr	r5, [pc, #24]	; (8004fcc <_close_r+0x1c>)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	602b      	str	r3, [r5, #0]
 8004fbc:	f7fc f8bb 	bl	8001136 <_close>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_close_r+0x1a>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_close_r+0x1a>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	20000598 	.word	0x20000598

08004fd0 <_fstat_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	4d07      	ldr	r5, [pc, #28]	; (8004ff0 <_fstat_r+0x20>)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	4608      	mov	r0, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	f7fc f8b6 	bl	800114e <_fstat>
 8004fe2:	1c43      	adds	r3, r0, #1
 8004fe4:	d102      	bne.n	8004fec <_fstat_r+0x1c>
 8004fe6:	682b      	ldr	r3, [r5, #0]
 8004fe8:	b103      	cbz	r3, 8004fec <_fstat_r+0x1c>
 8004fea:	6023      	str	r3, [r4, #0]
 8004fec:	bd38      	pop	{r3, r4, r5, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000598 	.word	0x20000598

08004ff4 <_isatty_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4d06      	ldr	r5, [pc, #24]	; (8005010 <_isatty_r+0x1c>)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	602b      	str	r3, [r5, #0]
 8005000:	f7fc f8b5 	bl	800116e <_isatty>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d102      	bne.n	800500e <_isatty_r+0x1a>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	b103      	cbz	r3, 800500e <_isatty_r+0x1a>
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	20000598 	.word	0x20000598

08005014 <_lseek_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4d07      	ldr	r5, [pc, #28]	; (8005034 <_lseek_r+0x20>)
 8005018:	4604      	mov	r4, r0
 800501a:	4608      	mov	r0, r1
 800501c:	4611      	mov	r1, r2
 800501e:	2200      	movs	r2, #0
 8005020:	602a      	str	r2, [r5, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	f7fc f8ae 	bl	8001184 <_lseek>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	d102      	bne.n	8005032 <_lseek_r+0x1e>
 800502c:	682b      	ldr	r3, [r5, #0]
 800502e:	b103      	cbz	r3, 8005032 <_lseek_r+0x1e>
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	bd38      	pop	{r3, r4, r5, pc}
 8005034:	20000598 	.word	0x20000598

08005038 <__malloc_lock>:
 8005038:	4801      	ldr	r0, [pc, #4]	; (8005040 <__malloc_lock+0x8>)
 800503a:	f7ff bb55 	b.w	80046e8 <__retarget_lock_acquire_recursive>
 800503e:	bf00      	nop
 8005040:	20000590 	.word	0x20000590

08005044 <__malloc_unlock>:
 8005044:	4801      	ldr	r0, [pc, #4]	; (800504c <__malloc_unlock+0x8>)
 8005046:	f7ff bb50 	b.w	80046ea <__retarget_lock_release_recursive>
 800504a:	bf00      	nop
 800504c:	20000590 	.word	0x20000590

08005050 <_read_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4d07      	ldr	r5, [pc, #28]	; (8005070 <_read_r+0x20>)
 8005054:	4604      	mov	r4, r0
 8005056:	4608      	mov	r0, r1
 8005058:	4611      	mov	r1, r2
 800505a:	2200      	movs	r2, #0
 800505c:	602a      	str	r2, [r5, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	f7fc f830 	bl	80010c4 <_read>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d102      	bne.n	800506e <_read_r+0x1e>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	b103      	cbz	r3, 800506e <_read_r+0x1e>
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	bd38      	pop	{r3, r4, r5, pc}
 8005070:	20000598 	.word	0x20000598

08005074 <_init>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr

08005080 <_fini>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr
