
cv09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008498  08008498  00018498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d0  080086d0  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  080086d0  080086d0  000186d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086d8  080086d8  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086dc  080086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080086e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00000954  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ab8  20000ab8  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ee4  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df4  00000000  00000000  00035078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  00037e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc0  00000000  00000000  00038b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002587e  00000000  00000000  000396f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010991  00000000  00000000  0005ef76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5fa6  00000000  00000000  0006f907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001458ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037f4  00000000  00000000  00145900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000164 	.word	0x20000164
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800847c 	.word	0x0800847c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000168 	.word	0x20000168
 80001ec:	0800847c 	.word	0x0800847c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b96e 	b.w	8000e80 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8083 	bne.w	8000cd2 <__udivmoddi4+0x116>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4617      	mov	r7, r2
 8000bd0:	d947      	bls.n	8000c62 <__udivmoddi4+0xa6>
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	b142      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	f1c2 0020 	rsb	r0, r2, #32
 8000bdc:	fa24 f000 	lsr.w	r0, r4, r0
 8000be0:	4091      	lsls	r1, r2
 8000be2:	4097      	lsls	r7, r2
 8000be4:	ea40 0c01 	orr.w	ip, r0, r1
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf4:	fa1f fe87 	uxth.w	lr, r7
 8000bf8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c00:	fb06 f10e 	mul.w	r1, r6, lr
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0e:	f080 8119 	bcs.w	8000e44 <__udivmoddi4+0x288>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8116 	bls.w	8000e44 <__udivmoddi4+0x288>
 8000c18:	3e02      	subs	r6, #2
 8000c1a:	443b      	add	r3, r7
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c24:	fb08 3310 	mls	r3, r8, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	193c      	adds	r4, r7, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	f080 8105 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c3e:	45a6      	cmp	lr, r4
 8000c40:	f240 8102 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c44:	3802      	subs	r0, #2
 8000c46:	443c      	add	r4, r7
 8000c48:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	2600      	movs	r6, #0
 8000c52:	b11d      	cbz	r5, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c5 4300 	strd	r4, r3, [r5]
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	b902      	cbnz	r2, 8000c66 <__udivmoddi4+0xaa>
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	fab2 f282 	clz	r2, r2
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	d150      	bne.n	8000d10 <__udivmoddi4+0x154>
 8000c6e:	1bcb      	subs	r3, r1, r7
 8000c70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c74:	fa1f f887 	uxth.w	r8, r7
 8000c78:	2601      	movs	r6, #1
 8000c7a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7e:	0c21      	lsrs	r1, r4, #16
 8000c80:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb08 f30c 	mul.w	r3, r8, ip
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0xe2>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	f200 80e9 	bhi.w	8000e70 <__udivmoddi4+0x2b4>
 8000c9e:	4684      	mov	ip, r0
 8000ca0:	1ac9      	subs	r1, r1, r3
 8000ca2:	b2a3      	uxth	r3, r4
 8000ca4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb0:	fb08 f800 	mul.w	r8, r8, r0
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x10c>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x10a>
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	f200 80d9 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	eba4 0408 	sub.w	r4, r4, r8
 8000ccc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd0:	e7bf      	b.n	8000c52 <__udivmoddi4+0x96>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x12e>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80b1 	beq.w	8000e3e <__udivmoddi4+0x282>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x1cc>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0x140>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80b8 	bhi.w	8000e6c <__udivmoddi4+0x2b0>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0103 	sbc.w	r1, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	468c      	mov	ip, r1
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0a8      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000d0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000d10:	f1c2 0320 	rsb	r3, r2, #32
 8000d14:	fa20 f603 	lsr.w	r6, r0, r3
 8000d18:	4097      	lsls	r7, r2
 8000d1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d22:	40d9      	lsrs	r1, r3
 8000d24:	4330      	orrs	r0, r6
 8000d26:	0c03      	lsrs	r3, r0, #16
 8000d28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d2c:	fa1f f887 	uxth.w	r8, r7
 8000d30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb06 f108 	mul.w	r1, r6, r8
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x19c>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4a:	f080 808d 	bcs.w	8000e68 <__udivmoddi4+0x2ac>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 808a 	bls.w	8000e68 <__udivmoddi4+0x2ac>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b281      	uxth	r1, r0
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb00 f308 	mul.w	r3, r0, r8
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x1c4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d76:	d273      	bcs.n	8000e60 <__udivmoddi4+0x2a4>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d971      	bls.n	8000e60 <__udivmoddi4+0x2a4>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4439      	add	r1, r7
 8000d80:	1acb      	subs	r3, r1, r3
 8000d82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d86:	e778      	b.n	8000c7a <__udivmoddi4+0xbe>
 8000d88:	f1c6 0c20 	rsb	ip, r6, #32
 8000d8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d94:	431c      	orrs	r4, r3
 8000d96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da6:	431f      	orrs	r7, r3
 8000da8:	0c3b      	lsrs	r3, r7, #16
 8000daa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dae:	fa1f f884 	uxth.w	r8, r4
 8000db2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dba:	fb09 fa08 	mul.w	sl, r9, r8
 8000dbe:	458a      	cmp	sl, r1
 8000dc0:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc4:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x220>
 8000dca:	1861      	adds	r1, r4, r1
 8000dcc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd0:	d248      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000dd2:	458a      	cmp	sl, r1
 8000dd4:	d946      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4421      	add	r1, r4
 8000ddc:	eba1 010a 	sub.w	r1, r1, sl
 8000de0:	b2bf      	uxth	r7, r7
 8000de2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dee:	fb00 f808 	mul.w	r8, r0, r8
 8000df2:	45b8      	cmp	r8, r7
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x24a>
 8000df6:	19e7      	adds	r7, r4, r7
 8000df8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfc:	d22e      	bcs.n	8000e5c <__udivmoddi4+0x2a0>
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d92c      	bls.n	8000e5c <__udivmoddi4+0x2a0>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4427      	add	r7, r4
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	eba7 0708 	sub.w	r7, r7, r8
 8000e0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e12:	454f      	cmp	r7, r9
 8000e14:	46c6      	mov	lr, r8
 8000e16:	4649      	mov	r1, r9
 8000e18:	d31a      	bcc.n	8000e50 <__udivmoddi4+0x294>
 8000e1a:	d017      	beq.n	8000e4c <__udivmoddi4+0x290>
 8000e1c:	b15d      	cbz	r5, 8000e36 <__udivmoddi4+0x27a>
 8000e1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e22:	eb67 0701 	sbc.w	r7, r7, r1
 8000e26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2a:	40f2      	lsrs	r2, r6
 8000e2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e30:	40f7      	lsrs	r7, r6
 8000e32:	e9c5 2700 	strd	r2, r7, [r5]
 8000e36:	2600      	movs	r6, #0
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e70b      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e9      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6fd      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e4c:	4543      	cmp	r3, r8
 8000e4e:	d2e5      	bcs.n	8000e1c <__udivmoddi4+0x260>
 8000e50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e54:	eb69 0104 	sbc.w	r1, r9, r4
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7df      	b.n	8000e1c <__udivmoddi4+0x260>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e7d2      	b.n	8000e06 <__udivmoddi4+0x24a>
 8000e60:	4660      	mov	r0, ip
 8000e62:	e78d      	b.n	8000d80 <__udivmoddi4+0x1c4>
 8000e64:	4681      	mov	r9, r0
 8000e66:	e7b9      	b.n	8000ddc <__udivmoddi4+0x220>
 8000e68:	4666      	mov	r6, ip
 8000e6a:	e775      	b.n	8000d58 <__udivmoddi4+0x19c>
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e74a      	b.n	8000d06 <__udivmoddi4+0x14a>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	4439      	add	r1, r7
 8000e76:	e713      	b.n	8000ca0 <__udivmoddi4+0xe4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	443c      	add	r4, r7
 8000e7c:	e724      	b.n	8000cc8 <__udivmoddi4+0x10c>
 8000e7e:	bf00      	nop

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e88:	f000 fbd6 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8c:	f000 f886 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e90:	f000 f918 	bl	80010c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e94:	f000 f8ec 	bl	8001070 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000e98:	f005 fdf8 	bl	8006a8c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 8000e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea0:	483d      	ldr	r0, [pc, #244]	; (8000f98 <main+0x114>)
 8000ea2:	f000 ff1d 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f7      	beq.n	8000e9c <main+0x18>
		  // draw smiley face
		  drawCircle(100, 0, 360, 1); // draw main circle
 8000eac:	2301      	movs	r3, #1
 8000eae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2064      	movs	r0, #100	; 0x64
 8000eb6:	f000 fa23 	bl	8001300 <drawCircle>
		  step(0, 0, 0); // force release left mouse button
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f9f2 	bl	80012a8 <step>

		  step(0, 50, 0); // move to bottom of nose line
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2132      	movs	r1, #50	; 0x32
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 f9ed 	bl	80012a8 <step>
		  step(0, 15, 1); // draw nose line
 8000ece:	2201      	movs	r2, #1
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f9e8 	bl	80012a8 <step>
		  step(0, 0, 0); // force release LMB
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f9e3 	bl	80012a8 <step>

		  step(30, 0, 0); // move to start point of right eye
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	201e      	movs	r0, #30
 8000ee8:	f000 f9de 	bl	80012a8 <step>
		  drawCircle(20, 0, 360, 1);
 8000eec:	2301      	movs	r3, #1
 8000eee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2014      	movs	r0, #20
 8000ef6:	f000 fa03 	bl	8001300 <drawCircle>
		  step(0, 0, 0); // force release LMB
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 f9d2 	bl	80012a8 <step>
		  step(-40, 0, 0); // move to top of nose line
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	f06f 0027 	mvn.w	r0, #39	; 0x27
 8000f0c:	f000 f9cc 	bl	80012a8 <step>
		  step(-40, 0, 0); // move to start point of left eye
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	f06f 0027 	mvn.w	r0, #39	; 0x27
 8000f18:	f000 f9c6 	bl	80012a8 <step>
		  drawCircle(20, 0, 360, 1);
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000f22:	2100      	movs	r1, #0
 8000f24:	2014      	movs	r0, #20
 8000f26:	f000 f9eb 	bl	8001300 <drawCircle>
		  step(40, 0, 0); // return to top of nose line
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2028      	movs	r0, #40	; 0x28
 8000f30:	f000 f9ba 	bl	80012a8 <step>
		  step(0, 0, 0); // force release LMB
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 f9b5 	bl	80012a8 <step>

		  step(0, 0, 0); // force release LMB
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f9b0 	bl	80012a8 <step>
		  step(0, -15, 0); // return to bottom of nose line
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f06f 010e 	mvn.w	r1, #14
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f9aa 	bl	80012a8 <step>
		  step(0, -50, 0); // return to bottom of main circle
 8000f54:	2200      	movs	r2, #0
 8000f56:	f06f 0131 	mvn.w	r1, #49	; 0x31
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f9a4 	bl	80012a8 <step>

		  drawCircle(70, 0, -90, 1); // draw left arc of mouth
 8000f60:	2301      	movs	r3, #1
 8000f62:	f64f 72a6 	movw	r2, #65446	; 0xffa6
 8000f66:	2100      	movs	r1, #0
 8000f68:	2046      	movs	r0, #70	; 0x46
 8000f6a:	f000 f9c9 	bl	8001300 <drawCircle>
		  step(0, 0, 0); // release LMB
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f998 	bl	80012a8 <step>
		  drawCircle(70, 270, 360, 0); // return to bottom point of the main circle
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000f7e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000f82:	2046      	movs	r0, #70	; 0x46
 8000f84:	f000 f9bc 	bl	8001300 <drawCircle>
		  drawCircle(70, 0, 90, 1); // draw right arc of mouth
 8000f88:	2301      	movs	r3, #1
 8000f8a:	225a      	movs	r2, #90	; 0x5a
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2046      	movs	r0, #70	; 0x46
 8000f90:	f000 f9b6 	bl	8001300 <drawCircle>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 8000f94:	e782      	b.n	8000e9c <main+0x18>
 8000f96:	bf00      	nop
 8000f98:	40020800 	.word	0x40020800

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2230      	movs	r2, #48	; 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f006 f9d8 	bl	8007360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <SystemClock_Config+0xcc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a27      	ldr	r2, [pc, #156]	; (8001068 <SystemClock_Config+0xcc>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b25      	ldr	r3, [pc, #148]	; (8001068 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <SystemClock_Config+0xd0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <SystemClock_Config+0xd0>)
 8000fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ffc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2302      	movs	r3, #2
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001006:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800100c:	2304      	movs	r3, #4
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001010:	23a8      	movs	r3, #168	; 0xa8
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001014:	2302      	movs	r3, #2
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001018:	2307      	movs	r3, #7
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 0320 	add.w	r3, r7, #32
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fff9 	bl	8003018 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800102c:	f000 fa1e 	bl	800146c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2105      	movs	r1, #5
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fa5a 	bl	8003508 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800105a:	f000 fa07 	bl	800146c <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	; 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <MX_USART3_UART_Init+0x50>)
 8001078:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 80010a8:	f002 fc2a 	bl	8003900 <HAL_UART_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010b2:	f000 f9db 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000198 	.word	0x20000198
 80010c0:	40004800 	.word	0x40004800

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	; 0x30
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	4b6d      	ldr	r3, [pc, #436]	; (8001294 <MX_GPIO_Init+0x1d0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a6c      	ldr	r2, [pc, #432]	; (8001294 <MX_GPIO_Init+0x1d0>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b6a      	ldr	r3, [pc, #424]	; (8001294 <MX_GPIO_Init+0x1d0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	4b66      	ldr	r3, [pc, #408]	; (8001294 <MX_GPIO_Init+0x1d0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a65      	ldr	r2, [pc, #404]	; (8001294 <MX_GPIO_Init+0x1d0>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b63      	ldr	r3, [pc, #396]	; (8001294 <MX_GPIO_Init+0x1d0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b5f      	ldr	r3, [pc, #380]	; (8001294 <MX_GPIO_Init+0x1d0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a5e      	ldr	r2, [pc, #376]	; (8001294 <MX_GPIO_Init+0x1d0>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b5c      	ldr	r3, [pc, #368]	; (8001294 <MX_GPIO_Init+0x1d0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b58      	ldr	r3, [pc, #352]	; (8001294 <MX_GPIO_Init+0x1d0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a57      	ldr	r2, [pc, #348]	; (8001294 <MX_GPIO_Init+0x1d0>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b55      	ldr	r3, [pc, #340]	; (8001294 <MX_GPIO_Init+0x1d0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b51      	ldr	r3, [pc, #324]	; (8001294 <MX_GPIO_Init+0x1d0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a50      	ldr	r2, [pc, #320]	; (8001294 <MX_GPIO_Init+0x1d0>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <MX_GPIO_Init+0x1d0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <MX_GPIO_Init+0x1d0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a49      	ldr	r2, [pc, #292]	; (8001294 <MX_GPIO_Init+0x1d0>)
 8001170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <MX_GPIO_Init+0x1d0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f244 0181 	movw	r1, #16513	; 0x4081
 8001188:	4843      	ldr	r0, [pc, #268]	; (8001298 <MX_GPIO_Init+0x1d4>)
 800118a:	f000 fdc1 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2140      	movs	r1, #64	; 0x40
 8001192:	4842      	ldr	r0, [pc, #264]	; (800129c <MX_GPIO_Init+0x1d8>)
 8001194:	f000 fdbc 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	483c      	ldr	r0, [pc, #240]	; (80012a0 <MX_GPIO_Init+0x1dc>)
 80011b0:	f000 fbea 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011b4:	2332      	movs	r3, #50	; 0x32
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011c4:	230b      	movs	r3, #11
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4834      	ldr	r0, [pc, #208]	; (80012a0 <MX_GPIO_Init+0x1dc>)
 80011d0:	f000 fbda 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011d4:	2386      	movs	r3, #134	; 0x86
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011e4:	230b      	movs	r3, #11
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	482d      	ldr	r0, [pc, #180]	; (80012a4 <MX_GPIO_Init+0x1e0>)
 80011f0:	f000 fbca 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	4822      	ldr	r0, [pc, #136]	; (8001298 <MX_GPIO_Init+0x1d4>)
 800120e:	f000 fbbb 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001224:	230b      	movs	r3, #11
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	481a      	ldr	r0, [pc, #104]	; (8001298 <MX_GPIO_Init+0x1d4>)
 8001230:	f000 fbaa 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001234:	2340      	movs	r3, #64	; 0x40
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4814      	ldr	r0, [pc, #80]	; (800129c <MX_GPIO_Init+0x1d8>)
 800124c:	f000 fb9c 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	480e      	ldr	r0, [pc, #56]	; (800129c <MX_GPIO_Init+0x1d8>)
 8001264:	f000 fb90 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001268:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127a:	230b      	movs	r3, #11
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_GPIO_Init+0x1d8>)
 8001286:	f000 fb7f 	bl	8001988 <HAL_GPIO_Init>

}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40020400 	.word	0x40020400
 800129c:	40021800 	.word	0x40021800
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020000 	.word	0x40020000

080012a8 <step>:

/* USER CODE BEGIN 4 */
void step(int32_t dx, int32_t dy, bool lBtn)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	71fb      	strb	r3, [r7, #7]
	uint8_t buff[4];
	buff[0] = 0x00;
 80012b6:	2300      	movs	r3, #0
 80012b8:	753b      	strb	r3, [r7, #20]
	if (lBtn) buff[0] = 0x01;
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <step+0x1c>
 80012c0:	2301      	movs	r3, #1
 80012c2:	753b      	strb	r3, [r7, #20]

	buff[1] = (int8_t)(dx);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	757b      	strb	r3, [r7, #21]
	buff[2] = (int8_t)(dy);
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	75bb      	strb	r3, [r7, #22]
	buff[3] = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	75fb      	strb	r3, [r7, #23]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2204      	movs	r2, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	4806      	ldr	r0, [pc, #24]	; (80012f8 <step+0x50>)
 80012de:	f004 f9fb 	bl	80056d8 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <step+0x50>)
 80012e4:	f004 fa20 	bl	8005728 <USBD_HID_GetPollingInterval>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fa16 	bl	800171c <HAL_Delay>
}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200001e0 	.word	0x200001e0
 80012fc:	00000000 	.word	0x00000000

08001300 <drawCircle>:

void drawCircle(uint8_t r, uint16_t startAngle, uint16_t endAngle, bool lBtn)
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	4604      	mov	r4, r0
 8001308:	4608      	mov	r0, r1
 800130a:	4611      	mov	r1, r2
 800130c:	461a      	mov	r2, r3
 800130e:	4623      	mov	r3, r4
 8001310:	71fb      	strb	r3, [r7, #7]
 8001312:	4603      	mov	r3, r0
 8001314:	80bb      	strh	r3, [r7, #4]
 8001316:	460b      	mov	r3, r1
 8001318:	807b      	strh	r3, [r7, #2]
 800131a:	4613      	mov	r3, r2
 800131c:	71bb      	strb	r3, [r7, #6]

	float sx = 0;	// value before step for x
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
	float sy = 0; 	// value before step for y
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
	float x = 0; 	// value after step for x
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
	float y = 0; 	// value after step for y
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
	int32_t dx = 0; // delta of x fed into step function
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
	int32_t dy = 0; // delta of y fed into step function
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]

	for (uint32_t i = startAngle; i < endAngle; i = i+10)
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	e080      	b.n	8001446 <drawCircle+0x146>
		{
			sx = x; // save temp value of x
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	61bb      	str	r3, [r7, #24]
			sy = y; // save temp value of y
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	617b      	str	r3, [r7, #20]
			x = r * cos((M_PI * i) / 180);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f8a0 	bl	8000494 <__aeabi_i2d>
 8001354:	4604      	mov	r4, r0
 8001356:	460d      	mov	r5, r1
 8001358:	69f8      	ldr	r0, [r7, #28]
 800135a:	f7ff f88b 	bl	8000474 <__aeabi_ui2d>
 800135e:	a340      	add	r3, pc, #256	; (adr r3, 8001460 <drawCircle+0x160>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff f900 	bl	8000568 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <drawCircle+0x168>)
 8001376:	f7ff fa21 	bl	80007bc <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	ec43 2b17 	vmov	d7, r2, r3
 8001382:	eeb0 0a47 	vmov.f32	s0, s14
 8001386:	eef0 0a67 	vmov.f32	s1, s15
 800138a:	f005 fff1 	bl	8007370 <cos>
 800138e:	ec53 2b10 	vmov	r2, r3, d0
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f7ff f8e7 	bl	8000568 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fba3 	bl	8000aec <__aeabi_d2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
			y = r * sin((M_PI * i) / 180);
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f871 	bl	8000494 <__aeabi_i2d>
 80013b2:	4604      	mov	r4, r0
 80013b4:	460d      	mov	r5, r1
 80013b6:	69f8      	ldr	r0, [r7, #28]
 80013b8:	f7ff f85c 	bl	8000474 <__aeabi_ui2d>
 80013bc:	a328      	add	r3, pc, #160	; (adr r3, 8001460 <drawCircle+0x160>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff f8d1 	bl	8000568 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	4b25      	ldr	r3, [pc, #148]	; (8001468 <drawCircle+0x168>)
 80013d4:	f7ff f9f2 	bl	80007bc <__aeabi_ddiv>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	ec43 2b17 	vmov	d7, r2, r3
 80013e0:	eeb0 0a47 	vmov.f32	s0, s14
 80013e4:	eef0 0a67 	vmov.f32	s1, s15
 80013e8:	f006 f812 	bl	8007410 <sin>
 80013ec:	ec53 2b10 	vmov	r2, r3, d0
 80013f0:	4620      	mov	r0, r4
 80013f2:	4629      	mov	r1, r5
 80013f4:	f7ff f8b8 	bl	8000568 <__aeabi_dmul>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fb74 	bl	8000aec <__aeabi_d2f>
 8001404:	4603      	mov	r3, r0
 8001406:	623b      	str	r3, [r7, #32]
			dx = sx - x; // evaluate mouse movement delta for x
 8001408:	ed97 7a06 	vldr	s14, [r7, #24]
 800140c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001418:	ee17 3a90 	vmov	r3, s15
 800141c:	613b      	str	r3, [r7, #16]
			dy = sy - y; // evaluate mouse movement delta for y
 800141e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001422:	edd7 7a08 	vldr	s15, [r7, #32]
 8001426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800142e:	ee17 3a90 	vmov	r3, s15
 8001432:	60fb      	str	r3, [r7, #12]
			step(dx, dy, lBtn); // send report over USB
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	461a      	mov	r2, r3
 8001438:	68f9      	ldr	r1, [r7, #12]
 800143a:	6938      	ldr	r0, [r7, #16]
 800143c:	f7ff ff34 	bl	80012a8 <step>
	for (uint32_t i = startAngle; i < endAngle; i = i+10)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	330a      	adds	r3, #10
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	429a      	cmp	r2, r3
 800144c:	f4ff af7a 	bcc.w	8001344 <drawCircle+0x44>
		}
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bdb0      	pop	{r4, r5, r7, pc}
 800145a:	bf00      	nop
 800145c:	f3af 8000 	nop.w
 8001460:	54442d18 	.word	0x54442d18
 8001464:	400921fb 	.word	0x400921fb
 8001468:	40668000 	.word	0x40668000

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	e7fe      	b.n	8001474 <Error_Handler+0x8>
	...

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_MspInit+0x4c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a19      	ldr	r2, [pc, #100]	; (800154c <HAL_UART_MspInit+0x84>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12c      	bne.n	8001544 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_UART_MspInit+0x88>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_UART_MspInit+0x88>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_UART_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_UART_MspInit+0x88>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <HAL_UART_MspInit+0x88>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_UART_MspInit+0x88>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001522:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001534:	2307      	movs	r3, #7
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_UART_MspInit+0x8c>)
 8001540:	f000 fa22 	bl	8001988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40004800 	.word	0x40004800
 8001550:	40023800 	.word	0x40023800
 8001554:	40020c00 	.word	0x40020c00

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800155c:	e7fe      	b.n	800155c <NMI_Handler+0x4>

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a4:	f000 f89a 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <OTG_FS_IRQHandler+0x10>)
 80015b2:	f000 fd16 	bl	8001fe2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200006b0 	.word	0x200006b0

080015c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ea:	490e      	ldr	r1, [pc, #56]	; (8001624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001600:	4c0b      	ldr	r4, [pc, #44]	; (8001630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800160e:	f7ff ffd7 	bl	80015c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001612:	f005 fe81 	bl	8007318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff fc35 	bl	8000e84 <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800161c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001628:	080086e0 	.word	0x080086e0
  ldr r2, =_sbss
 800162c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001630:	20000ab8 	.word	0x20000ab8

08001634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_Init+0x40>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_Init+0x40>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x40>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 f94f 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	2000      	movs	r0, #0
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff ff04 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f967 	bl	800196e <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 f92f 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008
 8001700:	200001dc 	.word	0x200001dc

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	200001dc 	.word	0x200001dc

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff ffee 	bl	8001704 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_Delay+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001742:	bf00      	nop
 8001744:	f7ff ffde 	bl	8001704 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff8e 	bl	8001804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff29 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192c:	f7ff ff3e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7ff ff8e 	bl	8001858 <NVIC_EncodePriority>
 800193c:	4602      	mov	r2, r0
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff5d 	bl	8001804 <__NVIC_SetPriority>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff31 	bl	80017c8 <__NVIC_EnableIRQ>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffa2 	bl	80018c0 <SysTick_Config>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e177      	b.n	8001c94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8166 	bne.w	8001c8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d005      	beq.n	80019da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d130      	bne.n	8001a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 0201 	and.w	r2, r3, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d017      	beq.n	8001a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d123      	bne.n	8001acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80c0 	beq.w	8001c8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b66      	ldr	r3, [pc, #408]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a65      	ldr	r2, [pc, #404]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b63      	ldr	r3, [pc, #396]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2a:	4a61      	ldr	r2, [pc, #388]	; (8001cb0 <HAL_GPIO_Init+0x328>)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a58      	ldr	r2, [pc, #352]	; (8001cb4 <HAL_GPIO_Init+0x32c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d037      	beq.n	8001bc6 <HAL_GPIO_Init+0x23e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a57      	ldr	r2, [pc, #348]	; (8001cb8 <HAL_GPIO_Init+0x330>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d031      	beq.n	8001bc2 <HAL_GPIO_Init+0x23a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a56      	ldr	r2, [pc, #344]	; (8001cbc <HAL_GPIO_Init+0x334>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d02b      	beq.n	8001bbe <HAL_GPIO_Init+0x236>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a55      	ldr	r2, [pc, #340]	; (8001cc0 <HAL_GPIO_Init+0x338>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d025      	beq.n	8001bba <HAL_GPIO_Init+0x232>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a54      	ldr	r2, [pc, #336]	; (8001cc4 <HAL_GPIO_Init+0x33c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01f      	beq.n	8001bb6 <HAL_GPIO_Init+0x22e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a53      	ldr	r2, [pc, #332]	; (8001cc8 <HAL_GPIO_Init+0x340>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d019      	beq.n	8001bb2 <HAL_GPIO_Init+0x22a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_GPIO_Init+0x344>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_GPIO_Init+0x226>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a51      	ldr	r2, [pc, #324]	; (8001cd0 <HAL_GPIO_Init+0x348>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00d      	beq.n	8001baa <HAL_GPIO_Init+0x222>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a50      	ldr	r2, [pc, #320]	; (8001cd4 <HAL_GPIO_Init+0x34c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d007      	beq.n	8001ba6 <HAL_GPIO_Init+0x21e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4f      	ldr	r2, [pc, #316]	; (8001cd8 <HAL_GPIO_Init+0x350>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d101      	bne.n	8001ba2 <HAL_GPIO_Init+0x21a>
 8001b9e:	2309      	movs	r3, #9
 8001ba0:	e012      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001ba2:	230a      	movs	r3, #10
 8001ba4:	e010      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	e00e      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001baa:	2307      	movs	r3, #7
 8001bac:	e00c      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bae:	2306      	movs	r3, #6
 8001bb0:	e00a      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	e008      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e004      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f002 0203 	and.w	r2, r2, #3
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	4093      	lsls	r3, r2
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd8:	4935      	ldr	r1, [pc, #212]	; (8001cb0 <HAL_GPIO_Init+0x328>)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be6:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c0a:	4a34      	ldr	r2, [pc, #208]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c10:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c34:	4a29      	ldr	r2, [pc, #164]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c88:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <HAL_GPIO_Init+0x354>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3301      	adds	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	f67f ae84 	bls.w	80019a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40021400 	.word	0x40021400
 8001ccc:	40021800 	.word	0x40021800
 8001cd0:	40021c00 	.word	0x40021c00
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40022400 	.word	0x40022400
 8001cdc:	40013c00 	.word	0x40013c00

08001ce0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e001      	b.n	8001d02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d2c:	e003      	b.n	8001d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d2e:	887b      	ldrh	r3, [r7, #2]
 8001d30:	041a      	lsls	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	619a      	str	r2, [r3, #24]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d44:	b08f      	sub	sp, #60	; 0x3c
 8001d46:	af0a      	add	r7, sp, #40	; 0x28
 8001d48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e10f      	b.n	8001f74 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f004 ffc2 	bl	8006cf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2203      	movs	r2, #3
 8001d78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f002 f8df 	bl	8003f56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	687e      	ldr	r6, [r7, #4]
 8001da0:	466d      	mov	r5, sp
 8001da2:	f106 0410 	add.w	r4, r6, #16
 8001da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001db6:	1d33      	adds	r3, r6, #4
 8001db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dba:	6838      	ldr	r0, [r7, #0]
 8001dbc:	f001 ffb6 	bl	8003d2c <USB_CoreInit>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0d0      	b.n	8001f74 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f002 f8cd 	bl	8003f78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
 8001de2:	e04a      	b.n	8001e7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	333d      	adds	r3, #61	; 0x3d
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	333c      	adds	r3, #60	; 0x3c
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	b298      	uxth	r0, r3
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3342      	adds	r3, #66	; 0x42
 8001e20:	4602      	mov	r2, r0
 8001e22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	333f      	adds	r3, #63	; 0x3f
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	3344      	adds	r3, #68	; 0x44
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	3348      	adds	r3, #72	; 0x48
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3350      	adds	r3, #80	; 0x50
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	3301      	adds	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3af      	bcc.n	8001de4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e044      	b.n	8001f14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	1a9b      	subs	r3, r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	1a9b      	subs	r3, r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	3301      	adds	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d3b5      	bcc.n	8001e8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	687e      	ldr	r6, [r7, #4]
 8001f26:	466d      	mov	r5, sp
 8001f28:	f106 0410 	add.w	r4, r6, #16
 8001f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f38:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f3c:	1d33      	adds	r3, r6, #4
 8001f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f40:	6838      	ldr	r0, [r7, #0]
 8001f42:	f002 f865 	bl	8004010 <USB_DevInit>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e00d      	b.n	8001f74 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 f8e1 	bl	8005134 <USB_DevDisconnect>

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_PCD_Start+0x1c>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e020      	b.n	8001fda <HAL_PCD_Start+0x5e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d109      	bne.n	8001fbc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d005      	beq.n	8001fbc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 ffb7 	bl	8003f34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 f891 	bl	80050f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fe2:	b590      	push	{r4, r7, lr}
 8001fe4:	b08d      	sub	sp, #52	; 0x34
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 f94f 	bl	800529c <USB_GetMode>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	f040 839d 	bne.w	8002740 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f003 f8b3 	bl	8005176 <USB_ReadInterrupts>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8393 	beq.w	800273e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f003 f8aa 	bl	8005176 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b02      	cmp	r3, #2
 800202a:	d107      	bne.n	800203c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f002 0202 	and.w	r2, r2, #2
 800203a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f003 f898 	bl	8005176 <USB_ReadInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b10      	cmp	r3, #16
 800204e:	d161      	bne.n	8002114 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0210 	bic.w	r2, r2, #16
 800205e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	f003 020f 	and.w	r2, r3, #15
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	3304      	adds	r3, #4
 800207e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	0c5b      	lsrs	r3, r3, #17
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	2b02      	cmp	r3, #2
 800208a:	d124      	bne.n	80020d6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d035      	beq.n	8002104 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	6a38      	ldr	r0, [r7, #32]
 80020ac:	f002 fecf 	bl	8004e4e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020bc:	441a      	add	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ce:	441a      	add	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	619a      	str	r2, [r3, #24]
 80020d4:	e016      	b.n	8002104 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	0c5b      	lsrs	r3, r3, #17
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d110      	bne.n	8002104 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020e8:	2208      	movs	r2, #8
 80020ea:	4619      	mov	r1, r3
 80020ec:	6a38      	ldr	r0, [r7, #32]
 80020ee:	f002 feae 	bl	8004e4e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020fe:	441a      	add	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0210 	orr.w	r2, r2, #16
 8002112:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f003 f82c 	bl	8005176 <USB_ReadInterrupts>
 800211e:	4603      	mov	r3, r0
 8002120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002124:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002128:	d16e      	bne.n	8002208 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f003 f832 	bl	800519c <USB_ReadDevAllOutEpInterrupt>
 8002138:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800213a:	e062      	b.n	8002202 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d057      	beq.n	80021f6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f003 f857 	bl	8005204 <USB_ReadDevOutEPInterrupt>
 8002156:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00c      	beq.n	800217c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216e:	461a      	mov	r2, r3
 8002170:	2301      	movs	r3, #1
 8002172:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fd98 	bl	8002cac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00c      	beq.n	80021a0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002192:	461a      	mov	r2, r3
 8002194:	2308      	movs	r3, #8
 8002196:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fe92 	bl	8002ec4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b6:	461a      	mov	r2, r3
 80021b8:	2310      	movs	r3, #16
 80021ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d2:	461a      	mov	r2, r3
 80021d4:	2320      	movs	r3, #32
 80021d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ee:	461a      	mov	r2, r3
 80021f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	3301      	adds	r3, #1
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	d199      	bne.n	800213c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f002 ffb2 	bl	8005176 <USB_ReadInterrupts>
 8002212:	4603      	mov	r3, r0
 8002214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002218:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800221c:	f040 80c0 	bne.w	80023a0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f002 ffd3 	bl	80051d0 <USB_ReadDevAllInEpInterrupt>
 800222a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002230:	e0b2      	b.n	8002398 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a7 	beq.w	800238c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f002 fff9 	bl	8005240 <USB_ReadDevInEPInterrupt>
 800224e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d057      	beq.n	800230a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	2201      	movs	r2, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800226e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	43db      	mvns	r3, r3
 8002274:	69f9      	ldr	r1, [r7, #28]
 8002276:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800227a:	4013      	ands	r3, r2
 800227c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	4413      	add	r3, r2
 8002286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800228a:	461a      	mov	r2, r3
 800228c:	2301      	movs	r3, #1
 800228e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d132      	bne.n	80022fe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3348      	adds	r3, #72	; 0x48
 80022a8:	6819      	ldr	r1, [r3, #0]
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4403      	add	r3, r0
 80022b8:	3344      	adds	r3, #68	; 0x44
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4419      	add	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4403      	add	r3, r0
 80022cc:	3348      	adds	r3, #72	; 0x48
 80022ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d113      	bne.n	80022fe <HAL_PCD_IRQHandler+0x31c>
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	3350      	adds	r3, #80	; 0x50
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d108      	bne.n	80022fe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022f6:	461a      	mov	r2, r3
 80022f8:	2101      	movs	r1, #1
 80022fa:	f003 f801 	bl	8005300 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f004 fd86 	bl	8006e16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002320:	461a      	mov	r2, r3
 8002322:	2308      	movs	r3, #8
 8002324:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800233c:	461a      	mov	r2, r3
 800233e:	2310      	movs	r3, #16
 8002340:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002358:	461a      	mov	r2, r3
 800235a:	2340      	movs	r3, #64	; 0x40
 800235c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002374:	461a      	mov	r2, r3
 8002376:	2302      	movs	r3, #2
 8002378:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fc03 	bl	8002b92 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	3301      	adds	r3, #1
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239a:	2b00      	cmp	r3, #0
 800239c:	f47f af49 	bne.w	8002232 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 fee6 	bl	8005176 <USB_ReadInterrupts>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023b4:	d122      	bne.n	80023fc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d108      	bne.n	80023e6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023dc:	2100      	movs	r1, #0
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fe0e 	bl	8003000 <HAL_PCDEx_LPM_Callback>
 80023e4:	e002      	b.n	80023ec <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f004 fd8c 	bl	8006f04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f002 feb8 	bl	8005176 <USB_ReadInterrupts>
 8002406:	4603      	mov	r3, r0
 8002408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800240c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002410:	d112      	bne.n	8002438 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d102      	bne.n	8002428 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f004 fd48 	bl	8006eb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002436:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f002 fe9a 	bl	8005176 <USB_ReadInterrupts>
 8002442:	4603      	mov	r3, r0
 8002444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244c:	f040 80c7 	bne.w	80025de <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2110      	movs	r1, #16
 800246a:	4618      	mov	r0, r3
 800246c:	f001 ff34 	bl	80042d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002474:	e056      	b.n	8002524 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002482:	461a      	mov	r2, r3
 8002484:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002488:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800249a:	0151      	lsls	r1, r2, #5
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	440a      	add	r2, r1
 80024a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024a8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ba:	0151      	lsls	r1, r2, #5
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	440a      	add	r2, r1
 80024c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d6:	461a      	mov	r2, r3
 80024d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ee:	0151      	lsls	r1, r2, #5
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	440a      	add	r2, r1
 80024f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250e:	0151      	lsls	r1, r2, #5
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	440a      	add	r2, r1
 8002514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002518:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800251c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	3301      	adds	r3, #1
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252a:	429a      	cmp	r2, r3
 800252c:	d3a3      	bcc.n	8002476 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800253c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002540:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	2b00      	cmp	r3, #0
 8002548:	d016      	beq.n	8002578 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800255a:	f043 030b 	orr.w	r3, r3, #11
 800255e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002570:	f043 030b 	orr.w	r3, r3, #11
 8002574:	6453      	str	r3, [r2, #68]	; 0x44
 8002576:	e015      	b.n	80025a4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002586:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800258a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800258e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800259e:	f043 030b 	orr.w	r3, r3, #11
 80025a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025c8:	461a      	mov	r2, r3
 80025ca:	f002 fe99 	bl	8005300 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 fdc7 	bl	8005176 <USB_ReadInterrupts>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f2:	d124      	bne.n	800263e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f002 fe5d 	bl	80052b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f001 fec5 	bl	8004392 <USB_GetDevSpeed>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681c      	ldr	r4, [r3, #0]
 8002614:	f001 f940 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 8002618:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	4620      	mov	r0, r4
 8002624:	f001 fbe4 	bl	8003df0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f004 fc1c 	bl	8006e66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800263c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f002 fd97 	bl	8005176 <USB_ReadInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b08      	cmp	r3, #8
 8002650:	d10a      	bne.n	8002668 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f004 fbf9 	bl	8006e4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f002 0208 	and.w	r2, r2, #8
 8002666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fd82 	bl	8005176 <USB_ReadInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800267c:	d10f      	bne.n	800269e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f004 fc5b 	bl	8006f44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800269c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 fd67 	bl	8005176 <USB_ReadInterrupts>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026b2:	d10f      	bne.n	80026d4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f004 fc2e 	bl	8006f20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80026d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fd4c 	bl	8005176 <USB_ReadInterrupts>
 80026de:	4603      	mov	r3, r0
 80026e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d10a      	bne.n	8002700 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f004 fc3c 	bl	8006f68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f002 fd36 	bl	8005176 <USB_ReadInterrupts>
 800270a:	4603      	mov	r3, r0
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b04      	cmp	r3, #4
 8002712:	d115      	bne.n	8002740 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f004 fc2c 	bl	8006f84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6859      	ldr	r1, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	e000      	b.n	8002740 <HAL_PCD_IRQHandler+0x75e>
      return;
 800273e:	bf00      	nop
    }
  }
}
 8002740:	3734      	adds	r7, #52	; 0x34
 8002742:	46bd      	mov	sp, r7
 8002744:	bd90      	pop	{r4, r7, pc}

08002746 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_PCD_SetAddress+0x1a>
 800275c:	2302      	movs	r3, #2
 800275e:	e013      	b.n	8002788 <HAL_PCD_SetAddress+0x42>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fc94 	bl	80050a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	70fb      	strb	r3, [r7, #3]
 80027a2:	460b      	mov	r3, r1
 80027a4:	803b      	strh	r3, [r7, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da0f      	bge.n	80027d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	f003 020f 	and.w	r2, r3, #15
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	3338      	adds	r3, #56	; 0x38
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	3304      	adds	r3, #4
 80027cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	705a      	strb	r2, [r3, #1]
 80027d4:	e00f      	b.n	80027f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	f003 020f 	and.w	r2, r3, #15
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	3304      	adds	r3, #4
 80027ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002802:	883a      	ldrh	r2, [r7, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	78ba      	ldrb	r2, [r7, #2]
 800280c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d004      	beq.n	8002820 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002820:	78bb      	ldrb	r3, [r7, #2]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d102      	bne.n	800282c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_PCD_EP_Open+0xaa>
 8002836:	2302      	movs	r3, #2
 8002838:	e00e      	b.n	8002858 <HAL_PCD_EP_Open+0xc8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68f9      	ldr	r1, [r7, #12]
 8002848:	4618      	mov	r0, r3
 800284a:	f001 fdc7 	bl	80043dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002856:	7afb      	ldrb	r3, [r7, #11]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800286c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002870:	2b00      	cmp	r3, #0
 8002872:	da0f      	bge.n	8002894 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	f003 020f 	and.w	r2, r3, #15
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	3338      	adds	r3, #56	; 0x38
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4413      	add	r3, r2
 8002888:	3304      	adds	r3, #4
 800288a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	705a      	strb	r2, [r3, #1]
 8002892:	e00f      	b.n	80028b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	f003 020f 	and.w	r2, r3, #15
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	3304      	adds	r3, #4
 80028ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_PCD_EP_Close+0x6e>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e00e      	b.n	80028ec <HAL_PCD_EP_Close+0x8c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68f9      	ldr	r1, [r7, #12]
 80028dc:	4618      	mov	r0, r3
 80028de:	f001 fe05 	bl	80044ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	460b      	mov	r3, r1
 8002902:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002904:	7afb      	ldrb	r3, [r7, #11]
 8002906:	f003 020f 	and.w	r2, r3, #15
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	3304      	adds	r3, #4
 800291c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2200      	movs	r2, #0
 8002934:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002936:	7afb      	ldrb	r3, [r7, #11]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	b2da      	uxtb	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d102      	bne.n	8002950 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002950:	7afb      	ldrb	r3, [r7, #11]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	6979      	ldr	r1, [r7, #20]
 8002968:	f002 f8e0 	bl	8004b2c <USB_EP0StartXfer>
 800296c:	e008      	b.n	8002980 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	6979      	ldr	r1, [r7, #20]
 800297c:	f001 fe92 	bl	80046a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	460b      	mov	r3, r1
 8002998:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299a:	7afb      	ldrb	r3, [r7, #11]
 800299c:	f003 020f 	and.w	r2, r3, #15
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	3338      	adds	r3, #56	; 0x38
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4413      	add	r3, r2
 80029ae:	3304      	adds	r3, #4
 80029b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2201      	movs	r2, #1
 80029c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ca:	7afb      	ldrb	r3, [r7, #11]
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d102      	bne.n	80029e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029e4:	7afb      	ldrb	r3, [r7, #11]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	6979      	ldr	r1, [r7, #20]
 80029fc:	f002 f896 	bl	8004b2c <USB_EP0StartXfer>
 8002a00:	e008      	b.n	8002a14 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	6979      	ldr	r1, [r7, #20]
 8002a10:	f001 fe48 	bl	80046a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	f003 020f 	and.w	r2, r3, #15
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d901      	bls.n	8002a3c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e050      	b.n	8002ade <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	da0f      	bge.n	8002a64 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	f003 020f 	and.w	r2, r3, #15
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	3338      	adds	r3, #56	; 0x38
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	3304      	adds	r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	705a      	strb	r2, [r3, #1]
 8002a62:	e00d      	b.n	8002a80 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	3304      	adds	r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_PCD_EP_SetStall+0x82>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e01e      	b.n	8002ade <HAL_PCD_EP_SetStall+0xc0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68f9      	ldr	r1, [r7, #12]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fa25 	bl	8004efe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10a      	bne.n	8002ad4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	b2d9      	uxtb	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f002 fc16 	bl	8005300 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	f003 020f 	and.w	r2, r3, #15
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d901      	bls.n	8002b04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e042      	b.n	8002b8a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	da0f      	bge.n	8002b2c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	f003 020f 	and.w	r2, r3, #15
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	3338      	adds	r3, #56	; 0x38
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	4413      	add	r3, r2
 8002b20:	3304      	adds	r3, #4
 8002b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	705a      	strb	r2, [r3, #1]
 8002b2a:	e00f      	b.n	8002b4c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 020f 	and.w	r2, r3, #15
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	3304      	adds	r3, #4
 8002b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_PCD_EP_ClrStall+0x86>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e00e      	b.n	8002b8a <HAL_PCD_EP_ClrStall+0xa4>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68f9      	ldr	r1, [r7, #12]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 fa2d 	bl	8004fda <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b08a      	sub	sp, #40	; 0x28
 8002b96:	af02      	add	r7, sp, #8
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	3338      	adds	r3, #56	; 0x38
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d901      	bls.n	8002bca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06c      	b.n	8002ca4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d902      	bls.n	8002be6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3303      	adds	r3, #3
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bee:	e02b      	b.n	8002c48 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d902      	bls.n	8002c0c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3303      	adds	r3, #3
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68d9      	ldr	r1, [r3, #12]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	4603      	mov	r3, r0
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f002 f8d1 	bl	8004dd2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	441a      	add	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	441a      	add	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d809      	bhi.n	8002c72 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d203      	bcs.n	8002c72 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1be      	bne.n	8002bf0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d811      	bhi.n	8002ca2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	2201      	movs	r2, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	6939      	ldr	r1, [r7, #16]
 8002c9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	333c      	adds	r3, #60	; 0x3c
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	f040 80a0 	bne.w	8002e24 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d015      	beq.n	8002d1a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4a72      	ldr	r2, [pc, #456]	; (8002ebc <PCD_EP_OutXfrComplete_int+0x210>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	f240 80dd 	bls.w	8002eb2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80d7 	beq.w	8002eb2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d10:	461a      	mov	r2, r3
 8002d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d16:	6093      	str	r3, [r2, #8]
 8002d18:	e0cb      	b.n	8002eb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d009      	beq.n	8002d38 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d30:	461a      	mov	r2, r3
 8002d32:	2320      	movs	r3, #32
 8002d34:	6093      	str	r3, [r2, #8]
 8002d36:	e0bc      	b.n	8002eb2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 80b7 	bne.w	8002eb2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4a5d      	ldr	r2, [pc, #372]	; (8002ebc <PCD_EP_OutXfrComplete_int+0x210>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d90f      	bls.n	8002d6c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d62:	461a      	mov	r2, r3
 8002d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d68:	6093      	str	r3, [r2, #8]
 8002d6a:	e0a2      	b.n	8002eb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d7e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	0159      	lsls	r1, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	440b      	add	r3, r1
 8002d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002d92:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4403      	add	r3, r0
 8002da2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002da6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dba:	6819      	ldr	r1, [r3, #0]
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4403      	add	r3, r0
 8002dca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4419      	add	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4403      	add	r3, r0
 8002de0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002de4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d114      	bne.n	8002e16 <PCD_EP_OutXfrComplete_int+0x16a>
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d108      	bne.n	8002e16 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2101      	movs	r1, #1
 8002e12:	f002 fa75 	bl	8005300 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f003 ffdf 	bl	8006de0 <HAL_PCD_DataOutStageCallback>
 8002e22:	e046      	b.n	8002eb2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a26      	ldr	r2, [pc, #152]	; (8002ec0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d124      	bne.n	8002e76 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e42:	461a      	mov	r2, r3
 8002e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e48:	6093      	str	r3, [r2, #8]
 8002e4a:	e032      	b.n	8002eb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e62:	461a      	mov	r2, r3
 8002e64:	2320      	movs	r3, #32
 8002e66:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f003 ffb6 	bl	8006de0 <HAL_PCD_DataOutStageCallback>
 8002e74:	e01d      	b.n	8002eb2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d114      	bne.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d108      	bne.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	f002 fa2d 	bl	8005300 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f003 ff97 	bl	8006de0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	4f54300a 	.word	0x4f54300a
 8002ec0:	4f54310a 	.word	0x4f54310a

08002ec4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	333c      	adds	r3, #60	; 0x3c
 8002edc:	3304      	adds	r3, #4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d90e      	bls.n	8002f18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f10:	461a      	mov	r2, r3
 8002f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f003 ff4f 	bl	8006dbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d90c      	bls.n	8002f40 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d108      	bne.n	8002f40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	f002 f9e0 	bl	8005300 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	4f54300a 	.word	0x4f54300a

08002f50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f6e:	883b      	ldrh	r3, [r7, #0]
 8002f70:	0419      	lsls	r1, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f7c:	e028      	b.n	8002fd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	4413      	add	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e00d      	b.n	8002fae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	3340      	adds	r3, #64	; 0x40
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	3301      	adds	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d3ec      	bcc.n	8002f92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fb8:	883b      	ldrh	r3, [r7, #0]
 8002fba:	0418      	lsls	r0, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6819      	ldr	r1, [r3, #0]
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	4302      	orrs	r2, r0
 8002fc8:	3340      	adds	r3, #64	; 0x40
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e264      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d075      	beq.n	8003122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003036:	4ba3      	ldr	r3, [pc, #652]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d00c      	beq.n	800305c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4ba0      	ldr	r3, [pc, #640]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800304a:	2b08      	cmp	r3, #8
 800304c:	d112      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304e:	4b9d      	ldr	r3, [pc, #628]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305a:	d10b      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	4b99      	ldr	r3, [pc, #612]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d05b      	beq.n	8003120 <HAL_RCC_OscConfig+0x108>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d157      	bne.n	8003120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e23f      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	d106      	bne.n	800308c <HAL_RCC_OscConfig+0x74>
 800307e:	4b91      	ldr	r3, [pc, #580]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a90      	ldr	r2, [pc, #576]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e01d      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x98>
 8003096:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a8a      	ldr	r2, [pc, #552]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a87      	ldr	r2, [pc, #540]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 80030b0:	4b84      	ldr	r3, [pc, #528]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a83      	ldr	r2, [pc, #524]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a80      	ldr	r2, [pc, #512]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe fb18 	bl	8001704 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fe fb14 	bl	8001704 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e204      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0xc0>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe fb04 	bl	8001704 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe fb00 	bl	8001704 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1f0      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	4b6c      	ldr	r3, [pc, #432]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0xe8>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d063      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800312e:	4b65      	ldr	r3, [pc, #404]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b62      	ldr	r3, [pc, #392]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003142:	2b08      	cmp	r3, #8
 8003144:	d11c      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	4b5c      	ldr	r3, [pc, #368]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e1c4      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4952      	ldr	r1, [pc, #328]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	e03a      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b4f      	ldr	r3, [pc, #316]	; (80032c8 <HAL_RCC_OscConfig+0x2b0>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fe fab9 	bl	8001704 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003196:	f7fe fab5 	bl	8001704 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e1a5      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4940      	ldr	r1, [pc, #256]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ca:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <HAL_RCC_OscConfig+0x2b0>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe fa98 	bl	8001704 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fe fa94 	bl	8001704 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e184      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d030      	beq.n	8003264 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_RCC_OscConfig+0x2b4>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe fa78 	bl	8001704 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003218:	f7fe fa74 	bl	8001704 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e164      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x200>
 8003236:	e015      	b.n	8003264 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_OscConfig+0x2b4>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fe fa61 	bl	8001704 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003246:	f7fe fa5d 	bl	8001704 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e14d      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80a0 	beq.w	80033b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x2b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d121      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <HAL_RCC_OscConfig+0x2b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <HAL_RCC_OscConfig+0x2b8>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fe fa23 	bl	8001704 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e011      	b.n	80032e6 <HAL_RCC_OscConfig+0x2ce>
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	42470000 	.word	0x42470000
 80032cc:	42470e80 	.word	0x42470e80
 80032d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d4:	f7fe fa16 	bl	8001704 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e106      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	4b85      	ldr	r3, [pc, #532]	; (80034fc <HAL_RCC_OscConfig+0x4e4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d106      	bne.n	8003308 <HAL_RCC_OscConfig+0x2f0>
 80032fa:	4b81      	ldr	r3, [pc, #516]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a80      	ldr	r2, [pc, #512]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
 8003306:	e01c      	b.n	8003342 <HAL_RCC_OscConfig+0x32a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b05      	cmp	r3, #5
 800330e:	d10c      	bne.n	800332a <HAL_RCC_OscConfig+0x312>
 8003310:	4b7b      	ldr	r3, [pc, #492]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a7a      	ldr	r2, [pc, #488]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
 800331c:	4b78      	ldr	r3, [pc, #480]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	4a77      	ldr	r2, [pc, #476]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	; 0x70
 8003328:	e00b      	b.n	8003342 <HAL_RCC_OscConfig+0x32a>
 800332a:	4b75      	ldr	r3, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a74      	ldr	r2, [pc, #464]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	4b72      	ldr	r3, [pc, #456]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	4a71      	ldr	r2, [pc, #452]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d015      	beq.n	8003376 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fe f9db 	bl	8001704 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	e00a      	b.n	8003368 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003352:	f7fe f9d7 	bl	8001704 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e0c5      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003368:	4b65      	ldr	r3, [pc, #404]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ee      	beq.n	8003352 <HAL_RCC_OscConfig+0x33a>
 8003374:	e014      	b.n	80033a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003376:	f7fe f9c5 	bl	8001704 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fe f9c1 	bl	8001704 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f241 3288 	movw	r2, #5000	; 0x1388
 800338c:	4293      	cmp	r3, r2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0af      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003394:	4b5a      	ldr	r3, [pc, #360]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1ee      	bne.n	800337e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d105      	bne.n	80033b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a6:	4b56      	ldr	r3, [pc, #344]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a55      	ldr	r2, [pc, #340]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 80033ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 809b 	beq.w	80034f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033bc:	4b50      	ldr	r3, [pc, #320]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d05c      	beq.n	8003482 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d141      	bne.n	8003454 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d0:	4b4c      	ldr	r3, [pc, #304]	; (8003504 <HAL_RCC_OscConfig+0x4ec>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d6:	f7fe f995 	bl	8001704 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033de:	f7fe f991 	bl	8001704 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e081      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f0      	bne.n	80033de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	019b      	lsls	r3, r3, #6
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	3b01      	subs	r3, #1
 8003416:	041b      	lsls	r3, r3, #16
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	4937      	ldr	r1, [pc, #220]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003426:	4b37      	ldr	r3, [pc, #220]	; (8003504 <HAL_RCC_OscConfig+0x4ec>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe f96a 	bl	8001704 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe f966 	bl	8001704 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e056      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x41c>
 8003452:	e04e      	b.n	80034f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_RCC_OscConfig+0x4ec>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fe f953 	bl	8001704 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003462:	f7fe f94f 	bl	8001704 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e03f      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x44a>
 8003480:	e037      	b.n	80034f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e032      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d028      	beq.n	80034ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d121      	bne.n	80034ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d11a      	bne.n	80034ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034be:	4013      	ands	r3, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d111      	bne.n	80034ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	3b01      	subs	r3, #1
 80034d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40007000 	.word	0x40007000
 8003500:	40023800 	.word	0x40023800
 8003504:	42470060 	.word	0x42470060

08003508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0cc      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b68      	ldr	r3, [pc, #416]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d90c      	bls.n	8003544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b65      	ldr	r3, [pc, #404]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800357e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d044      	beq.n	8003628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d119      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e06f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e067      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4934      	ldr	r1, [pc, #208]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fe f884 	bl	8001704 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fe f880 	bl	8001704 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e04f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003628:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d20c      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4602      	mov	r2, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	490a      	ldr	r1, [pc, #40]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	5ccb      	ldrb	r3, [r1, r3]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd ffe4 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023c00 	.word	0x40023c00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	080084e0 	.word	0x080084e0
 80036cc:	20000000 	.word	0x20000000
 80036d0:	20000004 	.word	0x20000004

080036d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	607b      	str	r3, [r7, #4]
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	2300      	movs	r3, #0
 80036e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ec:	4b67      	ldr	r3, [pc, #412]	; (800388c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d00d      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	f200 80bd 	bhi.w	8003878 <HAL_RCC_GetSysClockFreq+0x1a4>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x34>
 8003702:	2b04      	cmp	r3, #4
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x3a>
 8003706:	e0b7      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b61      	ldr	r3, [pc, #388]	; (8003890 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800370a:	60bb      	str	r3, [r7, #8]
       break;
 800370c:	e0b7      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800370e:	4b61      	ldr	r3, [pc, #388]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003710:	60bb      	str	r3, [r7, #8]
      break;
 8003712:	e0b4      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003714:	4b5d      	ldr	r3, [pc, #372]	; (800388c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d04d      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372a:	4b58      	ldr	r3, [pc, #352]	; (800388c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	461a      	mov	r2, r3
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	f240 10ff 	movw	r0, #511	; 0x1ff
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	ea02 0800 	and.w	r8, r2, r0
 8003742:	ea03 0901 	and.w	r9, r3, r1
 8003746:	4640      	mov	r0, r8
 8003748:	4649      	mov	r1, r9
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	014b      	lsls	r3, r1, #5
 8003754:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003758:	0142      	lsls	r2, r0, #5
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	ebb0 0008 	subs.w	r0, r0, r8
 8003762:	eb61 0109 	sbc.w	r1, r1, r9
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	018b      	lsls	r3, r1, #6
 8003770:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003774:	0182      	lsls	r2, r0, #6
 8003776:	1a12      	subs	r2, r2, r0
 8003778:	eb63 0301 	sbc.w	r3, r3, r1
 800377c:	f04f 0000 	mov.w	r0, #0
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	00d9      	lsls	r1, r3, #3
 8003786:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800378a:	00d0      	lsls	r0, r2, #3
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	eb12 0208 	adds.w	r2, r2, r8
 8003794:	eb43 0309 	adc.w	r3, r3, r9
 8003798:	f04f 0000 	mov.w	r0, #0
 800379c:	f04f 0100 	mov.w	r1, #0
 80037a0:	0259      	lsls	r1, r3, #9
 80037a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037a6:	0250      	lsls	r0, r2, #9
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	f7fd f9e8 	bl	8000b8c <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4613      	mov	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e04a      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c6:	4b31      	ldr	r3, [pc, #196]	; (800388c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	461a      	mov	r2, r3
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037d6:	f04f 0100 	mov.w	r1, #0
 80037da:	ea02 0400 	and.w	r4, r2, r0
 80037de:	ea03 0501 	and.w	r5, r3, r1
 80037e2:	4620      	mov	r0, r4
 80037e4:	4629      	mov	r1, r5
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	014b      	lsls	r3, r1, #5
 80037f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037f4:	0142      	lsls	r2, r0, #5
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	1b00      	subs	r0, r0, r4
 80037fc:	eb61 0105 	sbc.w	r1, r1, r5
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	018b      	lsls	r3, r1, #6
 800380a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800380e:	0182      	lsls	r2, r0, #6
 8003810:	1a12      	subs	r2, r2, r0
 8003812:	eb63 0301 	sbc.w	r3, r3, r1
 8003816:	f04f 0000 	mov.w	r0, #0
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	00d9      	lsls	r1, r3, #3
 8003820:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003824:	00d0      	lsls	r0, r2, #3
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	1912      	adds	r2, r2, r4
 800382c:	eb45 0303 	adc.w	r3, r5, r3
 8003830:	f04f 0000 	mov.w	r0, #0
 8003834:	f04f 0100 	mov.w	r1, #0
 8003838:	0299      	lsls	r1, r3, #10
 800383a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800383e:	0290      	lsls	r0, r2, #10
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	461a      	mov	r2, r3
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	f7fd f99c 	bl	8000b8c <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4613      	mov	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	3301      	adds	r3, #1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	60bb      	str	r3, [r7, #8]
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800387a:	60bb      	str	r3, [r7, #8]
      break;
 800387c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387e:	68bb      	ldr	r3, [r7, #8]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400
 8003894:	007a1200 	.word	0x007a1200

08003898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_RCC_GetHCLKFreq+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000000 	.word	0x20000000

080038b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b4:	f7ff fff0 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0a9b      	lsrs	r3, r3, #10
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4903      	ldr	r1, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	080084f0 	.word	0x080084f0

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038dc:	f7ff ffdc 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0b5b      	lsrs	r3, r3, #13
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4903      	ldr	r1, [pc, #12]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	080084f0 	.word	0x080084f0

08003900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e03f      	b.n	8003992 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd fdce 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f829 	bl	800399c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a0:	b09f      	sub	sp, #124	; 0x7c
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	68d9      	ldr	r1, [r3, #12]
 80039b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	ea40 0301 	orr.w	r3, r0, r1
 80039bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039e0:	f021 010c 	bic.w	r1, r1, #12
 80039e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ea:	430b      	orrs	r3, r1
 80039ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fa:	6999      	ldr	r1, [r3, #24]
 80039fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	ea40 0301 	orr.w	r3, r0, r1
 8003a04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4bc5      	ldr	r3, [pc, #788]	; (8003d20 <UART_SetConfig+0x384>)
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d004      	beq.n	8003a1a <UART_SetConfig+0x7e>
 8003a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4bc3      	ldr	r3, [pc, #780]	; (8003d24 <UART_SetConfig+0x388>)
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d103      	bne.n	8003a22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a1a:	f7ff ff5d 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8003a1e:	6778      	str	r0, [r7, #116]	; 0x74
 8003a20:	e002      	b.n	8003a28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a22:	f7ff ff45 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 8003a26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a30:	f040 80b6 	bne.w	8003ba0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a36:	461c      	mov	r4, r3
 8003a38:	f04f 0500 	mov.w	r5, #0
 8003a3c:	4622      	mov	r2, r4
 8003a3e:	462b      	mov	r3, r5
 8003a40:	1891      	adds	r1, r2, r2
 8003a42:	6439      	str	r1, [r7, #64]	; 0x40
 8003a44:	415b      	adcs	r3, r3
 8003a46:	647b      	str	r3, [r7, #68]	; 0x44
 8003a48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a4c:	1912      	adds	r2, r2, r4
 8003a4e:	eb45 0303 	adc.w	r3, r5, r3
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f04f 0100 	mov.w	r1, #0
 8003a5a:	00d9      	lsls	r1, r3, #3
 8003a5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a60:	00d0      	lsls	r0, r2, #3
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	1911      	adds	r1, r2, r4
 8003a68:	6639      	str	r1, [r7, #96]	; 0x60
 8003a6a:	416b      	adcs	r3, r5
 8003a6c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	1891      	adds	r1, r2, r2
 8003a7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a7c:	415b      	adcs	r3, r3
 8003a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a88:	f7fd f880 	bl	8000b8c <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4ba5      	ldr	r3, [pc, #660]	; (8003d28 <UART_SetConfig+0x38c>)
 8003a92:	fba3 2302 	umull	r2, r3, r3, r2
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	011e      	lsls	r6, r3, #4
 8003a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a9c:	461c      	mov	r4, r3
 8003a9e:	f04f 0500 	mov.w	r5, #0
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	462b      	mov	r3, r5
 8003aa6:	1891      	adds	r1, r2, r2
 8003aa8:	6339      	str	r1, [r7, #48]	; 0x30
 8003aaa:	415b      	adcs	r3, r3
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
 8003aae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ab2:	1912      	adds	r2, r2, r4
 8003ab4:	eb45 0303 	adc.w	r3, r5, r3
 8003ab8:	f04f 0000 	mov.w	r0, #0
 8003abc:	f04f 0100 	mov.w	r1, #0
 8003ac0:	00d9      	lsls	r1, r3, #3
 8003ac2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ac6:	00d0      	lsls	r0, r2, #3
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	1911      	adds	r1, r2, r4
 8003ace:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ad0:	416b      	adcs	r3, r5
 8003ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	1891      	adds	r1, r2, r2
 8003ae0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ae2:	415b      	adcs	r3, r3
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003aee:	f7fd f84d 	bl	8000b8c <__aeabi_uldivmod>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4b8c      	ldr	r3, [pc, #560]	; (8003d28 <UART_SetConfig+0x38c>)
 8003af8:	fba3 1302 	umull	r1, r3, r3, r2
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	2164      	movs	r1, #100	; 0x64
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	3332      	adds	r3, #50	; 0x32
 8003b0a:	4a87      	ldr	r2, [pc, #540]	; (8003d28 <UART_SetConfig+0x38c>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b18:	441e      	add	r6, r3
 8003b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	1894      	adds	r4, r2, r2
 8003b28:	623c      	str	r4, [r7, #32]
 8003b2a:	415b      	adcs	r3, r3
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b32:	1812      	adds	r2, r2, r0
 8003b34:	eb41 0303 	adc.w	r3, r1, r3
 8003b38:	f04f 0400 	mov.w	r4, #0
 8003b3c:	f04f 0500 	mov.w	r5, #0
 8003b40:	00dd      	lsls	r5, r3, #3
 8003b42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b46:	00d4      	lsls	r4, r2, #3
 8003b48:	4622      	mov	r2, r4
 8003b4a:	462b      	mov	r3, r5
 8003b4c:	1814      	adds	r4, r2, r0
 8003b4e:	653c      	str	r4, [r7, #80]	; 0x50
 8003b50:	414b      	adcs	r3, r1
 8003b52:	657b      	str	r3, [r7, #84]	; 0x54
 8003b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	1891      	adds	r1, r2, r2
 8003b60:	61b9      	str	r1, [r7, #24]
 8003b62:	415b      	adcs	r3, r3
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b6e:	f7fd f80d 	bl	8000b8c <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4b6c      	ldr	r3, [pc, #432]	; (8003d28 <UART_SetConfig+0x38c>)
 8003b78:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	2164      	movs	r1, #100	; 0x64
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	3332      	adds	r3, #50	; 0x32
 8003b8a:	4a67      	ldr	r2, [pc, #412]	; (8003d28 <UART_SetConfig+0x38c>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	f003 0207 	and.w	r2, r3, #7
 8003b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4432      	add	r2, r6
 8003b9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b9e:	e0b9      	b.n	8003d14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba2:	461c      	mov	r4, r3
 8003ba4:	f04f 0500 	mov.w	r5, #0
 8003ba8:	4622      	mov	r2, r4
 8003baa:	462b      	mov	r3, r5
 8003bac:	1891      	adds	r1, r2, r2
 8003bae:	6139      	str	r1, [r7, #16]
 8003bb0:	415b      	adcs	r3, r3
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bb8:	1912      	adds	r2, r2, r4
 8003bba:	eb45 0303 	adc.w	r3, r5, r3
 8003bbe:	f04f 0000 	mov.w	r0, #0
 8003bc2:	f04f 0100 	mov.w	r1, #0
 8003bc6:	00d9      	lsls	r1, r3, #3
 8003bc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bcc:	00d0      	lsls	r0, r2, #3
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	eb12 0804 	adds.w	r8, r2, r4
 8003bd6:	eb43 0905 	adc.w	r9, r3, r5
 8003bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	008b      	lsls	r3, r1, #2
 8003bee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bf2:	0082      	lsls	r2, r0, #2
 8003bf4:	4640      	mov	r0, r8
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	f7fc ffc8 	bl	8000b8c <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4b49      	ldr	r3, [pc, #292]	; (8003d28 <UART_SetConfig+0x38c>)
 8003c02:	fba3 2302 	umull	r2, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	011e      	lsls	r6, r3, #4
 8003c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	1894      	adds	r4, r2, r2
 8003c18:	60bc      	str	r4, [r7, #8]
 8003c1a:	415b      	adcs	r3, r3
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c22:	1812      	adds	r2, r2, r0
 8003c24:	eb41 0303 	adc.w	r3, r1, r3
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	f04f 0500 	mov.w	r5, #0
 8003c30:	00dd      	lsls	r5, r3, #3
 8003c32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c36:	00d4      	lsls	r4, r2, #3
 8003c38:	4622      	mov	r2, r4
 8003c3a:	462b      	mov	r3, r5
 8003c3c:	1814      	adds	r4, r2, r0
 8003c3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c40:	414b      	adcs	r3, r1
 8003c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f04f 0100 	mov.w	r1, #0
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	008b      	lsls	r3, r1, #2
 8003c58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c5c:	0082      	lsls	r2, r0, #2
 8003c5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c62:	f7fc ff93 	bl	8000b8c <__aeabi_uldivmod>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4b2f      	ldr	r3, [pc, #188]	; (8003d28 <UART_SetConfig+0x38c>)
 8003c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	2164      	movs	r1, #100	; 0x64
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	3332      	adds	r3, #50	; 0x32
 8003c7e:	4a2a      	ldr	r2, [pc, #168]	; (8003d28 <UART_SetConfig+0x38c>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c8a:	441e      	add	r6, r3
 8003c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f04f 0100 	mov.w	r1, #0
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	1894      	adds	r4, r2, r2
 8003c9a:	603c      	str	r4, [r7, #0]
 8003c9c:	415b      	adcs	r3, r3
 8003c9e:	607b      	str	r3, [r7, #4]
 8003ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ca4:	1812      	adds	r2, r2, r0
 8003ca6:	eb41 0303 	adc.w	r3, r1, r3
 8003caa:	f04f 0400 	mov.w	r4, #0
 8003cae:	f04f 0500 	mov.w	r5, #0
 8003cb2:	00dd      	lsls	r5, r3, #3
 8003cb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cb8:	00d4      	lsls	r4, r2, #3
 8003cba:	4622      	mov	r2, r4
 8003cbc:	462b      	mov	r3, r5
 8003cbe:	eb12 0a00 	adds.w	sl, r2, r0
 8003cc2:	eb43 0b01 	adc.w	fp, r3, r1
 8003cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f04f 0100 	mov.w	r1, #0
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	008b      	lsls	r3, r1, #2
 8003cda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cde:	0082      	lsls	r2, r0, #2
 8003ce0:	4650      	mov	r0, sl
 8003ce2:	4659      	mov	r1, fp
 8003ce4:	f7fc ff52 	bl	8000b8c <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <UART_SetConfig+0x38c>)
 8003cee:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2164      	movs	r1, #100	; 0x64
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	3332      	adds	r3, #50	; 0x32
 8003d00:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <UART_SetConfig+0x38c>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	f003 020f 	and.w	r2, r3, #15
 8003d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4432      	add	r2, r6
 8003d12:	609a      	str	r2, [r3, #8]
}
 8003d14:	bf00      	nop
 8003d16:	377c      	adds	r7, #124	; 0x7c
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1e:	bf00      	nop
 8003d20:	40011000 	.word	0x40011000
 8003d24:	40011400 	.word	0x40011400
 8003d28:	51eb851f 	.word	0x51eb851f

08003d2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	f107 001c 	add.w	r0, r7, #28
 8003d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d122      	bne.n	8003d8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d105      	bne.n	8003d7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f001 fb1c 	bl	80053bc <USB_CoreReset>
 8003d84:	4603      	mov	r3, r0
 8003d86:	73fb      	strb	r3, [r7, #15]
 8003d88:	e01a      	b.n	8003dc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f001 fb10 	bl	80053bc <USB_CoreReset>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	639a      	str	r2, [r3, #56]	; 0x38
 8003db2:	e005      	b.n	8003dc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10b      	bne.n	8003dde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f043 0206 	orr.w	r2, r3, #6
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f043 0220 	orr.w	r2, r3, #32
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dea:	b004      	add	sp, #16
 8003dec:	4770      	bx	lr
	...

08003df0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d165      	bne.n	8003ed0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4a41      	ldr	r2, [pc, #260]	; (8003f0c <USB_SetTurnaroundTime+0x11c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d906      	bls.n	8003e1a <USB_SetTurnaroundTime+0x2a>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4a40      	ldr	r2, [pc, #256]	; (8003f10 <USB_SetTurnaroundTime+0x120>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d202      	bcs.n	8003e1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e14:	230f      	movs	r3, #15
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e062      	b.n	8003ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4a3c      	ldr	r2, [pc, #240]	; (8003f10 <USB_SetTurnaroundTime+0x120>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d306      	bcc.n	8003e30 <USB_SetTurnaroundTime+0x40>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	4a3b      	ldr	r2, [pc, #236]	; (8003f14 <USB_SetTurnaroundTime+0x124>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d202      	bcs.n	8003e30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e2a:	230e      	movs	r3, #14
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e057      	b.n	8003ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4a38      	ldr	r2, [pc, #224]	; (8003f14 <USB_SetTurnaroundTime+0x124>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d306      	bcc.n	8003e46 <USB_SetTurnaroundTime+0x56>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4a37      	ldr	r2, [pc, #220]	; (8003f18 <USB_SetTurnaroundTime+0x128>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d202      	bcs.n	8003e46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e40:	230d      	movs	r3, #13
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	e04c      	b.n	8003ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4a33      	ldr	r2, [pc, #204]	; (8003f18 <USB_SetTurnaroundTime+0x128>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d306      	bcc.n	8003e5c <USB_SetTurnaroundTime+0x6c>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4a32      	ldr	r2, [pc, #200]	; (8003f1c <USB_SetTurnaroundTime+0x12c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d802      	bhi.n	8003e5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e56:	230c      	movs	r3, #12
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e041      	b.n	8003ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4a2f      	ldr	r2, [pc, #188]	; (8003f1c <USB_SetTurnaroundTime+0x12c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d906      	bls.n	8003e72 <USB_SetTurnaroundTime+0x82>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4a2e      	ldr	r2, [pc, #184]	; (8003f20 <USB_SetTurnaroundTime+0x130>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d802      	bhi.n	8003e72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e6c:	230b      	movs	r3, #11
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e036      	b.n	8003ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4a2a      	ldr	r2, [pc, #168]	; (8003f20 <USB_SetTurnaroundTime+0x130>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d906      	bls.n	8003e88 <USB_SetTurnaroundTime+0x98>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4a29      	ldr	r2, [pc, #164]	; (8003f24 <USB_SetTurnaroundTime+0x134>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d802      	bhi.n	8003e88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e82:	230a      	movs	r3, #10
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e02b      	b.n	8003ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4a26      	ldr	r2, [pc, #152]	; (8003f24 <USB_SetTurnaroundTime+0x134>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d906      	bls.n	8003e9e <USB_SetTurnaroundTime+0xae>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <USB_SetTurnaroundTime+0x138>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d202      	bcs.n	8003e9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e98:	2309      	movs	r3, #9
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	e020      	b.n	8003ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4a21      	ldr	r2, [pc, #132]	; (8003f28 <USB_SetTurnaroundTime+0x138>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d306      	bcc.n	8003eb4 <USB_SetTurnaroundTime+0xc4>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <USB_SetTurnaroundTime+0x13c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d802      	bhi.n	8003eb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003eae:	2308      	movs	r3, #8
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e015      	b.n	8003ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <USB_SetTurnaroundTime+0x13c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d906      	bls.n	8003eca <USB_SetTurnaroundTime+0xda>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <USB_SetTurnaroundTime+0x140>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d202      	bcs.n	8003eca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ec4:	2307      	movs	r3, #7
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e00a      	b.n	8003ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003eca:	2306      	movs	r3, #6
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	e007      	b.n	8003ee0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d102      	bne.n	8003edc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003ed6:	2309      	movs	r3, #9
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e001      	b.n	8003ee0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003edc:	2309      	movs	r3, #9
 8003ede:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	029b      	lsls	r3, r3, #10
 8003ef4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	00d8acbf 	.word	0x00d8acbf
 8003f10:	00e4e1c0 	.word	0x00e4e1c0
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	01067380 	.word	0x01067380
 8003f1c:	011a499f 	.word	0x011a499f
 8003f20:	01312cff 	.word	0x01312cff
 8003f24:	014ca43f 	.word	0x014ca43f
 8003f28:	016e3600 	.word	0x016e3600
 8003f2c:	01a6ab1f 	.word	0x01a6ab1f
 8003f30:	01e84800 	.word	0x01e84800

08003f34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f043 0201 	orr.w	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f023 0201 	bic.w	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d115      	bne.n	8003fc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	f7fd fbb8 	bl	800171c <HAL_Delay>
      ms++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f001 f972 	bl	800529c <USB_GetMode>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d01e      	beq.n	8003ffc <USB_SetCurrentMode+0x84>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b31      	cmp	r3, #49	; 0x31
 8003fc2:	d9f0      	bls.n	8003fa6 <USB_SetCurrentMode+0x2e>
 8003fc4:	e01a      	b.n	8003ffc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fc6:	78fb      	ldrb	r3, [r7, #3]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d115      	bne.n	8003ff8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fd8:	2001      	movs	r0, #1
 8003fda:	f7fd fb9f 	bl	800171c <HAL_Delay>
      ms++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f001 f959 	bl	800529c <USB_GetMode>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <USB_SetCurrentMode+0x84>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b31      	cmp	r3, #49	; 0x31
 8003ff4:	d9f0      	bls.n	8003fd8 <USB_SetCurrentMode+0x60>
 8003ff6:	e001      	b.n	8003ffc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e005      	b.n	8004008 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b32      	cmp	r3, #50	; 0x32
 8004000:	d101      	bne.n	8004006 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004010:	b084      	sub	sp, #16
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800401e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	e009      	b.n	8004044 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	3340      	adds	r3, #64	; 0x40
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	2200      	movs	r2, #0
 800403c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	3301      	adds	r3, #1
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	2b0e      	cmp	r3, #14
 8004048:	d9f2      	bls.n	8004030 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800404a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d11c      	bne.n	800408a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800405e:	f043 0302 	orr.w	r3, r3, #2
 8004062:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
 8004088:	e00b      	b.n	80040a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040a8:	461a      	mov	r2, r3
 80040aa:	2300      	movs	r3, #0
 80040ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b4:	4619      	mov	r1, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040bc:	461a      	mov	r2, r3
 80040be:	680b      	ldr	r3, [r1, #0]
 80040c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d10c      	bne.n	80040e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d104      	bne.n	80040d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040ce:	2100      	movs	r1, #0
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f945 	bl	8004360 <USB_SetDevSpeed>
 80040d6:	e008      	b.n	80040ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040d8:	2101      	movs	r1, #1
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f940 	bl	8004360 <USB_SetDevSpeed>
 80040e0:	e003      	b.n	80040ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040e2:	2103      	movs	r1, #3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f93b 	bl	8004360 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040ea:	2110      	movs	r1, #16
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f8f3 	bl	80042d8 <USB_FlushTxFifo>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f90f 	bl	8004320 <USB_FlushRxFifo>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	461a      	mov	r2, r3
 8004114:	2300      	movs	r3, #0
 8004116:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411e:	461a      	mov	r2, r3
 8004120:	2300      	movs	r3, #0
 8004122:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412a:	461a      	mov	r2, r3
 800412c:	2300      	movs	r3, #0
 800412e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	e043      	b.n	80041be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800414c:	d118      	bne.n	8004180 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004160:	461a      	mov	r2, r3
 8004162:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	e013      	b.n	8004192 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004176:	461a      	mov	r2, r3
 8004178:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e008      	b.n	8004192 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	461a      	mov	r2, r3
 800418e:	2300      	movs	r3, #0
 8004190:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	461a      	mov	r2, r3
 80041a0:	2300      	movs	r3, #0
 80041a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b0:	461a      	mov	r2, r3
 80041b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	3301      	adds	r3, #1
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d3b7      	bcc.n	8004136 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	e043      	b.n	8004254 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041e2:	d118      	bne.n	8004216 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f6:	461a      	mov	r2, r3
 80041f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e013      	b.n	8004228 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	461a      	mov	r2, r3
 800420e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	e008      	b.n	8004228 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004222:	461a      	mov	r2, r3
 8004224:	2300      	movs	r3, #0
 8004226:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	461a      	mov	r2, r3
 8004236:	2300      	movs	r3, #0
 8004238:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	461a      	mov	r2, r3
 8004248:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800424c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	3301      	adds	r3, #1
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	429a      	cmp	r2, r3
 800425a:	d3b7      	bcc.n	80041cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800426a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800426e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800427c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f043 0210 	orr.w	r2, r3, #16
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <USB_DevInit+0x2c4>)
 8004296:	4313      	orrs	r3, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800429c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f043 0208 	orr.w	r2, r3, #8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d107      	bne.n	80042c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042bc:	f043 0304 	orr.w	r3, r3, #4
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042d0:	b004      	add	sp, #16
 80042d2:	4770      	bx	lr
 80042d4:	803c3800 	.word	0x803c3800

080042d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	019b      	lsls	r3, r3, #6
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3301      	adds	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	4a08      	ldr	r2, [pc, #32]	; (800431c <USB_FlushTxFifo+0x44>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e006      	b.n	8004310 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b20      	cmp	r3, #32
 800430c:	d0f1      	beq.n	80042f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	00030d40 	.word	0x00030d40

08004320 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2210      	movs	r2, #16
 8004330:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3301      	adds	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	4a08      	ldr	r2, [pc, #32]	; (800435c <USB_FlushRxFifo+0x3c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e006      	b.n	8004350 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b10      	cmp	r3, #16
 800434c:	d0f1      	beq.n	8004332 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	00030d40 	.word	0x00030d40

08004360 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004392:	b480      	push	{r7}
 8004394:	b087      	sub	sp, #28
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0306 	and.w	r3, r3, #6
 80043aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80043b2:	2300      	movs	r3, #0
 80043b4:	75fb      	strb	r3, [r7, #23]
 80043b6:	e00a      	b.n	80043ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d002      	beq.n	80043c4 <USB_GetDevSpeed+0x32>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b06      	cmp	r3, #6
 80043c2:	d102      	bne.n	80043ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043c4:	2302      	movs	r3, #2
 80043c6:	75fb      	strb	r3, [r7, #23]
 80043c8:	e001      	b.n	80043ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043ca:	230f      	movs	r3, #15
 80043cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	785b      	ldrb	r3, [r3, #1]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d13a      	bne.n	800446e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	b29b      	uxth	r3, r3
 8004410:	68f9      	ldr	r1, [r7, #12]
 8004412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004416:	4313      	orrs	r3, r2
 8004418:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d155      	bne.n	80044dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	78db      	ldrb	r3, [r3, #3]
 800444a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800444c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	059b      	lsls	r3, r3, #22
 8004452:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004454:	4313      	orrs	r3, r2
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e036      	b.n	80044dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	2101      	movs	r1, #1
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800448c:	4313      	orrs	r3, r2
 800448e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11a      	bne.n	80044dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	78db      	ldrb	r3, [r3, #3]
 80044c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044c2:	430b      	orrs	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	785b      	ldrb	r3, [r3, #1]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d161      	bne.n	80045cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800451a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800451e:	d11f      	bne.n	8004560 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	440a      	add	r2, r1
 8004536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800453e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	0151      	lsls	r1, r2, #5
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	440a      	add	r2, r1
 8004556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800455a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800455e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	2101      	movs	r1, #1
 8004572:	fa01 f303 	lsl.w	r3, r1, r3
 8004576:	b29b      	uxth	r3, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004580:	4013      	ands	r3, r2
 8004582:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	2101      	movs	r1, #1
 8004596:	fa01 f303 	lsl.w	r3, r1, r3
 800459a:	b29b      	uxth	r3, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a4:	4013      	ands	r3, r2
 80045a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	0159      	lsls	r1, r3, #5
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	440b      	add	r3, r1
 80045be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c2:	4619      	mov	r1, r3
 80045c4:	4b35      	ldr	r3, [pc, #212]	; (800469c <USB_DeactivateEndpoint+0x1b0>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
 80045ca:	e060      	b.n	800468e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045e2:	d11f      	bne.n	8004624 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	0151      	lsls	r1, r2, #5
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	440a      	add	r2, r1
 80045fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004602:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004622:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	2101      	movs	r1, #1
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	041b      	lsls	r3, r3, #16
 800463c:	43db      	mvns	r3, r3
 800463e:	68f9      	ldr	r1, [r7, #12]
 8004640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004644:	4013      	ands	r3, r2
 8004646:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	43db      	mvns	r3, r3
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004668:	4013      	ands	r3, r2
 800466a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	0159      	lsls	r1, r3, #5
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	440b      	add	r3, r1
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	4619      	mov	r1, r3
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <USB_DeactivateEndpoint+0x1b4>)
 800468a:	4013      	ands	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	ec337800 	.word	0xec337800
 80046a0:	eff37800 	.word	0xeff37800

080046a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	; 0x28
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	4613      	mov	r3, r2
 80046b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	785b      	ldrb	r3, [r3, #1]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	f040 815c 	bne.w	800497e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d132      	bne.n	8004734 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	0151      	lsls	r1, r2, #5
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	440a      	add	r2, r1
 80046e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472c:	0cdb      	lsrs	r3, r3, #19
 800472e:	04db      	lsls	r3, r3, #19
 8004730:	6113      	str	r3, [r2, #16]
 8004732:	e074      	b.n	800481e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474e:	0cdb      	lsrs	r3, r3, #19
 8004750:	04db      	lsls	r3, r3, #19
 8004752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004772:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004776:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6959      	ldr	r1, [r3, #20]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	440b      	add	r3, r1
 8004790:	1e59      	subs	r1, r3, #1
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	fbb1 f3f3 	udiv	r3, r1, r3
 800479a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800479c:	4b9d      	ldr	r3, [pc, #628]	; (8004a14 <USB_EPStartXfer+0x370>)
 800479e:	400b      	ands	r3, r1
 80047a0:	69b9      	ldr	r1, [r7, #24]
 80047a2:	0148      	lsls	r0, r1, #5
 80047a4:	69f9      	ldr	r1, [r7, #28]
 80047a6:	4401      	add	r1, r0
 80047a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047ac:	4313      	orrs	r3, r2
 80047ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c6:	69b9      	ldr	r1, [r7, #24]
 80047c8:	0148      	lsls	r0, r1, #5
 80047ca:	69f9      	ldr	r1, [r7, #28]
 80047cc:	4401      	add	r1, r0
 80047ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047d2:	4313      	orrs	r3, r2
 80047d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	78db      	ldrb	r3, [r3, #3]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d11f      	bne.n	800481e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	0151      	lsls	r1, r2, #5
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	440a      	add	r2, r1
 80047f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80047fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004818:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800481c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d14b      	bne.n	80048bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004838:	461a      	mov	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	78db      	ldrb	r3, [r3, #3]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d128      	bne.n	800489a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d110      	bne.n	800487a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	440a      	add	r2, r1
 800486e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004872:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	e00f      	b.n	800489a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	0151      	lsls	r1, r2, #5
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	440a      	add	r2, r1
 8004890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004898:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	0151      	lsls	r1, r2, #5
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	440a      	add	r2, r1
 80048b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	e12f      	b.n	8004b1c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	78db      	ldrb	r3, [r3, #3]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d015      	beq.n	8004910 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8117 	beq.w	8004b1c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	2101      	movs	r1, #1
 8004900:	fa01 f303 	lsl.w	r3, r1, r3
 8004904:	69f9      	ldr	r1, [r7, #28]
 8004906:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800490a:	4313      	orrs	r3, r2
 800490c:	634b      	str	r3, [r1, #52]	; 0x34
 800490e:	e105      	b.n	8004b1c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d110      	bne.n	8004942 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	e00f      	b.n	8004962 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	0151      	lsls	r1, r2, #5
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	440a      	add	r2, r1
 8004958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004960:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	68d9      	ldr	r1, [r3, #12]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	781a      	ldrb	r2, [r3, #0]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	b298      	uxth	r0, r3
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	4603      	mov	r3, r0
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 fa2b 	bl	8004dd2 <USB_WritePacket>
 800497c:	e0ce      	b.n	8004b1c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	0151      	lsls	r1, r2, #5
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	440a      	add	r2, r1
 8004994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004998:	0cdb      	lsrs	r3, r3, #19
 800499a:	04db      	lsls	r3, r3, #19
 800499c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	0151      	lsls	r1, r2, #5
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	440a      	add	r2, r1
 80049b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d126      	bne.n	8004a18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e0:	69b9      	ldr	r1, [r7, #24]
 80049e2:	0148      	lsls	r0, r1, #5
 80049e4:	69f9      	ldr	r1, [r7, #28]
 80049e6:	4401      	add	r1, r0
 80049e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049ec:	4313      	orrs	r3, r2
 80049ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	0151      	lsls	r1, r2, #5
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	440a      	add	r2, r1
 8004a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a0e:	6113      	str	r3, [r2, #16]
 8004a10:	e036      	b.n	8004a80 <USB_EPStartXfer+0x3dc>
 8004a12:	bf00      	nop
 8004a14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	695a      	ldr	r2, [r3, #20]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4413      	add	r3, r2
 8004a22:	1e5a      	subs	r2, r3, #1
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	8afb      	ldrh	r3, [r7, #22]
 8004a3e:	04d9      	lsls	r1, r3, #19
 8004a40:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <USB_EPStartXfer+0x484>)
 8004a42:	400b      	ands	r3, r1
 8004a44:	69b9      	ldr	r1, [r7, #24]
 8004a46:	0148      	lsls	r0, r1, #5
 8004a48:	69f9      	ldr	r1, [r7, #28]
 8004a4a:	4401      	add	r1, r0
 8004a4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a50:	4313      	orrs	r3, r2
 8004a52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	8af9      	ldrh	r1, [r7, #22]
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a70:	69b9      	ldr	r1, [r7, #24]
 8004a72:	0148      	lsls	r0, r1, #5
 8004a74:	69f9      	ldr	r1, [r7, #28]
 8004a76:	4401      	add	r1, r0
 8004a78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d10d      	bne.n	8004aa2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	68d9      	ldr	r1, [r3, #12]
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	460a      	mov	r2, r1
 8004aa0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	78db      	ldrb	r3, [r3, #3]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d128      	bne.n	8004afc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d110      	bne.n	8004adc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e00f      	b.n	8004afc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3720      	adds	r7, #32
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	1ff80000 	.word	0x1ff80000

08004b2c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	4613      	mov	r3, r2
 8004b38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	f040 80cd 	bne.w	8004ce8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d132      	bne.n	8004bbc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	0151      	lsls	r1, r2, #5
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb4:	0cdb      	lsrs	r3, r3, #19
 8004bb6:	04db      	lsls	r3, r3, #19
 8004bb8:	6113      	str	r3, [r2, #16]
 8004bba:	e04e      	b.n	8004c5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd6:	0cdb      	lsrs	r3, r3, #19
 8004bd8:	04db      	lsls	r3, r3, #19
 8004bda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bfa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bfe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d903      	bls.n	8004c14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4a:	6939      	ldr	r1, [r7, #16]
 8004c4c:	0148      	lsls	r0, r1, #5
 8004c4e:	6979      	ldr	r1, [r7, #20]
 8004c50:	4401      	add	r1, r0
 8004c52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c56:	4313      	orrs	r3, r2
 8004c58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d11e      	bne.n	8004c9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c74:	461a      	mov	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	e092      	b.n	8004dc4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cbc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d07e      	beq.n	8004dc4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cdc:	6979      	ldr	r1, [r7, #20]
 8004cde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	634b      	str	r3, [r1, #52]	; 0x34
 8004ce6:	e06d      	b.n	8004dc4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d02:	0cdb      	lsrs	r3, r3, #19
 8004d04:	04db      	lsls	r3, r3, #19
 8004d06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	0151      	lsls	r1, r2, #5
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d2a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d72:	6939      	ldr	r1, [r7, #16]
 8004d74:	0148      	lsls	r0, r1, #5
 8004d76:	6979      	ldr	r1, [r7, #20]
 8004d78:	4401      	add	r1, r0
 8004d7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d10d      	bne.n	8004da4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	68d9      	ldr	r1, [r3, #12]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	460a      	mov	r2, r1
 8004da2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b089      	sub	sp, #36	; 0x24
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	4611      	mov	r1, r2
 8004dde:	461a      	mov	r2, r3
 8004de0:	460b      	mov	r3, r1
 8004de2:	71fb      	strb	r3, [r7, #7]
 8004de4:	4613      	mov	r3, r2
 8004de6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004df0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d123      	bne.n	8004e40 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004df8:	88bb      	ldrh	r3, [r7, #4]
 8004dfa:	3303      	adds	r3, #3
 8004dfc:	089b      	lsrs	r3, r3, #2
 8004dfe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	e018      	b.n	8004e38 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	031a      	lsls	r2, r3, #12
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e12:	461a      	mov	r2, r3
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	3301      	adds	r3, #1
 8004e24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	3301      	adds	r3, #1
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d3e2      	bcc.n	8004e06 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3724      	adds	r7, #36	; 0x24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b08b      	sub	sp, #44	; 0x2c
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e74:	2300      	movs	r3, #0
 8004e76:	623b      	str	r3, [r7, #32]
 8004e78:	e014      	b.n	8004ea4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	3301      	adds	r3, #1
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	3301      	adds	r3, #1
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	3301      	adds	r3, #1
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	623b      	str	r3, [r7, #32]
 8004ea4:	6a3a      	ldr	r2, [r7, #32]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d3e6      	bcc.n	8004e7a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004eac:	8bfb      	ldrh	r3, [r7, #30]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01e      	beq.n	8004ef0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f107 0310 	add.w	r3, r7, #16
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	701a      	strb	r2, [r3, #0]
      i++;
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	3301      	adds	r3, #1
 8004edc:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004ee4:	8bfb      	ldrh	r3, [r7, #30]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004eea:	8bfb      	ldrh	r3, [r7, #30]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1ea      	bne.n	8004ec6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	372c      	adds	r7, #44	; 0x2c
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b085      	sub	sp, #20
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	785b      	ldrb	r3, [r3, #1]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d12c      	bne.n	8004f74 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	db12      	blt.n	8004f52 <USB_EPSetStall+0x54>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00f      	beq.n	8004f52 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f50:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	e02b      	b.n	8004fcc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	db12      	blt.n	8004fac <USB_EPSetStall+0xae>
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00f      	beq.n	8004fac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004faa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d128      	bne.n	8005048 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005010:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005014:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	78db      	ldrb	r3, [r3, #3]
 800501a:	2b03      	cmp	r3, #3
 800501c:	d003      	beq.n	8005026 <USB_EPClearStall+0x4c>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	78db      	ldrb	r3, [r3, #3]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d138      	bne.n	8005098 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	440a      	add	r2, r1
 800503c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e027      	b.n	8005098 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005062:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005066:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	78db      	ldrb	r3, [r3, #3]
 800506c:	2b03      	cmp	r3, #3
 800506e:	d003      	beq.n	8005078 <USB_EPClearStall+0x9e>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	78db      	ldrb	r3, [r3, #3]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d10f      	bne.n	8005098 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	440a      	add	r2, r1
 800508e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005096:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050c8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80050da:	68f9      	ldr	r1, [r7, #12]
 80050dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050e0:	4313      	orrs	r3, r2
 80050e2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800510c:	f023 0303 	bic.w	r3, r3, #3
 8005110:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005120:	f023 0302 	bic.w	r3, r3, #2
 8005124:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800514e:	f023 0303 	bic.w	r3, r3, #3
 8005152:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005162:	f043 0302 	orr.w	r3, r3, #2
 8005166:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4013      	ands	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800518e:	68fb      	ldr	r3, [r7, #12]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	4013      	ands	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	0c1b      	lsrs	r3, r3, #16
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	4013      	ands	r3, r2
 80051f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	b29b      	uxth	r3, r3
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	4013      	ands	r3, r2
 8005230:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005232:	68bb      	ldr	r3, [r7, #8]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
 8005270:	01db      	lsls	r3, r3, #7
 8005272:	b2db      	uxtb	r3, r3
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4013      	ands	r3, r2
 800528c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800528e:	68bb      	ldr	r3, [r7, #8]
}
 8005290:	4618      	mov	r0, r3
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	f003 0301 	and.w	r3, r3, #1
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80052d6:	f023 0307 	bic.w	r3, r3, #7
 80052da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	460b      	mov	r3, r1
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	333c      	adds	r3, #60	; 0x3c
 8005316:	3304      	adds	r3, #4
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4a26      	ldr	r2, [pc, #152]	; (80053b8 <USB_EP0_OutStart+0xb8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d90a      	bls.n	800533a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005334:	d101      	bne.n	800533a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e037      	b.n	80053aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005340:	461a      	mov	r2, r3
 8005342:	2300      	movs	r3, #0
 8005344:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005358:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005368:	f043 0318 	orr.w	r3, r3, #24
 800536c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005380:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005382:	7afb      	ldrb	r3, [r7, #11]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10f      	bne.n	80053a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538e:	461a      	mov	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80053a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	4f54300a 	.word	0x4f54300a

080053bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3301      	adds	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	4a13      	ldr	r2, [pc, #76]	; (800541c <USB_CoreReset+0x60>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d901      	bls.n	80053d8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e01a      	b.n	800540e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	daf3      	bge.n	80053c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f043 0201 	orr.w	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3301      	adds	r3, #1
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	4a09      	ldr	r2, [pc, #36]	; (800541c <USB_CoreReset+0x60>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d901      	bls.n	8005400 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e006      	b.n	800540e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b01      	cmp	r3, #1
 800540a:	d0f1      	beq.n	80053f0 <USB_CoreReset+0x34>

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	00030d40 	.word	0x00030d40

08005420 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800542c:	2010      	movs	r0, #16
 800542e:	f001 ff2f 	bl	8007290 <USBD_static_malloc>
 8005432:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d105      	bne.n	8005446 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005442:	2302      	movs	r3, #2
 8005444:	e01b      	b.n	800547e <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	7c1b      	ldrb	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2207      	movs	r2, #7
 800545a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800545c:	e002      	b.n	8005464 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	220a      	movs	r2, #10
 8005462:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005464:	2304      	movs	r3, #4
 8005466:	2203      	movs	r2, #3
 8005468:	2181      	movs	r1, #129	; 0x81
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f001 fdff 	bl	800706e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005492:	2181      	movs	r1, #129	; 0x81
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f001 fe10 	bl	80070ba <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d009      	beq.n	80054c4 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 fef8 	bl	80072ac <USBD_static_free>
    pdev->pClassData = NULL;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054e0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e0e8      	b.n	80056c6 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d046      	beq.n	800558e <USBD_HID_Setup+0xbe>
 8005500:	2b20      	cmp	r3, #32
 8005502:	f040 80d8 	bne.w	80056b6 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	3b02      	subs	r3, #2
 800550c:	2b09      	cmp	r3, #9
 800550e:	d836      	bhi.n	800557e <USBD_HID_Setup+0xae>
 8005510:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <USBD_HID_Setup+0x48>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	0800556f 	.word	0x0800556f
 800551c:	0800554f 	.word	0x0800554f
 8005520:	0800557f 	.word	0x0800557f
 8005524:	0800557f 	.word	0x0800557f
 8005528:	0800557f 	.word	0x0800557f
 800552c:	0800557f 	.word	0x0800557f
 8005530:	0800557f 	.word	0x0800557f
 8005534:	0800557f 	.word	0x0800557f
 8005538:	0800555d 	.word	0x0800555d
 800553c:	08005541 	.word	0x08005541
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	885b      	ldrh	r3, [r3, #2]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	601a      	str	r2, [r3, #0]
          break;
 800554c:	e01e      	b.n	800558c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f001 fa36 	bl	80069c6 <USBD_CtlSendData>
          break;
 800555a:	e017      	b.n	800558c <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	885b      	ldrh	r3, [r3, #2]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	b29b      	uxth	r3, r3
 8005564:	b2db      	uxtb	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	605a      	str	r2, [r3, #4]
          break;
 800556c:	e00e      	b.n	800558c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3304      	adds	r3, #4
 8005572:	2201      	movs	r2, #1
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f001 fa25 	bl	80069c6 <USBD_CtlSendData>
          break;
 800557c:	e006      	b.n	800558c <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f001 f9af 	bl	80068e4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005586:	2303      	movs	r3, #3
 8005588:	75fb      	strb	r3, [r7, #23]
          break;
 800558a:	bf00      	nop
      }
      break;
 800558c:	e09a      	b.n	80056c4 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	2b0b      	cmp	r3, #11
 8005594:	f200 8086 	bhi.w	80056a4 <USBD_HID_Setup+0x1d4>
 8005598:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <USBD_HID_Setup+0xd0>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055d1 	.word	0x080055d1
 80055a4:	080056b3 	.word	0x080056b3
 80055a8:	080056a5 	.word	0x080056a5
 80055ac:	080056a5 	.word	0x080056a5
 80055b0:	080056a5 	.word	0x080056a5
 80055b4:	080056a5 	.word	0x080056a5
 80055b8:	080055fb 	.word	0x080055fb
 80055bc:	080056a5 	.word	0x080056a5
 80055c0:	080056a5 	.word	0x080056a5
 80055c4:	080056a5 	.word	0x080056a5
 80055c8:	08005653 	.word	0x08005653
 80055cc:	0800567d 	.word	0x0800567d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d107      	bne.n	80055ec <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055dc:	f107 030a 	add.w	r3, r7, #10
 80055e0:	2202      	movs	r2, #2
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f001 f9ee 	bl	80069c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055ea:	e063      	b.n	80056b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f001 f978 	bl	80068e4 <USBD_CtlError>
            ret = USBD_FAIL;
 80055f4:	2303      	movs	r3, #3
 80055f6:	75fb      	strb	r3, [r7, #23]
          break;
 80055f8:	e05c      	b.n	80056b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	885b      	ldrh	r3, [r3, #2]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b22      	cmp	r3, #34	; 0x22
 8005604:	d108      	bne.n	8005618 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	88db      	ldrh	r3, [r3, #6]
 800560a:	2b4a      	cmp	r3, #74	; 0x4a
 800560c:	bf28      	it	cs
 800560e:	234a      	movcs	r3, #74	; 0x4a
 8005610:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005612:	4b2f      	ldr	r3, [pc, #188]	; (80056d0 <USBD_HID_Setup+0x200>)
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	e015      	b.n	8005644 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	885b      	ldrh	r3, [r3, #2]
 800561c:	0a1b      	lsrs	r3, r3, #8
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b21      	cmp	r3, #33	; 0x21
 8005622:	d108      	bne.n	8005636 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8005624:	4b2b      	ldr	r3, [pc, #172]	; (80056d4 <USBD_HID_Setup+0x204>)
 8005626:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	88db      	ldrh	r3, [r3, #6]
 800562c:	2b09      	cmp	r3, #9
 800562e:	bf28      	it	cs
 8005630:	2309      	movcs	r3, #9
 8005632:	82bb      	strh	r3, [r7, #20]
 8005634:	e006      	b.n	8005644 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005636:	6839      	ldr	r1, [r7, #0]
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 f953 	bl	80068e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800563e:	2303      	movs	r3, #3
 8005640:	75fb      	strb	r3, [r7, #23]
            break;
 8005642:	e037      	b.n	80056b4 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005644:	8abb      	ldrh	r3, [r7, #20]
 8005646:	461a      	mov	r2, r3
 8005648:	6939      	ldr	r1, [r7, #16]
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f001 f9bb 	bl	80069c6 <USBD_CtlSendData>
          break;
 8005650:	e030      	b.n	80056b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b03      	cmp	r3, #3
 800565c:	d107      	bne.n	800566e <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3308      	adds	r3, #8
 8005662:	2201      	movs	r2, #1
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 f9ad 	bl	80069c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800566c:	e022      	b.n	80056b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 f937 	bl	80068e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005676:	2303      	movs	r3, #3
 8005678:	75fb      	strb	r3, [r7, #23]
          break;
 800567a:	e01b      	b.n	80056b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b03      	cmp	r3, #3
 8005686:	d106      	bne.n	8005696 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	885b      	ldrh	r3, [r3, #2]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	461a      	mov	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005694:	e00e      	b.n	80056b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 f923 	bl	80068e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800569e:	2303      	movs	r3, #3
 80056a0:	75fb      	strb	r3, [r7, #23]
          break;
 80056a2:	e007      	b.n	80056b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056a4:	6839      	ldr	r1, [r7, #0]
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 f91c 	bl	80068e4 <USBD_CtlError>
          ret = USBD_FAIL;
 80056ac:	2303      	movs	r3, #3
 80056ae:	75fb      	strb	r3, [r7, #23]
          break;
 80056b0:	e000      	b.n	80056b4 <USBD_HID_Setup+0x1e4>
          break;
 80056b2:	bf00      	nop
      }
      break;
 80056b4:	e006      	b.n	80056c4 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80056b6:	6839      	ldr	r1, [r7, #0]
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f001 f913 	bl	80068e4 <USBD_CtlError>
      ret = USBD_FAIL;
 80056be:	2303      	movs	r3, #3
 80056c0:	75fb      	strb	r3, [r7, #23]
      break;
 80056c2:	bf00      	nop
  }

  return (uint8_t)ret;
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200000c8 	.word	0x200000c8
 80056d4:	200000b0 	.word	0x200000b0

080056d8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	4613      	mov	r3, r2
 80056e4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056ec:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e013      	b.n	8005720 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b03      	cmp	r3, #3
 8005702:	d10c      	bne.n	800571e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	7b1b      	ldrb	r3, [r3, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d108      	bne.n	800571e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2201      	movs	r2, #1
 8005710:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	2181      	movs	r1, #129	; 0x81
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f001 fd76 	bl	800720a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7c1b      	ldrb	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005738:	2308      	movs	r3, #8
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	e001      	b.n	8005742 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 800573e:	230a      	movs	r3, #10
 8005740:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8005742:	68fb      	ldr	r3, [r7, #12]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2222      	movs	r2, #34	; 0x22
 800575c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800575e:	4b03      	ldr	r3, [pc, #12]	; (800576c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	20000044 	.word	0x20000044

08005770 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2222      	movs	r2, #34	; 0x22
 800577c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800577e:	4b03      	ldr	r3, [pc, #12]	; (800578c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	20000068 	.word	0x20000068

08005790 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2222      	movs	r2, #34	; 0x22
 800579c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800579e:	4b03      	ldr	r3, [pc, #12]	; (80057ac <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	2000008c 	.word	0x2000008c

080057b0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057c2:	2200      	movs	r2, #0
 80057c4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	220a      	movs	r2, #10
 80057e0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80057e2:	4b03      	ldr	r3, [pc, #12]	; (80057f0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	200000bc 	.word	0x200000bc

080057f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	4613      	mov	r3, r2
 8005800:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005808:	2303      	movs	r3, #3
 800580a:	e01f      	b.n	800584c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	79fa      	ldrb	r2, [r7, #7]
 800583e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f001 fbad 	bl	8006fa0 <USBD_LL_Init>
 8005846:	4603      	mov	r3, r0
 8005848:	75fb      	strb	r3, [r7, #23]

  return ret;
 800584a:	7dfb      	ldrb	r3, [r7, #23]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005868:	2303      	movs	r3, #3
 800586a:	e016      	b.n	800589a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	f107 020e 	add.w	r2, r7, #14
 800588c:	4610      	mov	r0, r2
 800588e:	4798      	blx	r3
 8005890:	4602      	mov	r2, r0
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b082      	sub	sp, #8
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f001 fbc4 	bl	8007038 <USBD_LL_Start>
 80058b0:	4603      	mov	r3, r0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80058dc:	2303      	movs	r3, #3
 80058de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	78fa      	ldrb	r2, [r7, #3]
 80058f4:	4611      	mov	r1, r2
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d007      	beq.n	800592e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	78fa      	ldrb	r2, [r7, #3]
 8005928:	4611      	mov	r1, r2
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
  }

  return USBD_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005948:	6839      	ldr	r1, [r7, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 ff90 	bl	8006870 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800595e:	461a      	mov	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800596c:	f003 031f 	and.w	r3, r3, #31
 8005970:	2b02      	cmp	r3, #2
 8005972:	d01a      	beq.n	80059aa <USBD_LL_SetupStage+0x72>
 8005974:	2b02      	cmp	r3, #2
 8005976:	d822      	bhi.n	80059be <USBD_LL_SetupStage+0x86>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <USBD_LL_SetupStage+0x4a>
 800597c:	2b01      	cmp	r3, #1
 800597e:	d00a      	beq.n	8005996 <USBD_LL_SetupStage+0x5e>
 8005980:	e01d      	b.n	80059be <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa62 	bl	8005e54 <USBD_StdDevReq>
 8005990:	4603      	mov	r3, r0
 8005992:	73fb      	strb	r3, [r7, #15]
      break;
 8005994:	e020      	b.n	80059d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fac6 	bl	8005f30 <USBD_StdItfReq>
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]
      break;
 80059a8:	e016      	b.n	80059d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fb05 	bl	8005fc2 <USBD_StdEPReq>
 80059b8:	4603      	mov	r3, r0
 80059ba:	73fb      	strb	r3, [r7, #15]
      break;
 80059bc:	e00c      	b.n	80059d8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fb93 	bl	80070f8 <USBD_LL_StallEP>
 80059d2:	4603      	mov	r3, r0
 80059d4:	73fb      	strb	r3, [r7, #15]
      break;
 80059d6:	bf00      	nop
  }

  return ret;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b086      	sub	sp, #24
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	460b      	mov	r3, r1
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80059f0:	7afb      	ldrb	r3, [r7, #11]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d138      	bne.n	8005a68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80059fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d14a      	bne.n	8005a9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d913      	bls.n	8005a3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	1ad2      	subs	r2, r2, r3
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	bf28      	it	cs
 8005a2e:	4613      	movcs	r3, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fff2 	bl	8006a1e <USBD_CtlContinueRx>
 8005a3a:	e030      	b.n	8005a9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d10b      	bne.n	8005a60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d005      	beq.n	8005a60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 ffed 	bl	8006a40 <USBD_CtlSendStatus>
 8005a66:	e01a      	b.n	8005a9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d114      	bne.n	8005a9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00e      	beq.n	8005a9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	7afa      	ldrb	r2, [r7, #11]
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	4798      	blx	r3
 8005a90:	4603      	mov	r3, r0
 8005a92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	e000      	b.n	8005aa0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ab6:	7afb      	ldrb	r3, [r7, #11]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d16b      	bne.n	8005b94 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3314      	adds	r3, #20
 8005ac0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d156      	bne.n	8005b7a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d914      	bls.n	8005b02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	1ad2      	subs	r2, r2, r3
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	461a      	mov	r2, r3
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 ff84 	bl	80069fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005af4:	2300      	movs	r3, #0
 8005af6:	2200      	movs	r2, #0
 8005af8:	2100      	movs	r1, #0
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f001 fba6 	bl	800724c <USBD_LL_PrepareReceive>
 8005b00:	e03b      	b.n	8005b7a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d11c      	bne.n	8005b48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d316      	bcc.n	8005b48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d20f      	bcs.n	8005b48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 ff65 	bl	80069fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2100      	movs	r1, #0
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f001 fb83 	bl	800724c <USBD_LL_PrepareReceive>
 8005b46:	e018      	b.n	8005b7a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d10b      	bne.n	8005b6c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d005      	beq.n	8005b6c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b6c:	2180      	movs	r1, #128	; 0x80
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f001 fac2 	bl	80070f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 ff76 	bl	8006a66 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d122      	bne.n	8005bca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7ff fe98 	bl	80058ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b92:	e01a      	b.n	8005bca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d114      	bne.n	8005bca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00e      	beq.n	8005bca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	7afa      	ldrb	r2, [r7, #11]
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	4798      	blx	r3
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	e000      	b.n	8005bcc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e02f      	b.n	8005c68 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00f      	beq.n	8005c32 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6852      	ldr	r2, [r2, #4]
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c32:	2340      	movs	r3, #64	; 0x40
 8005c34:	2200      	movs	r2, #0
 8005c36:	2100      	movs	r1, #0
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f001 fa18 	bl	800706e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2240      	movs	r2, #64	; 0x40
 8005c4a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c4e:	2340      	movs	r3, #64	; 0x40
 8005c50:	2200      	movs	r2, #0
 8005c52:	2180      	movs	r1, #128	; 0x80
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 fa0a 	bl	800706e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2240      	movs	r2, #64	; 0x40
 8005c64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	78fa      	ldrb	r2, [r7, #3]
 8005c80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2204      	movs	r2, #4
 8005caa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d106      	bne.n	8005cde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e012      	b.n	8005d28 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d10b      	bne.n	8005d26 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e014      	b.n	8005d74 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d10d      	bne.n	8005d72 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	78fa      	ldrb	r2, [r7, #3]
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e014      	b.n	8005dc0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d10d      	bne.n	8005dbe <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	78fa      	ldrb	r2, [r7, #3]
 8005db8:	4611      	mov	r1, r2
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6852      	ldr	r2, [r2, #4]
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	4611      	mov	r1, r2
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
  }

  return USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b087      	sub	sp, #28
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e34:	8a3b      	ldrh	r3, [r7, #16]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	b21a      	sxth	r2, r3
 8005e3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	b21b      	sxth	r3, r3
 8005e42:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e44:	89fb      	ldrh	r3, [r7, #14]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e6a:	2b40      	cmp	r3, #64	; 0x40
 8005e6c:	d005      	beq.n	8005e7a <USBD_StdDevReq+0x26>
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	d853      	bhi.n	8005f1a <USBD_StdDevReq+0xc6>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <USBD_StdDevReq+0x3a>
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d14f      	bne.n	8005f1a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	4798      	blx	r3
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8c:	e04a      	b.n	8005f24 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b09      	cmp	r3, #9
 8005e94:	d83b      	bhi.n	8005f0e <USBD_StdDevReq+0xba>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <USBD_StdDevReq+0x48>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08005f05 	.word	0x08005f05
 8005ea4:	08005f0f 	.word	0x08005f0f
 8005ea8:	08005efb 	.word	0x08005efb
 8005eac:	08005f0f 	.word	0x08005f0f
 8005eb0:	08005ecf 	.word	0x08005ecf
 8005eb4:	08005ec5 	.word	0x08005ec5
 8005eb8:	08005f0f 	.word	0x08005f0f
 8005ebc:	08005ee7 	.word	0x08005ee7
 8005ec0:	08005ed9 	.word	0x08005ed9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f9de 	bl	8006288 <USBD_GetDescriptor>
          break;
 8005ecc:	e024      	b.n	8005f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fb43 	bl	800655c <USBD_SetAddress>
          break;
 8005ed6:	e01f      	b.n	8005f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fb82 	bl	80065e4 <USBD_SetConfig>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ee4:	e018      	b.n	8005f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fc21 	bl	8006730 <USBD_GetConfig>
          break;
 8005eee:	e013      	b.n	8005f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fc52 	bl	800679c <USBD_GetStatus>
          break;
 8005ef8:	e00e      	b.n	8005f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fc81 	bl	8006804 <USBD_SetFeature>
          break;
 8005f02:	e009      	b.n	8005f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fc90 	bl	800682c <USBD_ClrFeature>
          break;
 8005f0c:	e004      	b.n	8005f18 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fce7 	bl	80068e4 <USBD_CtlError>
          break;
 8005f16:	bf00      	nop
      }
      break;
 8005f18:	e004      	b.n	8005f24 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fce1 	bl	80068e4 <USBD_CtlError>
      break;
 8005f22:	bf00      	nop
  }

  return ret;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop

08005f30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	d005      	beq.n	8005f56 <USBD_StdItfReq+0x26>
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d82f      	bhi.n	8005fae <USBD_StdItfReq+0x7e>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <USBD_StdItfReq+0x26>
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d12b      	bne.n	8005fae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d81d      	bhi.n	8005fa0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	889b      	ldrh	r3, [r3, #4]
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d813      	bhi.n	8005f96 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	4798      	blx	r3
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	88db      	ldrh	r3, [r3, #6]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d110      	bne.n	8005faa <USBD_StdItfReq+0x7a>
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10d      	bne.n	8005faa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fd56 	bl	8006a40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f94:	e009      	b.n	8005faa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fca3 	bl	80068e4 <USBD_CtlError>
          break;
 8005f9e:	e004      	b.n	8005faa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fc9e 	bl	80068e4 <USBD_CtlError>
          break;
 8005fa8:	e000      	b.n	8005fac <USBD_StdItfReq+0x7c>
          break;
 8005faa:	bf00      	nop
      }
      break;
 8005fac:	e004      	b.n	8005fb8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fc97 	bl	80068e4 <USBD_CtlError>
      break;
 8005fb6:	bf00      	nop
  }

  return ret;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	889b      	ldrh	r3, [r3, #4]
 8005fd4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d007      	beq.n	8005ff2 <USBD_StdEPReq+0x30>
 8005fe2:	2b40      	cmp	r3, #64	; 0x40
 8005fe4:	f200 8145 	bhi.w	8006272 <USBD_StdEPReq+0x2b0>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00c      	beq.n	8006006 <USBD_StdEPReq+0x44>
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	f040 8140 	bne.w	8006272 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]
      break;
 8006004:	e13a      	b.n	800627c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d007      	beq.n	800601e <USBD_StdEPReq+0x5c>
 800600e:	2b03      	cmp	r3, #3
 8006010:	f300 8129 	bgt.w	8006266 <USBD_StdEPReq+0x2a4>
 8006014:	2b00      	cmp	r3, #0
 8006016:	d07f      	beq.n	8006118 <USBD_StdEPReq+0x156>
 8006018:	2b01      	cmp	r3, #1
 800601a:	d03c      	beq.n	8006096 <USBD_StdEPReq+0xd4>
 800601c:	e123      	b.n	8006266 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d002      	beq.n	8006030 <USBD_StdEPReq+0x6e>
 800602a:	2b03      	cmp	r3, #3
 800602c:	d016      	beq.n	800605c <USBD_StdEPReq+0x9a>
 800602e:	e02c      	b.n	800608a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00d      	beq.n	8006052 <USBD_StdEPReq+0x90>
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b80      	cmp	r3, #128	; 0x80
 800603a:	d00a      	beq.n	8006052 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800603c:	7bbb      	ldrb	r3, [r7, #14]
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 f859 	bl	80070f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 f855 	bl	80070f8 <USBD_LL_StallEP>
 800604e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006050:	e020      	b.n	8006094 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006052:	6839      	ldr	r1, [r7, #0]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fc45 	bl	80068e4 <USBD_CtlError>
              break;
 800605a:	e01b      	b.n	8006094 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	885b      	ldrh	r3, [r3, #2]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10e      	bne.n	8006082 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006064:	7bbb      	ldrb	r3, [r7, #14]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00b      	beq.n	8006082 <USBD_StdEPReq+0xc0>
 800606a:	7bbb      	ldrb	r3, [r7, #14]
 800606c:	2b80      	cmp	r3, #128	; 0x80
 800606e:	d008      	beq.n	8006082 <USBD_StdEPReq+0xc0>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	88db      	ldrh	r3, [r3, #6]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d104      	bne.n	8006082 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f001 f83b 	bl	80070f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fcdc 	bl	8006a40 <USBD_CtlSendStatus>

              break;
 8006088:	e004      	b.n	8006094 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fc29 	bl	80068e4 <USBD_CtlError>
              break;
 8006092:	bf00      	nop
          }
          break;
 8006094:	e0ec      	b.n	8006270 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d002      	beq.n	80060a8 <USBD_StdEPReq+0xe6>
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d016      	beq.n	80060d4 <USBD_StdEPReq+0x112>
 80060a6:	e030      	b.n	800610a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00d      	beq.n	80060ca <USBD_StdEPReq+0x108>
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	2b80      	cmp	r3, #128	; 0x80
 80060b2:	d00a      	beq.n	80060ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f001 f81d 	bl	80070f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060be:	2180      	movs	r1, #128	; 0x80
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 f819 	bl	80070f8 <USBD_LL_StallEP>
 80060c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060c8:	e025      	b.n	8006116 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fc09 	bl	80068e4 <USBD_CtlError>
              break;
 80060d2:	e020      	b.n	8006116 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	885b      	ldrh	r3, [r3, #2]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d11b      	bne.n	8006114 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060dc:	7bbb      	ldrb	r3, [r7, #14]
 80060de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060e6:	7bbb      	ldrb	r3, [r7, #14]
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f001 f823 	bl	8007136 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fca5 	bl	8006a40 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4798      	blx	r3
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006108:	e004      	b.n	8006114 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fbe9 	bl	80068e4 <USBD_CtlError>
              break;
 8006112:	e000      	b.n	8006116 <USBD_StdEPReq+0x154>
              break;
 8006114:	bf00      	nop
          }
          break;
 8006116:	e0ab      	b.n	8006270 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d002      	beq.n	800612a <USBD_StdEPReq+0x168>
 8006124:	2b03      	cmp	r3, #3
 8006126:	d032      	beq.n	800618e <USBD_StdEPReq+0x1cc>
 8006128:	e097      	b.n	800625a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d007      	beq.n	8006140 <USBD_StdEPReq+0x17e>
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d004      	beq.n	8006140 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fbd3 	bl	80068e4 <USBD_CtlError>
                break;
 800613e:	e091      	b.n	8006264 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006144:	2b00      	cmp	r3, #0
 8006146:	da0b      	bge.n	8006160 <USBD_StdEPReq+0x19e>
 8006148:	7bbb      	ldrb	r3, [r7, #14]
 800614a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	3310      	adds	r3, #16
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	4413      	add	r3, r2
 800615c:	3304      	adds	r3, #4
 800615e:	e00b      	b.n	8006178 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006166:	4613      	mov	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	4413      	add	r3, r2
 8006176:	3304      	adds	r3, #4
 8006178:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2202      	movs	r2, #2
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fc1d 	bl	80069c6 <USBD_CtlSendData>
              break;
 800618c:	e06a      	b.n	8006264 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800618e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006192:	2b00      	cmp	r3, #0
 8006194:	da11      	bge.n	80061ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	f003 020f 	and.w	r2, r3, #15
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	3324      	adds	r3, #36	; 0x24
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d117      	bne.n	80061e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fb96 	bl	80068e4 <USBD_CtlError>
                  break;
 80061b8:	e054      	b.n	8006264 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061ba:	7bbb      	ldrb	r3, [r7, #14]
 80061bc:	f003 020f 	and.w	r2, r3, #15
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	4613      	mov	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	440b      	add	r3, r1
 80061cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fb83 	bl	80068e4 <USBD_CtlError>
                  break;
 80061de:	e041      	b.n	8006264 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	da0b      	bge.n	8006200 <USBD_StdEPReq+0x23e>
 80061e8:	7bbb      	ldrb	r3, [r7, #14]
 80061ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	3310      	adds	r3, #16
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	4413      	add	r3, r2
 80061fc:	3304      	adds	r3, #4
 80061fe:	e00b      	b.n	8006218 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006206:	4613      	mov	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	4413      	add	r3, r2
 8006216:	3304      	adds	r3, #4
 8006218:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <USBD_StdEPReq+0x264>
 8006220:	7bbb      	ldrb	r3, [r7, #14]
 8006222:	2b80      	cmp	r3, #128	; 0x80
 8006224:	d103      	bne.n	800622e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	e00e      	b.n	800624c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 ff9e 	bl	8007174 <USBD_LL_IsStallEP>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2201      	movs	r2, #1
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	e002      	b.n	800624c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2202      	movs	r2, #2
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fbb7 	bl	80069c6 <USBD_CtlSendData>
              break;
 8006258:	e004      	b.n	8006264 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fb41 	bl	80068e4 <USBD_CtlError>
              break;
 8006262:	bf00      	nop
          }
          break;
 8006264:	e004      	b.n	8006270 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fb3b 	bl	80068e4 <USBD_CtlError>
          break;
 800626e:	bf00      	nop
      }
      break;
 8006270:	e004      	b.n	800627c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fb35 	bl	80068e4 <USBD_CtlError>
      break;
 800627a:	bf00      	nop
  }

  return ret;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	885b      	ldrh	r3, [r3, #2]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	2b06      	cmp	r3, #6
 80062aa:	f200 8128 	bhi.w	80064fe <USBD_GetDescriptor+0x276>
 80062ae:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <USBD_GetDescriptor+0x2c>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	080062d1 	.word	0x080062d1
 80062b8:	080062e9 	.word	0x080062e9
 80062bc:	08006329 	.word	0x08006329
 80062c0:	080064ff 	.word	0x080064ff
 80062c4:	080064ff 	.word	0x080064ff
 80062c8:	0800649f 	.word	0x0800649f
 80062cc:	080064cb 	.word	0x080064cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	7c12      	ldrb	r2, [r2, #16]
 80062dc:	f107 0108 	add.w	r1, r7, #8
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
 80062e4:	60f8      	str	r0, [r7, #12]
      break;
 80062e6:	e112      	b.n	800650e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	7c1b      	ldrb	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10d      	bne.n	800630c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	f107 0208 	add.w	r2, r7, #8
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
 8006300:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3301      	adds	r3, #1
 8006306:	2202      	movs	r2, #2
 8006308:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800630a:	e100      	b.n	800650e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	f107 0208 	add.w	r2, r7, #8
 8006318:	4610      	mov	r0, r2
 800631a:	4798      	blx	r3
 800631c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3301      	adds	r3, #1
 8006322:	2202      	movs	r2, #2
 8006324:	701a      	strb	r2, [r3, #0]
      break;
 8006326:	e0f2      	b.n	800650e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	885b      	ldrh	r3, [r3, #2]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b05      	cmp	r3, #5
 8006330:	f200 80ac 	bhi.w	800648c <USBD_GetDescriptor+0x204>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <USBD_GetDescriptor+0xb4>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	08006355 	.word	0x08006355
 8006340:	08006389 	.word	0x08006389
 8006344:	080063bd 	.word	0x080063bd
 8006348:	080063f1 	.word	0x080063f1
 800634c:	08006425 	.word	0x08006425
 8006350:	08006459 	.word	0x08006459
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	7c12      	ldrb	r2, [r2, #16]
 800636c:	f107 0108 	add.w	r1, r7, #8
 8006370:	4610      	mov	r0, r2
 8006372:	4798      	blx	r3
 8006374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006376:	e091      	b.n	800649c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fab2 	bl	80068e4 <USBD_CtlError>
            err++;
 8006380:	7afb      	ldrb	r3, [r7, #11]
 8006382:	3301      	adds	r3, #1
 8006384:	72fb      	strb	r3, [r7, #11]
          break;
 8006386:	e089      	b.n	800649c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	7c12      	ldrb	r2, [r2, #16]
 80063a0:	f107 0108 	add.w	r1, r7, #8
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
 80063a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063aa:	e077      	b.n	800649c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa98 	bl	80068e4 <USBD_CtlError>
            err++;
 80063b4:	7afb      	ldrb	r3, [r7, #11]
 80063b6:	3301      	adds	r3, #1
 80063b8:	72fb      	strb	r3, [r7, #11]
          break;
 80063ba:	e06f      	b.n	800649c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	7c12      	ldrb	r2, [r2, #16]
 80063d4:	f107 0108 	add.w	r1, r7, #8
 80063d8:	4610      	mov	r0, r2
 80063da:	4798      	blx	r3
 80063dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063de:	e05d      	b.n	800649c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa7e 	bl	80068e4 <USBD_CtlError>
            err++;
 80063e8:	7afb      	ldrb	r3, [r7, #11]
 80063ea:	3301      	adds	r3, #1
 80063ec:	72fb      	strb	r3, [r7, #11]
          break;
 80063ee:	e055      	b.n	800649c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	7c12      	ldrb	r2, [r2, #16]
 8006408:	f107 0108 	add.w	r1, r7, #8
 800640c:	4610      	mov	r0, r2
 800640e:	4798      	blx	r3
 8006410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006412:	e043      	b.n	800649c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa64 	bl	80068e4 <USBD_CtlError>
            err++;
 800641c:	7afb      	ldrb	r3, [r7, #11]
 800641e:	3301      	adds	r3, #1
 8006420:	72fb      	strb	r3, [r7, #11]
          break;
 8006422:	e03b      	b.n	800649c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	7c12      	ldrb	r2, [r2, #16]
 800643c:	f107 0108 	add.w	r1, r7, #8
 8006440:	4610      	mov	r0, r2
 8006442:	4798      	blx	r3
 8006444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006446:	e029      	b.n	800649c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa4a 	bl	80068e4 <USBD_CtlError>
            err++;
 8006450:	7afb      	ldrb	r3, [r7, #11]
 8006452:	3301      	adds	r3, #1
 8006454:	72fb      	strb	r3, [r7, #11]
          break;
 8006456:	e021      	b.n	800649c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00b      	beq.n	800647c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	7c12      	ldrb	r2, [r2, #16]
 8006470:	f107 0108 	add.w	r1, r7, #8
 8006474:	4610      	mov	r0, r2
 8006476:	4798      	blx	r3
 8006478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800647a:	e00f      	b.n	800649c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa30 	bl	80068e4 <USBD_CtlError>
            err++;
 8006484:	7afb      	ldrb	r3, [r7, #11]
 8006486:	3301      	adds	r3, #1
 8006488:	72fb      	strb	r3, [r7, #11]
          break;
 800648a:	e007      	b.n	800649c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fa28 	bl	80068e4 <USBD_CtlError>
          err++;
 8006494:	7afb      	ldrb	r3, [r7, #11]
 8006496:	3301      	adds	r3, #1
 8006498:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800649a:	bf00      	nop
      }
      break;
 800649c:	e037      	b.n	800650e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	7c1b      	ldrb	r3, [r3, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ae:	f107 0208 	add.w	r2, r7, #8
 80064b2:	4610      	mov	r0, r2
 80064b4:	4798      	blx	r3
 80064b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064b8:	e029      	b.n	800650e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fa11 	bl	80068e4 <USBD_CtlError>
        err++;
 80064c2:	7afb      	ldrb	r3, [r7, #11]
 80064c4:	3301      	adds	r3, #1
 80064c6:	72fb      	strb	r3, [r7, #11]
      break;
 80064c8:	e021      	b.n	800650e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	7c1b      	ldrb	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10d      	bne.n	80064ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	f107 0208 	add.w	r2, r7, #8
 80064de:	4610      	mov	r0, r2
 80064e0:	4798      	blx	r3
 80064e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	2207      	movs	r2, #7
 80064ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064ec:	e00f      	b.n	800650e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f9f7 	bl	80068e4 <USBD_CtlError>
        err++;
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	3301      	adds	r3, #1
 80064fa:	72fb      	strb	r3, [r7, #11]
      break;
 80064fc:	e007      	b.n	800650e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f9ef 	bl	80068e4 <USBD_CtlError>
      err++;
 8006506:	7afb      	ldrb	r3, [r7, #11]
 8006508:	3301      	adds	r3, #1
 800650a:	72fb      	strb	r3, [r7, #11]
      break;
 800650c:	bf00      	nop
  }

  if (err != 0U)
 800650e:	7afb      	ldrb	r3, [r7, #11]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d11e      	bne.n	8006552 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	88db      	ldrh	r3, [r3, #6]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d016      	beq.n	800654a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800651c:	893b      	ldrh	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00e      	beq.n	8006540 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	88da      	ldrh	r2, [r3, #6]
 8006526:	893b      	ldrh	r3, [r7, #8]
 8006528:	4293      	cmp	r3, r2
 800652a:	bf28      	it	cs
 800652c:	4613      	movcs	r3, r2
 800652e:	b29b      	uxth	r3, r3
 8006530:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006532:	893b      	ldrh	r3, [r7, #8]
 8006534:	461a      	mov	r2, r3
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fa44 	bl	80069c6 <USBD_CtlSendData>
 800653e:	e009      	b.n	8006554 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f9ce 	bl	80068e4 <USBD_CtlError>
 8006548:	e004      	b.n	8006554 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa78 	bl	8006a40 <USBD_CtlSendStatus>
 8006550:	e000      	b.n	8006554 <USBD_GetDescriptor+0x2cc>
    return;
 8006552:	bf00      	nop
  }
}
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop

0800655c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	889b      	ldrh	r3, [r3, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d131      	bne.n	80065d2 <USBD_SetAddress+0x76>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	88db      	ldrh	r3, [r3, #6]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d12d      	bne.n	80065d2 <USBD_SetAddress+0x76>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	885b      	ldrh	r3, [r3, #2]
 800657a:	2b7f      	cmp	r3, #127	; 0x7f
 800657c:	d829      	bhi.n	80065d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	885b      	ldrh	r3, [r3, #2]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006588:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b03      	cmp	r3, #3
 8006594:	d104      	bne.n	80065a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f9a3 	bl	80068e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800659e:	e01d      	b.n	80065dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	7bfa      	ldrb	r2, [r7, #15]
 80065a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fe0d 	bl	80071cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa44 	bl	8006a40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d004      	beq.n	80065c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2202      	movs	r2, #2
 80065c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c6:	e009      	b.n	80065dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d0:	e004      	b.n	80065dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f985 	bl	80068e4 <USBD_CtlError>
  }
}
 80065da:	bf00      	nop
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	885b      	ldrh	r3, [r3, #2]
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	4b4c      	ldr	r3, [pc, #304]	; (800672c <USBD_SetConfig+0x148>)
 80065fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065fc:	4b4b      	ldr	r3, [pc, #300]	; (800672c <USBD_SetConfig+0x148>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d905      	bls.n	8006610 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f96c 	bl	80068e4 <USBD_CtlError>
    return USBD_FAIL;
 800660c:	2303      	movs	r3, #3
 800660e:	e088      	b.n	8006722 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d002      	beq.n	8006622 <USBD_SetConfig+0x3e>
 800661c:	2b03      	cmp	r3, #3
 800661e:	d025      	beq.n	800666c <USBD_SetConfig+0x88>
 8006620:	e071      	b.n	8006706 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006622:	4b42      	ldr	r3, [pc, #264]	; (800672c <USBD_SetConfig+0x148>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01c      	beq.n	8006664 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800662a:	4b40      	ldr	r3, [pc, #256]	; (800672c <USBD_SetConfig+0x148>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006634:	4b3d      	ldr	r3, [pc, #244]	; (800672c <USBD_SetConfig+0x148>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff f948 	bl	80058d0 <USBD_SetClassConfig>
 8006640:	4603      	mov	r3, r0
 8006642:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f949 	bl	80068e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006652:	e065      	b.n	8006720 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f9f3 	bl	8006a40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2203      	movs	r2, #3
 800665e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006662:	e05d      	b.n	8006720 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f9eb 	bl	8006a40 <USBD_CtlSendStatus>
      break;
 800666a:	e059      	b.n	8006720 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800666c:	4b2f      	ldr	r3, [pc, #188]	; (800672c <USBD_SetConfig+0x148>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d112      	bne.n	800669a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800667c:	4b2b      	ldr	r3, [pc, #172]	; (800672c <USBD_SetConfig+0x148>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006686:	4b29      	ldr	r3, [pc, #164]	; (800672c <USBD_SetConfig+0x148>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff f93b 	bl	8005908 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f9d4 	bl	8006a40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006698:	e042      	b.n	8006720 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800669a:	4b24      	ldr	r3, [pc, #144]	; (800672c <USBD_SetConfig+0x148>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d02a      	beq.n	80066fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff f929 	bl	8005908 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066b6:	4b1d      	ldr	r3, [pc, #116]	; (800672c <USBD_SetConfig+0x148>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066c0:	4b1a      	ldr	r3, [pc, #104]	; (800672c <USBD_SetConfig+0x148>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff f902 	bl	80058d0 <USBD_SetClassConfig>
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00f      	beq.n	80066f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f903 	bl	80068e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff f90e 	bl	8005908 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066f4:	e014      	b.n	8006720 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f9a2 	bl	8006a40 <USBD_CtlSendStatus>
      break;
 80066fc:	e010      	b.n	8006720 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f99e 	bl	8006a40 <USBD_CtlSendStatus>
      break;
 8006704:	e00c      	b.n	8006720 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f8eb 	bl	80068e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800670e:	4b07      	ldr	r3, [pc, #28]	; (800672c <USBD_SetConfig+0x148>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	4619      	mov	r1, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff f8f7 	bl	8005908 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800671a:	2303      	movs	r3, #3
 800671c:	73fb      	strb	r3, [r7, #15]
      break;
 800671e:	bf00      	nop
  }

  return ret;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000180 	.word	0x20000180

08006730 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	88db      	ldrh	r3, [r3, #6]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d004      	beq.n	800674c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f8cd 	bl	80068e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800674a:	e023      	b.n	8006794 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	dc02      	bgt.n	800675e <USBD_GetConfig+0x2e>
 8006758:	2b00      	cmp	r3, #0
 800675a:	dc03      	bgt.n	8006764 <USBD_GetConfig+0x34>
 800675c:	e015      	b.n	800678a <USBD_GetConfig+0x5a>
 800675e:	2b03      	cmp	r3, #3
 8006760:	d00b      	beq.n	800677a <USBD_GetConfig+0x4a>
 8006762:	e012      	b.n	800678a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3308      	adds	r3, #8
 800676e:	2201      	movs	r2, #1
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f927 	bl	80069c6 <USBD_CtlSendData>
        break;
 8006778:	e00c      	b.n	8006794 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3304      	adds	r3, #4
 800677e:	2201      	movs	r2, #1
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f91f 	bl	80069c6 <USBD_CtlSendData>
        break;
 8006788:	e004      	b.n	8006794 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f8a9 	bl	80068e4 <USBD_CtlError>
        break;
 8006792:	bf00      	nop
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d81e      	bhi.n	80067f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	88db      	ldrh	r3, [r3, #6]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d004      	beq.n	80067c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f890 	bl	80068e4 <USBD_CtlError>
        break;
 80067c4:	e01a      	b.n	80067fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f043 0202 	orr.w	r2, r3, #2
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	330c      	adds	r3, #12
 80067e6:	2202      	movs	r2, #2
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f8eb 	bl	80069c6 <USBD_CtlSendData>
      break;
 80067f0:	e004      	b.n	80067fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f875 	bl	80068e4 <USBD_CtlError>
      break;
 80067fa:	bf00      	nop
  }
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	885b      	ldrh	r3, [r3, #2]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d106      	bne.n	8006824 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f90e 	bl	8006a40 <USBD_CtlSendStatus>
  }
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800683c:	b2db      	uxtb	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	2b02      	cmp	r3, #2
 8006842:	d80b      	bhi.n	800685c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	885b      	ldrh	r3, [r3, #2]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d10c      	bne.n	8006866 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f8f3 	bl	8006a40 <USBD_CtlSendStatus>
      }
      break;
 800685a:	e004      	b.n	8006866 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f840 	bl	80068e4 <USBD_CtlError>
      break;
 8006864:	e000      	b.n	8006868 <USBD_ClrFeature+0x3c>
      break;
 8006866:	bf00      	nop
  }
}
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f7ff fabb 	bl	8005e16 <SWAPBYTE>
 80068a0:	4603      	mov	r3, r0
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3301      	adds	r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff faae 	bl	8005e16 <SWAPBYTE>
 80068ba:	4603      	mov	r3, r0
 80068bc:	461a      	mov	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3301      	adds	r3, #1
 80068c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7ff faa1 	bl	8005e16 <SWAPBYTE>
 80068d4:	4603      	mov	r3, r0
 80068d6:	461a      	mov	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	80da      	strh	r2, [r3, #6]
}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80068ee:	2180      	movs	r1, #128	; 0x80
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fc01 	bl	80070f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80068f6:	2100      	movs	r1, #0
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fbfd 	bl	80070f8 <USBD_LL_StallEP>
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b086      	sub	sp, #24
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d036      	beq.n	800698a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006920:	6938      	ldr	r0, [r7, #16]
 8006922:	f000 f836 	bl	8006992 <USBD_GetLen>
 8006926:	4603      	mov	r3, r0
 8006928:	3301      	adds	r3, #1
 800692a:	b29b      	uxth	r3, r3
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	4413      	add	r3, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	7812      	ldrb	r2, [r2, #0]
 800693e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006940:	7dfb      	ldrb	r3, [r7, #23]
 8006942:	3301      	adds	r3, #1
 8006944:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	4413      	add	r3, r2
 800694c:	2203      	movs	r2, #3
 800694e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006950:	7dfb      	ldrb	r3, [r7, #23]
 8006952:	3301      	adds	r3, #1
 8006954:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006956:	e013      	b.n	8006980 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	4413      	add	r3, r2
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	7812      	ldrb	r2, [r2, #0]
 8006962:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	3301      	adds	r3, #1
 8006968:	613b      	str	r3, [r7, #16]
    idx++;
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	3301      	adds	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	4413      	add	r3, r2
 8006976:	2200      	movs	r2, #0
 8006978:	701a      	strb	r2, [r3, #0]
    idx++;
 800697a:	7dfb      	ldrb	r3, [r7, #23]
 800697c:	3301      	adds	r3, #1
 800697e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e7      	bne.n	8006958 <USBD_GetString+0x52>
 8006988:	e000      	b.n	800698c <USBD_GetString+0x86>
    return;
 800698a:	bf00      	nop
  }
}
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006992:	b480      	push	{r7}
 8006994:	b085      	sub	sp, #20
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80069a2:	e005      	b.n	80069b0 <USBD_GetLen+0x1e>
  {
    len++;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	3301      	adds	r3, #1
 80069a8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	3301      	adds	r3, #1
 80069ae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f5      	bne.n	80069a4 <USBD_GetLen+0x12>
  }

  return len;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	2100      	movs	r1, #0
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 fc0c 	bl	800720a <USBD_LL_Transmit>

  return USBD_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fbfb 	bl	800720a <USBD_LL_Transmit>

  return USBD_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	2100      	movs	r1, #0
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fc0b 	bl	800724c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a50:	2300      	movs	r3, #0
 8006a52:	2200      	movs	r2, #0
 8006a54:	2100      	movs	r1, #0
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fbd7 	bl	800720a <USBD_LL_Transmit>

  return USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2205      	movs	r2, #5
 8006a72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a76:	2300      	movs	r3, #0
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fbe5 	bl	800724c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a90:	2200      	movs	r2, #0
 8006a92:	490e      	ldr	r1, [pc, #56]	; (8006acc <MX_USB_DEVICE_Init+0x40>)
 8006a94:	480e      	ldr	r0, [pc, #56]	; (8006ad0 <MX_USB_DEVICE_Init+0x44>)
 8006a96:	f7fe fead 	bl	80057f4 <USBD_Init>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006aa0:	f7fa fce4 	bl	800146c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006aa4:	490b      	ldr	r1, [pc, #44]	; (8006ad4 <MX_USB_DEVICE_Init+0x48>)
 8006aa6:	480a      	ldr	r0, [pc, #40]	; (8006ad0 <MX_USB_DEVICE_Init+0x44>)
 8006aa8:	f7fe fed4 	bl	8005854 <USBD_RegisterClass>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ab2:	f7fa fcdb 	bl	800146c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ab6:	4806      	ldr	r0, [pc, #24]	; (8006ad0 <MX_USB_DEVICE_Init+0x44>)
 8006ab8:	f7fe fef3 	bl	80058a2 <USBD_Start>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006ac2:	f7fa fcd3 	bl	800146c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ac6:	bf00      	nop
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20000114 	.word	0x20000114
 8006ad0:	200001e0 	.word	0x200001e0
 8006ad4:	2000000c 	.word	0x2000000c

08006ad8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	6039      	str	r1, [r7, #0]
 8006ae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2212      	movs	r2, #18
 8006ae8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006aea:	4b03      	ldr	r3, [pc, #12]	; (8006af8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	20000130 	.word	0x20000130

08006afc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	4603      	mov	r3, r0
 8006b04:	6039      	str	r1, [r7, #0]
 8006b06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b0e:	4b03      	ldr	r3, [pc, #12]	; (8006b1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	20000144 	.word	0x20000144

08006b20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	6039      	str	r1, [r7, #0]
 8006b2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d105      	bne.n	8006b3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	4907      	ldr	r1, [pc, #28]	; (8006b54 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b36:	4808      	ldr	r0, [pc, #32]	; (8006b58 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b38:	f7ff fee5 	bl	8006906 <USBD_GetString>
 8006b3c:	e004      	b.n	8006b48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	4904      	ldr	r1, [pc, #16]	; (8006b54 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b42:	4805      	ldr	r0, [pc, #20]	; (8006b58 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b44:	f7ff fedf 	bl	8006906 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b48:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	200004b0 	.word	0x200004b0
 8006b58:	08008498 	.word	0x08008498

08006b5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	6039      	str	r1, [r7, #0]
 8006b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	4904      	ldr	r1, [pc, #16]	; (8006b7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b6c:	4804      	ldr	r0, [pc, #16]	; (8006b80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b6e:	f7ff feca 	bl	8006906 <USBD_GetString>
  return USBD_StrDesc;
 8006b72:	4b02      	ldr	r3, [pc, #8]	; (8006b7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	200004b0 	.word	0x200004b0
 8006b80:	080084b0 	.word	0x080084b0

08006b84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	6039      	str	r1, [r7, #0]
 8006b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	221a      	movs	r2, #26
 8006b94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b96:	f000 f843 	bl	8006c20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b9a:	4b02      	ldr	r3, [pc, #8]	; (8006ba4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20000148 	.word	0x20000148

08006ba8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	6039      	str	r1, [r7, #0]
 8006bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d105      	bne.n	8006bc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	4907      	ldr	r1, [pc, #28]	; (8006bdc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bbe:	4808      	ldr	r0, [pc, #32]	; (8006be0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bc0:	f7ff fea1 	bl	8006906 <USBD_GetString>
 8006bc4:	e004      	b.n	8006bd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	4904      	ldr	r1, [pc, #16]	; (8006bdc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bca:	4805      	ldr	r0, [pc, #20]	; (8006be0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bcc:	f7ff fe9b 	bl	8006906 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bd0:	4b02      	ldr	r3, [pc, #8]	; (8006bdc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	200004b0 	.word	0x200004b0
 8006be0:	080084c4 	.word	0x080084c4

08006be4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	6039      	str	r1, [r7, #0]
 8006bee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d105      	bne.n	8006c02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	4907      	ldr	r1, [pc, #28]	; (8006c18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bfa:	4808      	ldr	r0, [pc, #32]	; (8006c1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006bfc:	f7ff fe83 	bl	8006906 <USBD_GetString>
 8006c00:	e004      	b.n	8006c0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	4904      	ldr	r1, [pc, #16]	; (8006c18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c06:	4805      	ldr	r0, [pc, #20]	; (8006c1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c08:	f7ff fe7d 	bl	8006906 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c0c:	4b02      	ldr	r3, [pc, #8]	; (8006c18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	200004b0 	.word	0x200004b0
 8006c1c:	080084d0 	.word	0x080084d0

08006c20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c26:	4b0f      	ldr	r3, [pc, #60]	; (8006c64 <Get_SerialNum+0x44>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c2c:	4b0e      	ldr	r3, [pc, #56]	; (8006c68 <Get_SerialNum+0x48>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c32:	4b0e      	ldr	r3, [pc, #56]	; (8006c6c <Get_SerialNum+0x4c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d009      	beq.n	8006c5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c46:	2208      	movs	r2, #8
 8006c48:	4909      	ldr	r1, [pc, #36]	; (8006c70 <Get_SerialNum+0x50>)
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f814 	bl	8006c78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c50:	2204      	movs	r2, #4
 8006c52:	4908      	ldr	r1, [pc, #32]	; (8006c74 <Get_SerialNum+0x54>)
 8006c54:	68b8      	ldr	r0, [r7, #8]
 8006c56:	f000 f80f 	bl	8006c78 <IntToUnicode>
  }
}
 8006c5a:	bf00      	nop
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	1fff7a10 	.word	0x1fff7a10
 8006c68:	1fff7a14 	.word	0x1fff7a14
 8006c6c:	1fff7a18 	.word	0x1fff7a18
 8006c70:	2000014a 	.word	0x2000014a
 8006c74:	2000015a 	.word	0x2000015a

08006c78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75fb      	strb	r3, [r7, #23]
 8006c8e:	e027      	b.n	8006ce0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0f1b      	lsrs	r3, r3, #28
 8006c94:	2b09      	cmp	r3, #9
 8006c96:	d80b      	bhi.n	8006cb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	0f1b      	lsrs	r3, r3, #28
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	440b      	add	r3, r1
 8006ca8:	3230      	adds	r2, #48	; 0x30
 8006caa:	b2d2      	uxtb	r2, r2
 8006cac:	701a      	strb	r2, [r3, #0]
 8006cae:	e00a      	b.n	8006cc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	0f1b      	lsrs	r3, r3, #28
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	4619      	mov	r1, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	440b      	add	r3, r1
 8006cc0:	3237      	adds	r2, #55	; 0x37
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	75fb      	strb	r3, [r7, #23]
 8006ce0:	7dfa      	ldrb	r2, [r7, #23]
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d3d3      	bcc.n	8006c90 <IntToUnicode+0x18>
  }
}
 8006ce8:	bf00      	nop
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
	...

08006cf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	; 0x28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d00:	f107 0314 	add.w	r3, r7, #20
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	605a      	str	r2, [r3, #4]
 8006d0a:	609a      	str	r2, [r3, #8]
 8006d0c:	60da      	str	r2, [r3, #12]
 8006d0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d18:	d147      	bne.n	8006daa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	613b      	str	r3, [r7, #16]
 8006d1e:	4b25      	ldr	r3, [pc, #148]	; (8006db4 <HAL_PCD_MspInit+0xbc>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	4a24      	ldr	r2, [pc, #144]	; (8006db4 <HAL_PCD_MspInit+0xbc>)
 8006d24:	f043 0301 	orr.w	r3, r3, #1
 8006d28:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2a:	4b22      	ldr	r3, [pc, #136]	; (8006db4 <HAL_PCD_MspInit+0xbc>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006d36:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d44:	2303      	movs	r3, #3
 8006d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d48:	230a      	movs	r3, #10
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d4c:	f107 0314 	add.w	r3, r7, #20
 8006d50:	4619      	mov	r1, r3
 8006d52:	4819      	ldr	r0, [pc, #100]	; (8006db8 <HAL_PCD_MspInit+0xc0>)
 8006d54:	f7fa fe18 	bl	8001988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006d66:	f107 0314 	add.w	r3, r7, #20
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4812      	ldr	r0, [pc, #72]	; (8006db8 <HAL_PCD_MspInit+0xc0>)
 8006d6e:	f7fa fe0b 	bl	8001988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d72:	4b10      	ldr	r3, [pc, #64]	; (8006db4 <HAL_PCD_MspInit+0xbc>)
 8006d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d76:	4a0f      	ldr	r2, [pc, #60]	; (8006db4 <HAL_PCD_MspInit+0xbc>)
 8006d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7c:	6353      	str	r3, [r2, #52]	; 0x34
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <HAL_PCD_MspInit+0xbc>)
 8006d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d86:	4a0b      	ldr	r2, [pc, #44]	; (8006db4 <HAL_PCD_MspInit+0xbc>)
 8006d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d8e:	4b09      	ldr	r3, [pc, #36]	; (8006db4 <HAL_PCD_MspInit+0xbc>)
 8006d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	2043      	movs	r0, #67	; 0x43
 8006da0:	f7fa fdbb 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006da4:	2043      	movs	r0, #67	; 0x43
 8006da6:	f7fa fdd4 	bl	8001952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006daa:	bf00      	nop
 8006dac:	3728      	adds	r7, #40	; 0x28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40023800 	.word	0x40023800
 8006db8:	40020000 	.word	0x40020000

08006dbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	f7fe fdb0 	bl	8005938 <USBD_LL_SetupStage>
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006df2:	78fa      	ldrb	r2, [r7, #3]
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	00db      	lsls	r3, r3, #3
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	f7fe fdea 	bl	80059e2 <USBD_LL_DataOutStage>
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e28:	78fa      	ldrb	r2, [r7, #3]
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	440b      	add	r3, r1
 8006e36:	3348      	adds	r3, #72	; 0x48
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	f7fe fe33 	bl	8005aa8 <USBD_LL_DataInStage>
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe ff47 	bl	8005cec <USBD_LL_SOF>
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d102      	bne.n	8006e80 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]
 8006e7e:	e008      	b.n	8006e92 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d102      	bne.n	8006e8e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	73fb      	strb	r3, [r7, #15]
 8006e8c:	e001      	b.n	8006e92 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006e8e:	f7fa faed 	bl	800146c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e98:	7bfa      	ldrb	r2, [r7, #15]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fee7 	bl	8005c70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fe93 	bl	8005bd4 <USBD_LL_Reset>
}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe fee2 	bl	8005c90 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6812      	ldr	r2, [r2, #0]
 8006eda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d005      	beq.n	8006ef8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006eec:	4b04      	ldr	r3, [pc, #16]	; (8006f00 <HAL_PCD_SuspendCallback+0x48>)
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	4a03      	ldr	r2, [pc, #12]	; (8006f00 <HAL_PCD_SuspendCallback+0x48>)
 8006ef2:	f043 0306 	orr.w	r3, r3, #6
 8006ef6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	e000ed00 	.word	0xe000ed00

08006f04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fe fed2 	bl	8005cbc <USBD_LL_Resume>
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f32:	78fa      	ldrb	r2, [r7, #3]
 8006f34:	4611      	mov	r1, r2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe ff20 	bl	8005d7c <USBD_LL_IsoOUTIncomplete>
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f56:	78fa      	ldrb	r2, [r7, #3]
 8006f58:	4611      	mov	r1, r2
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe fee8 	bl	8005d30 <USBD_LL_IsoINIncomplete>
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe ff26 	bl	8005dc8 <USBD_LL_DevConnected>
}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe ff23 	bl	8005dde <USBD_LL_DevDisconnected>
}
 8006f98:	bf00      	nop
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d13c      	bne.n	800702a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006fb0:	4a20      	ldr	r2, [pc, #128]	; (8007034 <USBD_LL_Init+0x94>)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a1e      	ldr	r2, [pc, #120]	; (8007034 <USBD_LL_Init+0x94>)
 8006fbc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006fc0:	4b1c      	ldr	r3, [pc, #112]	; (8007034 <USBD_LL_Init+0x94>)
 8006fc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006fc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006fc8:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <USBD_LL_Init+0x94>)
 8006fca:	2204      	movs	r2, #4
 8006fcc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006fce:	4b19      	ldr	r3, [pc, #100]	; (8007034 <USBD_LL_Init+0x94>)
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006fd4:	4b17      	ldr	r3, [pc, #92]	; (8007034 <USBD_LL_Init+0x94>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006fda:	4b16      	ldr	r3, [pc, #88]	; (8007034 <USBD_LL_Init+0x94>)
 8006fdc:	2202      	movs	r2, #2
 8006fde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006fe0:	4b14      	ldr	r3, [pc, #80]	; (8007034 <USBD_LL_Init+0x94>)
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006fe6:	4b13      	ldr	r3, [pc, #76]	; (8007034 <USBD_LL_Init+0x94>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006fec:	4b11      	ldr	r3, [pc, #68]	; (8007034 <USBD_LL_Init+0x94>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006ff2:	4b10      	ldr	r3, [pc, #64]	; (8007034 <USBD_LL_Init+0x94>)
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006ff8:	4b0e      	ldr	r3, [pc, #56]	; (8007034 <USBD_LL_Init+0x94>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006ffe:	480d      	ldr	r0, [pc, #52]	; (8007034 <USBD_LL_Init+0x94>)
 8007000:	f7fa fe9f 	bl	8001d42 <HAL_PCD_Init>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800700a:	f7fa fa2f 	bl	800146c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800700e:	2180      	movs	r1, #128	; 0x80
 8007010:	4808      	ldr	r0, [pc, #32]	; (8007034 <USBD_LL_Init+0x94>)
 8007012:	f7fb ffe4 	bl	8002fde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007016:	2240      	movs	r2, #64	; 0x40
 8007018:	2100      	movs	r1, #0
 800701a:	4806      	ldr	r0, [pc, #24]	; (8007034 <USBD_LL_Init+0x94>)
 800701c:	f7fb ff98 	bl	8002f50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007020:	2280      	movs	r2, #128	; 0x80
 8007022:	2101      	movs	r1, #1
 8007024:	4803      	ldr	r0, [pc, #12]	; (8007034 <USBD_LL_Init+0x94>)
 8007026:	f7fb ff93 	bl	8002f50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	200006b0 	.word	0x200006b0

08007038 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800704e:	4618      	mov	r0, r3
 8007050:	f7fa ff94 	bl	8001f7c <HAL_PCD_Start>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	4618      	mov	r0, r3
 800705c:	f000 f930 	bl	80072c0 <USBD_Get_USB_Status>
 8007060:	4603      	mov	r3, r0
 8007062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007064:	7bbb      	ldrb	r3, [r7, #14]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	4608      	mov	r0, r1
 8007078:	4611      	mov	r1, r2
 800707a:	461a      	mov	r2, r3
 800707c:	4603      	mov	r3, r0
 800707e:	70fb      	strb	r3, [r7, #3]
 8007080:	460b      	mov	r3, r1
 8007082:	70bb      	strb	r3, [r7, #2]
 8007084:	4613      	mov	r3, r2
 8007086:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007096:	78bb      	ldrb	r3, [r7, #2]
 8007098:	883a      	ldrh	r2, [r7, #0]
 800709a:	78f9      	ldrb	r1, [r7, #3]
 800709c:	f7fb fb78 	bl	8002790 <HAL_PCD_EP_Open>
 80070a0:	4603      	mov	r3, r0
 80070a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 f90a 	bl	80072c0 <USBD_Get_USB_Status>
 80070ac:	4603      	mov	r3, r0
 80070ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070d4:	78fa      	ldrb	r2, [r7, #3]
 80070d6:	4611      	mov	r1, r2
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fb fbc1 	bl	8002860 <HAL_PCD_EP_Close>
 80070de:	4603      	mov	r3, r0
 80070e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 f8eb 	bl	80072c0 <USBD_Get_USB_Status>
 80070ea:	4603      	mov	r3, r0
 80070ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007112:	78fa      	ldrb	r2, [r7, #3]
 8007114:	4611      	mov	r1, r2
 8007116:	4618      	mov	r0, r3
 8007118:	f7fb fc81 	bl	8002a1e <HAL_PCD_EP_SetStall>
 800711c:	4603      	mov	r3, r0
 800711e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f8cc 	bl	80072c0 <USBD_Get_USB_Status>
 8007128:	4603      	mov	r3, r0
 800712a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800712c:	7bbb      	ldrb	r3, [r7, #14]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	460b      	mov	r3, r1
 8007140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007150:	78fa      	ldrb	r2, [r7, #3]
 8007152:	4611      	mov	r1, r2
 8007154:	4618      	mov	r0, r3
 8007156:	f7fb fcc6 	bl	8002ae6 <HAL_PCD_EP_ClrStall>
 800715a:	4603      	mov	r3, r0
 800715c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800715e:	7bfb      	ldrb	r3, [r7, #15]
 8007160:	4618      	mov	r0, r3
 8007162:	f000 f8ad 	bl	80072c0 <USBD_Get_USB_Status>
 8007166:	4603      	mov	r3, r0
 8007168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800716a:	7bbb      	ldrb	r3, [r7, #14]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007186:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800718c:	2b00      	cmp	r3, #0
 800718e:	da0b      	bge.n	80071a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	4613      	mov	r3, r2
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	1a9b      	subs	r3, r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	333e      	adds	r3, #62	; 0x3e
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	e00b      	b.n	80071c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	4613      	mov	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	1a9b      	subs	r3, r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	440b      	add	r3, r1
 80071ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071e6:	78fa      	ldrb	r2, [r7, #3]
 80071e8:	4611      	mov	r1, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fb faab 	bl	8002746 <HAL_PCD_SetAddress>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 f862 	bl	80072c0 <USBD_Get_USB_Status>
 80071fc:	4603      	mov	r3, r0
 80071fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007200:	7bbb      	ldrb	r3, [r7, #14]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	603b      	str	r3, [r7, #0]
 8007216:	460b      	mov	r3, r1
 8007218:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007228:	7af9      	ldrb	r1, [r7, #11]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	f7fb fbac 	bl	800298a <HAL_PCD_EP_Transmit>
 8007232:	4603      	mov	r3, r0
 8007234:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007236:	7dfb      	ldrb	r3, [r7, #23]
 8007238:	4618      	mov	r0, r3
 800723a:	f000 f841 	bl	80072c0 <USBD_Get_USB_Status>
 800723e:	4603      	mov	r3, r0
 8007240:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007242:	7dbb      	ldrb	r3, [r7, #22]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	607a      	str	r2, [r7, #4]
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	460b      	mov	r3, r1
 800725a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800726a:	7af9      	ldrb	r1, [r7, #11]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	f7fb fb40 	bl	80028f4 <HAL_PCD_EP_Receive>
 8007274:	4603      	mov	r3, r0
 8007276:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 f820 	bl	80072c0 <USBD_Get_USB_Status>
 8007280:	4603      	mov	r3, r0
 8007282:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007284:	7dbb      	ldrb	r3, [r7, #22]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007298:	4b03      	ldr	r3, [pc, #12]	; (80072a8 <USBD_static_malloc+0x18>)
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	20000184 	.word	0x20000184

080072ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]

}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d817      	bhi.n	8007304 <USBD_Get_USB_Status+0x44>
 80072d4:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <USBD_Get_USB_Status+0x1c>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	080072ed 	.word	0x080072ed
 80072e0:	080072f3 	.word	0x080072f3
 80072e4:	080072f9 	.word	0x080072f9
 80072e8:	080072ff 	.word	0x080072ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	73fb      	strb	r3, [r7, #15]
    break;
 80072f0:	e00b      	b.n	800730a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072f2:	2303      	movs	r3, #3
 80072f4:	73fb      	strb	r3, [r7, #15]
    break;
 80072f6:	e008      	b.n	800730a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
    break;
 80072fc:	e005      	b.n	800730a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072fe:	2303      	movs	r3, #3
 8007300:	73fb      	strb	r3, [r7, #15]
    break;
 8007302:	e002      	b.n	800730a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007304:	2303      	movs	r3, #3
 8007306:	73fb      	strb	r3, [r7, #15]
    break;
 8007308:	bf00      	nop
  }
  return usb_status;
 800730a:	7bfb      	ldrb	r3, [r7, #15]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <__libc_init_array>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	4d0d      	ldr	r5, [pc, #52]	; (8007350 <__libc_init_array+0x38>)
 800731c:	4c0d      	ldr	r4, [pc, #52]	; (8007354 <__libc_init_array+0x3c>)
 800731e:	1b64      	subs	r4, r4, r5
 8007320:	10a4      	asrs	r4, r4, #2
 8007322:	2600      	movs	r6, #0
 8007324:	42a6      	cmp	r6, r4
 8007326:	d109      	bne.n	800733c <__libc_init_array+0x24>
 8007328:	4d0b      	ldr	r5, [pc, #44]	; (8007358 <__libc_init_array+0x40>)
 800732a:	4c0c      	ldr	r4, [pc, #48]	; (800735c <__libc_init_array+0x44>)
 800732c:	f001 f8a6 	bl	800847c <_init>
 8007330:	1b64      	subs	r4, r4, r5
 8007332:	10a4      	asrs	r4, r4, #2
 8007334:	2600      	movs	r6, #0
 8007336:	42a6      	cmp	r6, r4
 8007338:	d105      	bne.n	8007346 <__libc_init_array+0x2e>
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007340:	4798      	blx	r3
 8007342:	3601      	adds	r6, #1
 8007344:	e7ee      	b.n	8007324 <__libc_init_array+0xc>
 8007346:	f855 3b04 	ldr.w	r3, [r5], #4
 800734a:	4798      	blx	r3
 800734c:	3601      	adds	r6, #1
 800734e:	e7f2      	b.n	8007336 <__libc_init_array+0x1e>
 8007350:	080086d8 	.word	0x080086d8
 8007354:	080086d8 	.word	0x080086d8
 8007358:	080086d8 	.word	0x080086d8
 800735c:	080086dc 	.word	0x080086dc

08007360 <memset>:
 8007360:	4402      	add	r2, r0
 8007362:	4603      	mov	r3, r0
 8007364:	4293      	cmp	r3, r2
 8007366:	d100      	bne.n	800736a <memset+0xa>
 8007368:	4770      	bx	lr
 800736a:	f803 1b01 	strb.w	r1, [r3], #1
 800736e:	e7f9      	b.n	8007364 <memset+0x4>

08007370 <cos>:
 8007370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007372:	ec53 2b10 	vmov	r2, r3, d0
 8007376:	4824      	ldr	r0, [pc, #144]	; (8007408 <cos+0x98>)
 8007378:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800737c:	4281      	cmp	r1, r0
 800737e:	dc06      	bgt.n	800738e <cos+0x1e>
 8007380:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007400 <cos+0x90>
 8007384:	f000 faa4 	bl	80078d0 <__kernel_cos>
 8007388:	ec51 0b10 	vmov	r0, r1, d0
 800738c:	e007      	b.n	800739e <cos+0x2e>
 800738e:	481f      	ldr	r0, [pc, #124]	; (800740c <cos+0x9c>)
 8007390:	4281      	cmp	r1, r0
 8007392:	dd09      	ble.n	80073a8 <cos+0x38>
 8007394:	ee10 0a10 	vmov	r0, s0
 8007398:	4619      	mov	r1, r3
 800739a:	f7f8 ff2d 	bl	80001f8 <__aeabi_dsub>
 800739e:	ec41 0b10 	vmov	d0, r0, r1
 80073a2:	b005      	add	sp, #20
 80073a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80073a8:	4668      	mov	r0, sp
 80073aa:	f000 f885 	bl	80074b8 <__ieee754_rem_pio2>
 80073ae:	f000 0003 	and.w	r0, r0, #3
 80073b2:	2801      	cmp	r0, #1
 80073b4:	d007      	beq.n	80073c6 <cos+0x56>
 80073b6:	2802      	cmp	r0, #2
 80073b8:	d012      	beq.n	80073e0 <cos+0x70>
 80073ba:	b9c0      	cbnz	r0, 80073ee <cos+0x7e>
 80073bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073c0:	ed9d 0b00 	vldr	d0, [sp]
 80073c4:	e7de      	b.n	8007384 <cos+0x14>
 80073c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073ca:	ed9d 0b00 	vldr	d0, [sp]
 80073ce:	f000 fe87 	bl	80080e0 <__kernel_sin>
 80073d2:	ec53 2b10 	vmov	r2, r3, d0
 80073d6:	ee10 0a10 	vmov	r0, s0
 80073da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80073de:	e7de      	b.n	800739e <cos+0x2e>
 80073e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073e4:	ed9d 0b00 	vldr	d0, [sp]
 80073e8:	f000 fa72 	bl	80078d0 <__kernel_cos>
 80073ec:	e7f1      	b.n	80073d2 <cos+0x62>
 80073ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073f2:	ed9d 0b00 	vldr	d0, [sp]
 80073f6:	2001      	movs	r0, #1
 80073f8:	f000 fe72 	bl	80080e0 <__kernel_sin>
 80073fc:	e7c4      	b.n	8007388 <cos+0x18>
 80073fe:	bf00      	nop
	...
 8007408:	3fe921fb 	.word	0x3fe921fb
 800740c:	7fefffff 	.word	0x7fefffff

08007410 <sin>:
 8007410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007412:	ec53 2b10 	vmov	r2, r3, d0
 8007416:	4826      	ldr	r0, [pc, #152]	; (80074b0 <sin+0xa0>)
 8007418:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800741c:	4281      	cmp	r1, r0
 800741e:	dc07      	bgt.n	8007430 <sin+0x20>
 8007420:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80074a8 <sin+0x98>
 8007424:	2000      	movs	r0, #0
 8007426:	f000 fe5b 	bl	80080e0 <__kernel_sin>
 800742a:	ec51 0b10 	vmov	r0, r1, d0
 800742e:	e007      	b.n	8007440 <sin+0x30>
 8007430:	4820      	ldr	r0, [pc, #128]	; (80074b4 <sin+0xa4>)
 8007432:	4281      	cmp	r1, r0
 8007434:	dd09      	ble.n	800744a <sin+0x3a>
 8007436:	ee10 0a10 	vmov	r0, s0
 800743a:	4619      	mov	r1, r3
 800743c:	f7f8 fedc 	bl	80001f8 <__aeabi_dsub>
 8007440:	ec41 0b10 	vmov	d0, r0, r1
 8007444:	b005      	add	sp, #20
 8007446:	f85d fb04 	ldr.w	pc, [sp], #4
 800744a:	4668      	mov	r0, sp
 800744c:	f000 f834 	bl	80074b8 <__ieee754_rem_pio2>
 8007450:	f000 0003 	and.w	r0, r0, #3
 8007454:	2801      	cmp	r0, #1
 8007456:	d008      	beq.n	800746a <sin+0x5a>
 8007458:	2802      	cmp	r0, #2
 800745a:	d00d      	beq.n	8007478 <sin+0x68>
 800745c:	b9d0      	cbnz	r0, 8007494 <sin+0x84>
 800745e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007462:	ed9d 0b00 	vldr	d0, [sp]
 8007466:	2001      	movs	r0, #1
 8007468:	e7dd      	b.n	8007426 <sin+0x16>
 800746a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800746e:	ed9d 0b00 	vldr	d0, [sp]
 8007472:	f000 fa2d 	bl	80078d0 <__kernel_cos>
 8007476:	e7d8      	b.n	800742a <sin+0x1a>
 8007478:	ed9d 1b02 	vldr	d1, [sp, #8]
 800747c:	ed9d 0b00 	vldr	d0, [sp]
 8007480:	2001      	movs	r0, #1
 8007482:	f000 fe2d 	bl	80080e0 <__kernel_sin>
 8007486:	ec53 2b10 	vmov	r2, r3, d0
 800748a:	ee10 0a10 	vmov	r0, s0
 800748e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007492:	e7d5      	b.n	8007440 <sin+0x30>
 8007494:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007498:	ed9d 0b00 	vldr	d0, [sp]
 800749c:	f000 fa18 	bl	80078d0 <__kernel_cos>
 80074a0:	e7f1      	b.n	8007486 <sin+0x76>
 80074a2:	bf00      	nop
 80074a4:	f3af 8000 	nop.w
	...
 80074b0:	3fe921fb 	.word	0x3fe921fb
 80074b4:	7fefffff 	.word	0x7fefffff

080074b8 <__ieee754_rem_pio2>:
 80074b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	ed2d 8b02 	vpush	{d8}
 80074c0:	ec55 4b10 	vmov	r4, r5, d0
 80074c4:	4bca      	ldr	r3, [pc, #808]	; (80077f0 <__ieee754_rem_pio2+0x338>)
 80074c6:	b08b      	sub	sp, #44	; 0x2c
 80074c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80074cc:	4598      	cmp	r8, r3
 80074ce:	4682      	mov	sl, r0
 80074d0:	9502      	str	r5, [sp, #8]
 80074d2:	dc08      	bgt.n	80074e6 <__ieee754_rem_pio2+0x2e>
 80074d4:	2200      	movs	r2, #0
 80074d6:	2300      	movs	r3, #0
 80074d8:	ed80 0b00 	vstr	d0, [r0]
 80074dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80074e0:	f04f 0b00 	mov.w	fp, #0
 80074e4:	e028      	b.n	8007538 <__ieee754_rem_pio2+0x80>
 80074e6:	4bc3      	ldr	r3, [pc, #780]	; (80077f4 <__ieee754_rem_pio2+0x33c>)
 80074e8:	4598      	cmp	r8, r3
 80074ea:	dc78      	bgt.n	80075de <__ieee754_rem_pio2+0x126>
 80074ec:	9b02      	ldr	r3, [sp, #8]
 80074ee:	4ec2      	ldr	r6, [pc, #776]	; (80077f8 <__ieee754_rem_pio2+0x340>)
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	ee10 0a10 	vmov	r0, s0
 80074f6:	a3b0      	add	r3, pc, #704	; (adr r3, 80077b8 <__ieee754_rem_pio2+0x300>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	4629      	mov	r1, r5
 80074fe:	dd39      	ble.n	8007574 <__ieee754_rem_pio2+0xbc>
 8007500:	f7f8 fe7a 	bl	80001f8 <__aeabi_dsub>
 8007504:	45b0      	cmp	r8, r6
 8007506:	4604      	mov	r4, r0
 8007508:	460d      	mov	r5, r1
 800750a:	d01b      	beq.n	8007544 <__ieee754_rem_pio2+0x8c>
 800750c:	a3ac      	add	r3, pc, #688	; (adr r3, 80077c0 <__ieee754_rem_pio2+0x308>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	f7f8 fe71 	bl	80001f8 <__aeabi_dsub>
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	e9ca 2300 	strd	r2, r3, [sl]
 800751e:	4620      	mov	r0, r4
 8007520:	4629      	mov	r1, r5
 8007522:	f7f8 fe69 	bl	80001f8 <__aeabi_dsub>
 8007526:	a3a6      	add	r3, pc, #664	; (adr r3, 80077c0 <__ieee754_rem_pio2+0x308>)
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	f7f8 fe64 	bl	80001f8 <__aeabi_dsub>
 8007530:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007534:	f04f 0b01 	mov.w	fp, #1
 8007538:	4658      	mov	r0, fp
 800753a:	b00b      	add	sp, #44	; 0x2c
 800753c:	ecbd 8b02 	vpop	{d8}
 8007540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007544:	a3a0      	add	r3, pc, #640	; (adr r3, 80077c8 <__ieee754_rem_pio2+0x310>)
 8007546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754a:	f7f8 fe55 	bl	80001f8 <__aeabi_dsub>
 800754e:	a3a0      	add	r3, pc, #640	; (adr r3, 80077d0 <__ieee754_rem_pio2+0x318>)
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	4604      	mov	r4, r0
 8007556:	460d      	mov	r5, r1
 8007558:	f7f8 fe4e 	bl	80001f8 <__aeabi_dsub>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	e9ca 2300 	strd	r2, r3, [sl]
 8007564:	4620      	mov	r0, r4
 8007566:	4629      	mov	r1, r5
 8007568:	f7f8 fe46 	bl	80001f8 <__aeabi_dsub>
 800756c:	a398      	add	r3, pc, #608	; (adr r3, 80077d0 <__ieee754_rem_pio2+0x318>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	e7db      	b.n	800752c <__ieee754_rem_pio2+0x74>
 8007574:	f7f8 fe42 	bl	80001fc <__adddf3>
 8007578:	45b0      	cmp	r8, r6
 800757a:	4604      	mov	r4, r0
 800757c:	460d      	mov	r5, r1
 800757e:	d016      	beq.n	80075ae <__ieee754_rem_pio2+0xf6>
 8007580:	a38f      	add	r3, pc, #572	; (adr r3, 80077c0 <__ieee754_rem_pio2+0x308>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f8 fe39 	bl	80001fc <__adddf3>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	e9ca 2300 	strd	r2, r3, [sl]
 8007592:	4620      	mov	r0, r4
 8007594:	4629      	mov	r1, r5
 8007596:	f7f8 fe2f 	bl	80001f8 <__aeabi_dsub>
 800759a:	a389      	add	r3, pc, #548	; (adr r3, 80077c0 <__ieee754_rem_pio2+0x308>)
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f7f8 fe2c 	bl	80001fc <__adddf3>
 80075a4:	f04f 3bff 	mov.w	fp, #4294967295
 80075a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80075ac:	e7c4      	b.n	8007538 <__ieee754_rem_pio2+0x80>
 80075ae:	a386      	add	r3, pc, #536	; (adr r3, 80077c8 <__ieee754_rem_pio2+0x310>)
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	f7f8 fe22 	bl	80001fc <__adddf3>
 80075b8:	a385      	add	r3, pc, #532	; (adr r3, 80077d0 <__ieee754_rem_pio2+0x318>)
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	4604      	mov	r4, r0
 80075c0:	460d      	mov	r5, r1
 80075c2:	f7f8 fe1b 	bl	80001fc <__adddf3>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	e9ca 2300 	strd	r2, r3, [sl]
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f7f8 fe11 	bl	80001f8 <__aeabi_dsub>
 80075d6:	a37e      	add	r3, pc, #504	; (adr r3, 80077d0 <__ieee754_rem_pio2+0x318>)
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	e7e0      	b.n	80075a0 <__ieee754_rem_pio2+0xe8>
 80075de:	4b87      	ldr	r3, [pc, #540]	; (80077fc <__ieee754_rem_pio2+0x344>)
 80075e0:	4598      	cmp	r8, r3
 80075e2:	f300 80d9 	bgt.w	8007798 <__ieee754_rem_pio2+0x2e0>
 80075e6:	f000 fe39 	bl	800825c <fabs>
 80075ea:	ec55 4b10 	vmov	r4, r5, d0
 80075ee:	ee10 0a10 	vmov	r0, s0
 80075f2:	a379      	add	r3, pc, #484	; (adr r3, 80077d8 <__ieee754_rem_pio2+0x320>)
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	4629      	mov	r1, r5
 80075fa:	f7f8 ffb5 	bl	8000568 <__aeabi_dmul>
 80075fe:	4b80      	ldr	r3, [pc, #512]	; (8007800 <__ieee754_rem_pio2+0x348>)
 8007600:	2200      	movs	r2, #0
 8007602:	f7f8 fdfb 	bl	80001fc <__adddf3>
 8007606:	f7f9 fa49 	bl	8000a9c <__aeabi_d2iz>
 800760a:	4683      	mov	fp, r0
 800760c:	f7f8 ff42 	bl	8000494 <__aeabi_i2d>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	ec43 2b18 	vmov	d8, r2, r3
 8007618:	a367      	add	r3, pc, #412	; (adr r3, 80077b8 <__ieee754_rem_pio2+0x300>)
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f7f8 ffa3 	bl	8000568 <__aeabi_dmul>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4620      	mov	r0, r4
 8007628:	4629      	mov	r1, r5
 800762a:	f7f8 fde5 	bl	80001f8 <__aeabi_dsub>
 800762e:	a364      	add	r3, pc, #400	; (adr r3, 80077c0 <__ieee754_rem_pio2+0x308>)
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	4606      	mov	r6, r0
 8007636:	460f      	mov	r7, r1
 8007638:	ec51 0b18 	vmov	r0, r1, d8
 800763c:	f7f8 ff94 	bl	8000568 <__aeabi_dmul>
 8007640:	f1bb 0f1f 	cmp.w	fp, #31
 8007644:	4604      	mov	r4, r0
 8007646:	460d      	mov	r5, r1
 8007648:	dc0d      	bgt.n	8007666 <__ieee754_rem_pio2+0x1ae>
 800764a:	4b6e      	ldr	r3, [pc, #440]	; (8007804 <__ieee754_rem_pio2+0x34c>)
 800764c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007654:	4543      	cmp	r3, r8
 8007656:	d006      	beq.n	8007666 <__ieee754_rem_pio2+0x1ae>
 8007658:	4622      	mov	r2, r4
 800765a:	462b      	mov	r3, r5
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f7f8 fdca 	bl	80001f8 <__aeabi_dsub>
 8007664:	e00f      	b.n	8007686 <__ieee754_rem_pio2+0x1ce>
 8007666:	462b      	mov	r3, r5
 8007668:	4622      	mov	r2, r4
 800766a:	4630      	mov	r0, r6
 800766c:	4639      	mov	r1, r7
 800766e:	f7f8 fdc3 	bl	80001f8 <__aeabi_dsub>
 8007672:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007676:	9303      	str	r3, [sp, #12]
 8007678:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800767c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007680:	f1b8 0f10 	cmp.w	r8, #16
 8007684:	dc02      	bgt.n	800768c <__ieee754_rem_pio2+0x1d4>
 8007686:	e9ca 0100 	strd	r0, r1, [sl]
 800768a:	e039      	b.n	8007700 <__ieee754_rem_pio2+0x248>
 800768c:	a34e      	add	r3, pc, #312	; (adr r3, 80077c8 <__ieee754_rem_pio2+0x310>)
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	ec51 0b18 	vmov	r0, r1, d8
 8007696:	f7f8 ff67 	bl	8000568 <__aeabi_dmul>
 800769a:	4604      	mov	r4, r0
 800769c:	460d      	mov	r5, r1
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4630      	mov	r0, r6
 80076a4:	4639      	mov	r1, r7
 80076a6:	f7f8 fda7 	bl	80001f8 <__aeabi_dsub>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4680      	mov	r8, r0
 80076b0:	4689      	mov	r9, r1
 80076b2:	4630      	mov	r0, r6
 80076b4:	4639      	mov	r1, r7
 80076b6:	f7f8 fd9f 	bl	80001f8 <__aeabi_dsub>
 80076ba:	4622      	mov	r2, r4
 80076bc:	462b      	mov	r3, r5
 80076be:	f7f8 fd9b 	bl	80001f8 <__aeabi_dsub>
 80076c2:	a343      	add	r3, pc, #268	; (adr r3, 80077d0 <__ieee754_rem_pio2+0x318>)
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	4604      	mov	r4, r0
 80076ca:	460d      	mov	r5, r1
 80076cc:	ec51 0b18 	vmov	r0, r1, d8
 80076d0:	f7f8 ff4a 	bl	8000568 <__aeabi_dmul>
 80076d4:	4622      	mov	r2, r4
 80076d6:	462b      	mov	r3, r5
 80076d8:	f7f8 fd8e 	bl	80001f8 <__aeabi_dsub>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4604      	mov	r4, r0
 80076e2:	460d      	mov	r5, r1
 80076e4:	4640      	mov	r0, r8
 80076e6:	4649      	mov	r1, r9
 80076e8:	f7f8 fd86 	bl	80001f8 <__aeabi_dsub>
 80076ec:	9a03      	ldr	r2, [sp, #12]
 80076ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b31      	cmp	r3, #49	; 0x31
 80076f6:	dc24      	bgt.n	8007742 <__ieee754_rem_pio2+0x28a>
 80076f8:	e9ca 0100 	strd	r0, r1, [sl]
 80076fc:	4646      	mov	r6, r8
 80076fe:	464f      	mov	r7, r9
 8007700:	e9da 8900 	ldrd	r8, r9, [sl]
 8007704:	4630      	mov	r0, r6
 8007706:	4642      	mov	r2, r8
 8007708:	464b      	mov	r3, r9
 800770a:	4639      	mov	r1, r7
 800770c:	f7f8 fd74 	bl	80001f8 <__aeabi_dsub>
 8007710:	462b      	mov	r3, r5
 8007712:	4622      	mov	r2, r4
 8007714:	f7f8 fd70 	bl	80001f8 <__aeabi_dsub>
 8007718:	9b02      	ldr	r3, [sp, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007720:	f6bf af0a 	bge.w	8007538 <__ieee754_rem_pio2+0x80>
 8007724:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007728:	f8ca 3004 	str.w	r3, [sl, #4]
 800772c:	f8ca 8000 	str.w	r8, [sl]
 8007730:	f8ca 0008 	str.w	r0, [sl, #8]
 8007734:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007738:	f8ca 300c 	str.w	r3, [sl, #12]
 800773c:	f1cb 0b00 	rsb	fp, fp, #0
 8007740:	e6fa      	b.n	8007538 <__ieee754_rem_pio2+0x80>
 8007742:	a327      	add	r3, pc, #156	; (adr r3, 80077e0 <__ieee754_rem_pio2+0x328>)
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	ec51 0b18 	vmov	r0, r1, d8
 800774c:	f7f8 ff0c 	bl	8000568 <__aeabi_dmul>
 8007750:	4604      	mov	r4, r0
 8007752:	460d      	mov	r5, r1
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4640      	mov	r0, r8
 800775a:	4649      	mov	r1, r9
 800775c:	f7f8 fd4c 	bl	80001f8 <__aeabi_dsub>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4606      	mov	r6, r0
 8007766:	460f      	mov	r7, r1
 8007768:	4640      	mov	r0, r8
 800776a:	4649      	mov	r1, r9
 800776c:	f7f8 fd44 	bl	80001f8 <__aeabi_dsub>
 8007770:	4622      	mov	r2, r4
 8007772:	462b      	mov	r3, r5
 8007774:	f7f8 fd40 	bl	80001f8 <__aeabi_dsub>
 8007778:	a31b      	add	r3, pc, #108	; (adr r3, 80077e8 <__ieee754_rem_pio2+0x330>)
 800777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777e:	4604      	mov	r4, r0
 8007780:	460d      	mov	r5, r1
 8007782:	ec51 0b18 	vmov	r0, r1, d8
 8007786:	f7f8 feef 	bl	8000568 <__aeabi_dmul>
 800778a:	4622      	mov	r2, r4
 800778c:	462b      	mov	r3, r5
 800778e:	f7f8 fd33 	bl	80001f8 <__aeabi_dsub>
 8007792:	4604      	mov	r4, r0
 8007794:	460d      	mov	r5, r1
 8007796:	e75f      	b.n	8007658 <__ieee754_rem_pio2+0x1a0>
 8007798:	4b1b      	ldr	r3, [pc, #108]	; (8007808 <__ieee754_rem_pio2+0x350>)
 800779a:	4598      	cmp	r8, r3
 800779c:	dd36      	ble.n	800780c <__ieee754_rem_pio2+0x354>
 800779e:	ee10 2a10 	vmov	r2, s0
 80077a2:	462b      	mov	r3, r5
 80077a4:	4620      	mov	r0, r4
 80077a6:	4629      	mov	r1, r5
 80077a8:	f7f8 fd26 	bl	80001f8 <__aeabi_dsub>
 80077ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80077b0:	e9ca 0100 	strd	r0, r1, [sl]
 80077b4:	e694      	b.n	80074e0 <__ieee754_rem_pio2+0x28>
 80077b6:	bf00      	nop
 80077b8:	54400000 	.word	0x54400000
 80077bc:	3ff921fb 	.word	0x3ff921fb
 80077c0:	1a626331 	.word	0x1a626331
 80077c4:	3dd0b461 	.word	0x3dd0b461
 80077c8:	1a600000 	.word	0x1a600000
 80077cc:	3dd0b461 	.word	0x3dd0b461
 80077d0:	2e037073 	.word	0x2e037073
 80077d4:	3ba3198a 	.word	0x3ba3198a
 80077d8:	6dc9c883 	.word	0x6dc9c883
 80077dc:	3fe45f30 	.word	0x3fe45f30
 80077e0:	2e000000 	.word	0x2e000000
 80077e4:	3ba3198a 	.word	0x3ba3198a
 80077e8:	252049c1 	.word	0x252049c1
 80077ec:	397b839a 	.word	0x397b839a
 80077f0:	3fe921fb 	.word	0x3fe921fb
 80077f4:	4002d97b 	.word	0x4002d97b
 80077f8:	3ff921fb 	.word	0x3ff921fb
 80077fc:	413921fb 	.word	0x413921fb
 8007800:	3fe00000 	.word	0x3fe00000
 8007804:	080084f8 	.word	0x080084f8
 8007808:	7fefffff 	.word	0x7fefffff
 800780c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007810:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007814:	ee10 0a10 	vmov	r0, s0
 8007818:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800781c:	ee10 6a10 	vmov	r6, s0
 8007820:	460f      	mov	r7, r1
 8007822:	f7f9 f93b 	bl	8000a9c <__aeabi_d2iz>
 8007826:	f7f8 fe35 	bl	8000494 <__aeabi_i2d>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4630      	mov	r0, r6
 8007830:	4639      	mov	r1, r7
 8007832:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007836:	f7f8 fcdf 	bl	80001f8 <__aeabi_dsub>
 800783a:	4b22      	ldr	r3, [pc, #136]	; (80078c4 <__ieee754_rem_pio2+0x40c>)
 800783c:	2200      	movs	r2, #0
 800783e:	f7f8 fe93 	bl	8000568 <__aeabi_dmul>
 8007842:	460f      	mov	r7, r1
 8007844:	4606      	mov	r6, r0
 8007846:	f7f9 f929 	bl	8000a9c <__aeabi_d2iz>
 800784a:	f7f8 fe23 	bl	8000494 <__aeabi_i2d>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4630      	mov	r0, r6
 8007854:	4639      	mov	r1, r7
 8007856:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800785a:	f7f8 fccd 	bl	80001f8 <__aeabi_dsub>
 800785e:	4b19      	ldr	r3, [pc, #100]	; (80078c4 <__ieee754_rem_pio2+0x40c>)
 8007860:	2200      	movs	r2, #0
 8007862:	f7f8 fe81 	bl	8000568 <__aeabi_dmul>
 8007866:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800786a:	ad04      	add	r5, sp, #16
 800786c:	f04f 0803 	mov.w	r8, #3
 8007870:	46a9      	mov	r9, r5
 8007872:	2600      	movs	r6, #0
 8007874:	2700      	movs	r7, #0
 8007876:	4632      	mov	r2, r6
 8007878:	463b      	mov	r3, r7
 800787a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800787e:	46c3      	mov	fp, r8
 8007880:	3d08      	subs	r5, #8
 8007882:	f108 38ff 	add.w	r8, r8, #4294967295
 8007886:	f7f9 f8d7 	bl	8000a38 <__aeabi_dcmpeq>
 800788a:	2800      	cmp	r0, #0
 800788c:	d1f3      	bne.n	8007876 <__ieee754_rem_pio2+0x3be>
 800788e:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <__ieee754_rem_pio2+0x410>)
 8007890:	9301      	str	r3, [sp, #4]
 8007892:	2302      	movs	r3, #2
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	4622      	mov	r2, r4
 8007898:	465b      	mov	r3, fp
 800789a:	4651      	mov	r1, sl
 800789c:	4648      	mov	r0, r9
 800789e:	f000 f8df 	bl	8007a60 <__kernel_rem_pio2>
 80078a2:	9b02      	ldr	r3, [sp, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	4683      	mov	fp, r0
 80078a8:	f6bf ae46 	bge.w	8007538 <__ieee754_rem_pio2+0x80>
 80078ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 80078b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80078b4:	f8ca 3004 	str.w	r3, [sl, #4]
 80078b8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80078bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80078c0:	e73a      	b.n	8007738 <__ieee754_rem_pio2+0x280>
 80078c2:	bf00      	nop
 80078c4:	41700000 	.word	0x41700000
 80078c8:	08008578 	.word	0x08008578
 80078cc:	00000000 	.word	0x00000000

080078d0 <__kernel_cos>:
 80078d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d4:	ec57 6b10 	vmov	r6, r7, d0
 80078d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80078dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80078e0:	ed8d 1b00 	vstr	d1, [sp]
 80078e4:	da07      	bge.n	80078f6 <__kernel_cos+0x26>
 80078e6:	ee10 0a10 	vmov	r0, s0
 80078ea:	4639      	mov	r1, r7
 80078ec:	f7f9 f8d6 	bl	8000a9c <__aeabi_d2iz>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	f000 8088 	beq.w	8007a06 <__kernel_cos+0x136>
 80078f6:	4632      	mov	r2, r6
 80078f8:	463b      	mov	r3, r7
 80078fa:	4630      	mov	r0, r6
 80078fc:	4639      	mov	r1, r7
 80078fe:	f7f8 fe33 	bl	8000568 <__aeabi_dmul>
 8007902:	4b51      	ldr	r3, [pc, #324]	; (8007a48 <__kernel_cos+0x178>)
 8007904:	2200      	movs	r2, #0
 8007906:	4604      	mov	r4, r0
 8007908:	460d      	mov	r5, r1
 800790a:	f7f8 fe2d 	bl	8000568 <__aeabi_dmul>
 800790e:	a340      	add	r3, pc, #256	; (adr r3, 8007a10 <__kernel_cos+0x140>)
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	4682      	mov	sl, r0
 8007916:	468b      	mov	fp, r1
 8007918:	4620      	mov	r0, r4
 800791a:	4629      	mov	r1, r5
 800791c:	f7f8 fe24 	bl	8000568 <__aeabi_dmul>
 8007920:	a33d      	add	r3, pc, #244	; (adr r3, 8007a18 <__kernel_cos+0x148>)
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f7f8 fc69 	bl	80001fc <__adddf3>
 800792a:	4622      	mov	r2, r4
 800792c:	462b      	mov	r3, r5
 800792e:	f7f8 fe1b 	bl	8000568 <__aeabi_dmul>
 8007932:	a33b      	add	r3, pc, #236	; (adr r3, 8007a20 <__kernel_cos+0x150>)
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	f7f8 fc5e 	bl	80001f8 <__aeabi_dsub>
 800793c:	4622      	mov	r2, r4
 800793e:	462b      	mov	r3, r5
 8007940:	f7f8 fe12 	bl	8000568 <__aeabi_dmul>
 8007944:	a338      	add	r3, pc, #224	; (adr r3, 8007a28 <__kernel_cos+0x158>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	f7f8 fc57 	bl	80001fc <__adddf3>
 800794e:	4622      	mov	r2, r4
 8007950:	462b      	mov	r3, r5
 8007952:	f7f8 fe09 	bl	8000568 <__aeabi_dmul>
 8007956:	a336      	add	r3, pc, #216	; (adr r3, 8007a30 <__kernel_cos+0x160>)
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	f7f8 fc4c 	bl	80001f8 <__aeabi_dsub>
 8007960:	4622      	mov	r2, r4
 8007962:	462b      	mov	r3, r5
 8007964:	f7f8 fe00 	bl	8000568 <__aeabi_dmul>
 8007968:	a333      	add	r3, pc, #204	; (adr r3, 8007a38 <__kernel_cos+0x168>)
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	f7f8 fc45 	bl	80001fc <__adddf3>
 8007972:	4622      	mov	r2, r4
 8007974:	462b      	mov	r3, r5
 8007976:	f7f8 fdf7 	bl	8000568 <__aeabi_dmul>
 800797a:	4622      	mov	r2, r4
 800797c:	462b      	mov	r3, r5
 800797e:	f7f8 fdf3 	bl	8000568 <__aeabi_dmul>
 8007982:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007986:	4604      	mov	r4, r0
 8007988:	460d      	mov	r5, r1
 800798a:	4630      	mov	r0, r6
 800798c:	4639      	mov	r1, r7
 800798e:	f7f8 fdeb 	bl	8000568 <__aeabi_dmul>
 8007992:	460b      	mov	r3, r1
 8007994:	4602      	mov	r2, r0
 8007996:	4629      	mov	r1, r5
 8007998:	4620      	mov	r0, r4
 800799a:	f7f8 fc2d 	bl	80001f8 <__aeabi_dsub>
 800799e:	4b2b      	ldr	r3, [pc, #172]	; (8007a4c <__kernel_cos+0x17c>)
 80079a0:	4598      	cmp	r8, r3
 80079a2:	4606      	mov	r6, r0
 80079a4:	460f      	mov	r7, r1
 80079a6:	dc10      	bgt.n	80079ca <__kernel_cos+0xfa>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4650      	mov	r0, sl
 80079ae:	4659      	mov	r1, fp
 80079b0:	f7f8 fc22 	bl	80001f8 <__aeabi_dsub>
 80079b4:	460b      	mov	r3, r1
 80079b6:	4926      	ldr	r1, [pc, #152]	; (8007a50 <__kernel_cos+0x180>)
 80079b8:	4602      	mov	r2, r0
 80079ba:	2000      	movs	r0, #0
 80079bc:	f7f8 fc1c 	bl	80001f8 <__aeabi_dsub>
 80079c0:	ec41 0b10 	vmov	d0, r0, r1
 80079c4:	b003      	add	sp, #12
 80079c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ca:	4b22      	ldr	r3, [pc, #136]	; (8007a54 <__kernel_cos+0x184>)
 80079cc:	4920      	ldr	r1, [pc, #128]	; (8007a50 <__kernel_cos+0x180>)
 80079ce:	4598      	cmp	r8, r3
 80079d0:	bfcc      	ite	gt
 80079d2:	4d21      	ldrgt	r5, [pc, #132]	; (8007a58 <__kernel_cos+0x188>)
 80079d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80079d8:	2400      	movs	r4, #0
 80079da:	4622      	mov	r2, r4
 80079dc:	462b      	mov	r3, r5
 80079de:	2000      	movs	r0, #0
 80079e0:	f7f8 fc0a 	bl	80001f8 <__aeabi_dsub>
 80079e4:	4622      	mov	r2, r4
 80079e6:	4680      	mov	r8, r0
 80079e8:	4689      	mov	r9, r1
 80079ea:	462b      	mov	r3, r5
 80079ec:	4650      	mov	r0, sl
 80079ee:	4659      	mov	r1, fp
 80079f0:	f7f8 fc02 	bl	80001f8 <__aeabi_dsub>
 80079f4:	4632      	mov	r2, r6
 80079f6:	463b      	mov	r3, r7
 80079f8:	f7f8 fbfe 	bl	80001f8 <__aeabi_dsub>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4640      	mov	r0, r8
 8007a02:	4649      	mov	r1, r9
 8007a04:	e7da      	b.n	80079bc <__kernel_cos+0xec>
 8007a06:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007a40 <__kernel_cos+0x170>
 8007a0a:	e7db      	b.n	80079c4 <__kernel_cos+0xf4>
 8007a0c:	f3af 8000 	nop.w
 8007a10:	be8838d4 	.word	0xbe8838d4
 8007a14:	bda8fae9 	.word	0xbda8fae9
 8007a18:	bdb4b1c4 	.word	0xbdb4b1c4
 8007a1c:	3e21ee9e 	.word	0x3e21ee9e
 8007a20:	809c52ad 	.word	0x809c52ad
 8007a24:	3e927e4f 	.word	0x3e927e4f
 8007a28:	19cb1590 	.word	0x19cb1590
 8007a2c:	3efa01a0 	.word	0x3efa01a0
 8007a30:	16c15177 	.word	0x16c15177
 8007a34:	3f56c16c 	.word	0x3f56c16c
 8007a38:	5555554c 	.word	0x5555554c
 8007a3c:	3fa55555 	.word	0x3fa55555
 8007a40:	00000000 	.word	0x00000000
 8007a44:	3ff00000 	.word	0x3ff00000
 8007a48:	3fe00000 	.word	0x3fe00000
 8007a4c:	3fd33332 	.word	0x3fd33332
 8007a50:	3ff00000 	.word	0x3ff00000
 8007a54:	3fe90000 	.word	0x3fe90000
 8007a58:	3fd20000 	.word	0x3fd20000
 8007a5c:	00000000 	.word	0x00000000

08007a60 <__kernel_rem_pio2>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	ed2d 8b02 	vpush	{d8}
 8007a68:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007a6c:	f112 0f14 	cmn.w	r2, #20
 8007a70:	9308      	str	r3, [sp, #32]
 8007a72:	9101      	str	r1, [sp, #4]
 8007a74:	4bc6      	ldr	r3, [pc, #792]	; (8007d90 <__kernel_rem_pio2+0x330>)
 8007a76:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007a78:	9009      	str	r0, [sp, #36]	; 0x24
 8007a7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a7e:	9304      	str	r3, [sp, #16]
 8007a80:	9b08      	ldr	r3, [sp, #32]
 8007a82:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a86:	bfa8      	it	ge
 8007a88:	1ed4      	subge	r4, r2, #3
 8007a8a:	9306      	str	r3, [sp, #24]
 8007a8c:	bfb2      	itee	lt
 8007a8e:	2400      	movlt	r4, #0
 8007a90:	2318      	movge	r3, #24
 8007a92:	fb94 f4f3 	sdivge	r4, r4, r3
 8007a96:	f06f 0317 	mvn.w	r3, #23
 8007a9a:	fb04 3303 	mla	r3, r4, r3, r3
 8007a9e:	eb03 0a02 	add.w	sl, r3, r2
 8007aa2:	9b04      	ldr	r3, [sp, #16]
 8007aa4:	9a06      	ldr	r2, [sp, #24]
 8007aa6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007d80 <__kernel_rem_pio2+0x320>
 8007aaa:	eb03 0802 	add.w	r8, r3, r2
 8007aae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007ab0:	1aa7      	subs	r7, r4, r2
 8007ab2:	ae20      	add	r6, sp, #128	; 0x80
 8007ab4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007ab8:	2500      	movs	r5, #0
 8007aba:	4545      	cmp	r5, r8
 8007abc:	dd18      	ble.n	8007af0 <__kernel_rem_pio2+0x90>
 8007abe:	9b08      	ldr	r3, [sp, #32]
 8007ac0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007ac4:	aa20      	add	r2, sp, #128	; 0x80
 8007ac6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007d80 <__kernel_rem_pio2+0x320>
 8007aca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007ace:	f1c3 0301 	rsb	r3, r3, #1
 8007ad2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007ad6:	9307      	str	r3, [sp, #28]
 8007ad8:	9b07      	ldr	r3, [sp, #28]
 8007ada:	9a04      	ldr	r2, [sp, #16]
 8007adc:	4443      	add	r3, r8
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	db2f      	blt.n	8007b42 <__kernel_rem_pio2+0xe2>
 8007ae2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007ae6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007aea:	462f      	mov	r7, r5
 8007aec:	2600      	movs	r6, #0
 8007aee:	e01b      	b.n	8007b28 <__kernel_rem_pio2+0xc8>
 8007af0:	42ef      	cmn	r7, r5
 8007af2:	d407      	bmi.n	8007b04 <__kernel_rem_pio2+0xa4>
 8007af4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007af8:	f7f8 fccc 	bl	8000494 <__aeabi_i2d>
 8007afc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007b00:	3501      	adds	r5, #1
 8007b02:	e7da      	b.n	8007aba <__kernel_rem_pio2+0x5a>
 8007b04:	ec51 0b18 	vmov	r0, r1, d8
 8007b08:	e7f8      	b.n	8007afc <__kernel_rem_pio2+0x9c>
 8007b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b0e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007b12:	f7f8 fd29 	bl	8000568 <__aeabi_dmul>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b1e:	f7f8 fb6d 	bl	80001fc <__adddf3>
 8007b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b26:	3601      	adds	r6, #1
 8007b28:	9b06      	ldr	r3, [sp, #24]
 8007b2a:	429e      	cmp	r6, r3
 8007b2c:	f1a7 0708 	sub.w	r7, r7, #8
 8007b30:	ddeb      	ble.n	8007b0a <__kernel_rem_pio2+0xaa>
 8007b32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b36:	3508      	adds	r5, #8
 8007b38:	ecab 7b02 	vstmia	fp!, {d7}
 8007b3c:	f108 0801 	add.w	r8, r8, #1
 8007b40:	e7ca      	b.n	8007ad8 <__kernel_rem_pio2+0x78>
 8007b42:	9b04      	ldr	r3, [sp, #16]
 8007b44:	aa0c      	add	r2, sp, #48	; 0x30
 8007b46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b4c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007b4e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007b52:	9c04      	ldr	r4, [sp, #16]
 8007b54:	930a      	str	r3, [sp, #40]	; 0x28
 8007b56:	ab98      	add	r3, sp, #608	; 0x260
 8007b58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b5c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007b60:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007b64:	f8cd b008 	str.w	fp, [sp, #8]
 8007b68:	4625      	mov	r5, r4
 8007b6a:	2d00      	cmp	r5, #0
 8007b6c:	dc78      	bgt.n	8007c60 <__kernel_rem_pio2+0x200>
 8007b6e:	ec47 6b10 	vmov	d0, r6, r7
 8007b72:	4650      	mov	r0, sl
 8007b74:	f000 fbfc 	bl	8008370 <scalbn>
 8007b78:	ec57 6b10 	vmov	r6, r7, d0
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007b82:	ee10 0a10 	vmov	r0, s0
 8007b86:	4639      	mov	r1, r7
 8007b88:	f7f8 fcee 	bl	8000568 <__aeabi_dmul>
 8007b8c:	ec41 0b10 	vmov	d0, r0, r1
 8007b90:	f000 fb6e 	bl	8008270 <floor>
 8007b94:	4b7f      	ldr	r3, [pc, #508]	; (8007d94 <__kernel_rem_pio2+0x334>)
 8007b96:	ec51 0b10 	vmov	r0, r1, d0
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f7f8 fce4 	bl	8000568 <__aeabi_dmul>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	f7f8 fb26 	bl	80001f8 <__aeabi_dsub>
 8007bac:	460f      	mov	r7, r1
 8007bae:	4606      	mov	r6, r0
 8007bb0:	f7f8 ff74 	bl	8000a9c <__aeabi_d2iz>
 8007bb4:	9007      	str	r0, [sp, #28]
 8007bb6:	f7f8 fc6d 	bl	8000494 <__aeabi_i2d>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	f7f8 fb19 	bl	80001f8 <__aeabi_dsub>
 8007bc6:	f1ba 0f00 	cmp.w	sl, #0
 8007bca:	4606      	mov	r6, r0
 8007bcc:	460f      	mov	r7, r1
 8007bce:	dd70      	ble.n	8007cb2 <__kernel_rem_pio2+0x252>
 8007bd0:	1e62      	subs	r2, r4, #1
 8007bd2:	ab0c      	add	r3, sp, #48	; 0x30
 8007bd4:	9d07      	ldr	r5, [sp, #28]
 8007bd6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007bda:	f1ca 0118 	rsb	r1, sl, #24
 8007bde:	fa40 f301 	asr.w	r3, r0, r1
 8007be2:	441d      	add	r5, r3
 8007be4:	408b      	lsls	r3, r1
 8007be6:	1ac0      	subs	r0, r0, r3
 8007be8:	ab0c      	add	r3, sp, #48	; 0x30
 8007bea:	9507      	str	r5, [sp, #28]
 8007bec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007bf0:	f1ca 0317 	rsb	r3, sl, #23
 8007bf4:	fa40 f303 	asr.w	r3, r0, r3
 8007bf8:	9302      	str	r3, [sp, #8]
 8007bfa:	9b02      	ldr	r3, [sp, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dd66      	ble.n	8007cce <__kernel_rem_pio2+0x26e>
 8007c00:	9b07      	ldr	r3, [sp, #28]
 8007c02:	2200      	movs	r2, #0
 8007c04:	3301      	adds	r3, #1
 8007c06:	9307      	str	r3, [sp, #28]
 8007c08:	4615      	mov	r5, r2
 8007c0a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007c0e:	4294      	cmp	r4, r2
 8007c10:	f300 8099 	bgt.w	8007d46 <__kernel_rem_pio2+0x2e6>
 8007c14:	f1ba 0f00 	cmp.w	sl, #0
 8007c18:	dd07      	ble.n	8007c2a <__kernel_rem_pio2+0x1ca>
 8007c1a:	f1ba 0f01 	cmp.w	sl, #1
 8007c1e:	f000 80a5 	beq.w	8007d6c <__kernel_rem_pio2+0x30c>
 8007c22:	f1ba 0f02 	cmp.w	sl, #2
 8007c26:	f000 80c1 	beq.w	8007dac <__kernel_rem_pio2+0x34c>
 8007c2a:	9b02      	ldr	r3, [sp, #8]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d14e      	bne.n	8007cce <__kernel_rem_pio2+0x26e>
 8007c30:	4632      	mov	r2, r6
 8007c32:	463b      	mov	r3, r7
 8007c34:	4958      	ldr	r1, [pc, #352]	; (8007d98 <__kernel_rem_pio2+0x338>)
 8007c36:	2000      	movs	r0, #0
 8007c38:	f7f8 fade 	bl	80001f8 <__aeabi_dsub>
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	460f      	mov	r7, r1
 8007c40:	2d00      	cmp	r5, #0
 8007c42:	d044      	beq.n	8007cce <__kernel_rem_pio2+0x26e>
 8007c44:	4650      	mov	r0, sl
 8007c46:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007d88 <__kernel_rem_pio2+0x328>
 8007c4a:	f000 fb91 	bl	8008370 <scalbn>
 8007c4e:	4630      	mov	r0, r6
 8007c50:	4639      	mov	r1, r7
 8007c52:	ec53 2b10 	vmov	r2, r3, d0
 8007c56:	f7f8 facf 	bl	80001f8 <__aeabi_dsub>
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	460f      	mov	r7, r1
 8007c5e:	e036      	b.n	8007cce <__kernel_rem_pio2+0x26e>
 8007c60:	4b4e      	ldr	r3, [pc, #312]	; (8007d9c <__kernel_rem_pio2+0x33c>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 fc7e 	bl	8000568 <__aeabi_dmul>
 8007c6c:	f7f8 ff16 	bl	8000a9c <__aeabi_d2iz>
 8007c70:	f7f8 fc10 	bl	8000494 <__aeabi_i2d>
 8007c74:	4b4a      	ldr	r3, [pc, #296]	; (8007da0 <__kernel_rem_pio2+0x340>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	4680      	mov	r8, r0
 8007c7a:	4689      	mov	r9, r1
 8007c7c:	f7f8 fc74 	bl	8000568 <__aeabi_dmul>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4630      	mov	r0, r6
 8007c86:	4639      	mov	r1, r7
 8007c88:	f7f8 fab6 	bl	80001f8 <__aeabi_dsub>
 8007c8c:	f7f8 ff06 	bl	8000a9c <__aeabi_d2iz>
 8007c90:	9b02      	ldr	r3, [sp, #8]
 8007c92:	f843 0b04 	str.w	r0, [r3], #4
 8007c96:	3d01      	subs	r5, #1
 8007c98:	9302      	str	r3, [sp, #8]
 8007c9a:	ab70      	add	r3, sp, #448	; 0x1c0
 8007c9c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	f7f8 faa8 	bl	80001fc <__adddf3>
 8007cac:	4606      	mov	r6, r0
 8007cae:	460f      	mov	r7, r1
 8007cb0:	e75b      	b.n	8007b6a <__kernel_rem_pio2+0x10a>
 8007cb2:	d105      	bne.n	8007cc0 <__kernel_rem_pio2+0x260>
 8007cb4:	1e63      	subs	r3, r4, #1
 8007cb6:	aa0c      	add	r2, sp, #48	; 0x30
 8007cb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007cbc:	15c3      	asrs	r3, r0, #23
 8007cbe:	e79b      	b.n	8007bf8 <__kernel_rem_pio2+0x198>
 8007cc0:	4b38      	ldr	r3, [pc, #224]	; (8007da4 <__kernel_rem_pio2+0x344>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f7f8 fed6 	bl	8000a74 <__aeabi_dcmpge>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d139      	bne.n	8007d40 <__kernel_rem_pio2+0x2e0>
 8007ccc:	9002      	str	r0, [sp, #8]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	f7f8 feaf 	bl	8000a38 <__aeabi_dcmpeq>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	f000 80b4 	beq.w	8007e48 <__kernel_rem_pio2+0x3e8>
 8007ce0:	f104 3bff 	add.w	fp, r4, #4294967295
 8007ce4:	465b      	mov	r3, fp
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	9904      	ldr	r1, [sp, #16]
 8007cea:	428b      	cmp	r3, r1
 8007cec:	da65      	bge.n	8007dba <__kernel_rem_pio2+0x35a>
 8007cee:	2a00      	cmp	r2, #0
 8007cf0:	d07b      	beq.n	8007dea <__kernel_rem_pio2+0x38a>
 8007cf2:	ab0c      	add	r3, sp, #48	; 0x30
 8007cf4:	f1aa 0a18 	sub.w	sl, sl, #24
 8007cf8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 80a0 	beq.w	8007e42 <__kernel_rem_pio2+0x3e2>
 8007d02:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007d88 <__kernel_rem_pio2+0x328>
 8007d06:	4650      	mov	r0, sl
 8007d08:	f000 fb32 	bl	8008370 <scalbn>
 8007d0c:	4f23      	ldr	r7, [pc, #140]	; (8007d9c <__kernel_rem_pio2+0x33c>)
 8007d0e:	ec55 4b10 	vmov	r4, r5, d0
 8007d12:	46d8      	mov	r8, fp
 8007d14:	2600      	movs	r6, #0
 8007d16:	f1b8 0f00 	cmp.w	r8, #0
 8007d1a:	f280 80cf 	bge.w	8007ebc <__kernel_rem_pio2+0x45c>
 8007d1e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007d80 <__kernel_rem_pio2+0x320>
 8007d22:	465f      	mov	r7, fp
 8007d24:	f04f 0800 	mov.w	r8, #0
 8007d28:	2f00      	cmp	r7, #0
 8007d2a:	f2c0 80fd 	blt.w	8007f28 <__kernel_rem_pio2+0x4c8>
 8007d2e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007d30:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007da8 <__kernel_rem_pio2+0x348>
 8007d34:	ec55 4b18 	vmov	r4, r5, d8
 8007d38:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007d3c:	2600      	movs	r6, #0
 8007d3e:	e0e5      	b.n	8007f0c <__kernel_rem_pio2+0x4ac>
 8007d40:	2302      	movs	r3, #2
 8007d42:	9302      	str	r3, [sp, #8]
 8007d44:	e75c      	b.n	8007c00 <__kernel_rem_pio2+0x1a0>
 8007d46:	f8db 3000 	ldr.w	r3, [fp]
 8007d4a:	b955      	cbnz	r5, 8007d62 <__kernel_rem_pio2+0x302>
 8007d4c:	b123      	cbz	r3, 8007d58 <__kernel_rem_pio2+0x2f8>
 8007d4e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007d52:	f8cb 3000 	str.w	r3, [fp]
 8007d56:	2301      	movs	r3, #1
 8007d58:	3201      	adds	r2, #1
 8007d5a:	f10b 0b04 	add.w	fp, fp, #4
 8007d5e:	461d      	mov	r5, r3
 8007d60:	e755      	b.n	8007c0e <__kernel_rem_pio2+0x1ae>
 8007d62:	1acb      	subs	r3, r1, r3
 8007d64:	f8cb 3000 	str.w	r3, [fp]
 8007d68:	462b      	mov	r3, r5
 8007d6a:	e7f5      	b.n	8007d58 <__kernel_rem_pio2+0x2f8>
 8007d6c:	1e62      	subs	r2, r4, #1
 8007d6e:	ab0c      	add	r3, sp, #48	; 0x30
 8007d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d74:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007d78:	a90c      	add	r1, sp, #48	; 0x30
 8007d7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007d7e:	e754      	b.n	8007c2a <__kernel_rem_pio2+0x1ca>
	...
 8007d8c:	3ff00000 	.word	0x3ff00000
 8007d90:	080086c0 	.word	0x080086c0
 8007d94:	40200000 	.word	0x40200000
 8007d98:	3ff00000 	.word	0x3ff00000
 8007d9c:	3e700000 	.word	0x3e700000
 8007da0:	41700000 	.word	0x41700000
 8007da4:	3fe00000 	.word	0x3fe00000
 8007da8:	08008680 	.word	0x08008680
 8007dac:	1e62      	subs	r2, r4, #1
 8007dae:	ab0c      	add	r3, sp, #48	; 0x30
 8007db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007db8:	e7de      	b.n	8007d78 <__kernel_rem_pio2+0x318>
 8007dba:	a90c      	add	r1, sp, #48	; 0x30
 8007dbc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	e790      	b.n	8007ce8 <__kernel_rem_pio2+0x288>
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007dcc:	2900      	cmp	r1, #0
 8007dce:	d0fa      	beq.n	8007dc6 <__kernel_rem_pio2+0x366>
 8007dd0:	9a08      	ldr	r2, [sp, #32]
 8007dd2:	18e3      	adds	r3, r4, r3
 8007dd4:	18a6      	adds	r6, r4, r2
 8007dd6:	aa20      	add	r2, sp, #128	; 0x80
 8007dd8:	1c65      	adds	r5, r4, #1
 8007dda:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007dde:	9302      	str	r3, [sp, #8]
 8007de0:	9b02      	ldr	r3, [sp, #8]
 8007de2:	42ab      	cmp	r3, r5
 8007de4:	da04      	bge.n	8007df0 <__kernel_rem_pio2+0x390>
 8007de6:	461c      	mov	r4, r3
 8007de8:	e6b5      	b.n	8007b56 <__kernel_rem_pio2+0xf6>
 8007dea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dec:	2301      	movs	r3, #1
 8007dee:	e7eb      	b.n	8007dc8 <__kernel_rem_pio2+0x368>
 8007df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007df6:	f7f8 fb4d 	bl	8000494 <__aeabi_i2d>
 8007dfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e00:	46b3      	mov	fp, r6
 8007e02:	461c      	mov	r4, r3
 8007e04:	2700      	movs	r7, #0
 8007e06:	f04f 0800 	mov.w	r8, #0
 8007e0a:	f04f 0900 	mov.w	r9, #0
 8007e0e:	9b06      	ldr	r3, [sp, #24]
 8007e10:	429f      	cmp	r7, r3
 8007e12:	dd06      	ble.n	8007e22 <__kernel_rem_pio2+0x3c2>
 8007e14:	ab70      	add	r3, sp, #448	; 0x1c0
 8007e16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007e1a:	e9c3 8900 	strd	r8, r9, [r3]
 8007e1e:	3501      	adds	r5, #1
 8007e20:	e7de      	b.n	8007de0 <__kernel_rem_pio2+0x380>
 8007e22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007e26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007e2a:	f7f8 fb9d 	bl	8000568 <__aeabi_dmul>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4640      	mov	r0, r8
 8007e34:	4649      	mov	r1, r9
 8007e36:	f7f8 f9e1 	bl	80001fc <__adddf3>
 8007e3a:	3701      	adds	r7, #1
 8007e3c:	4680      	mov	r8, r0
 8007e3e:	4689      	mov	r9, r1
 8007e40:	e7e5      	b.n	8007e0e <__kernel_rem_pio2+0x3ae>
 8007e42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e46:	e754      	b.n	8007cf2 <__kernel_rem_pio2+0x292>
 8007e48:	ec47 6b10 	vmov	d0, r6, r7
 8007e4c:	f1ca 0000 	rsb	r0, sl, #0
 8007e50:	f000 fa8e 	bl	8008370 <scalbn>
 8007e54:	ec57 6b10 	vmov	r6, r7, d0
 8007e58:	4b9f      	ldr	r3, [pc, #636]	; (80080d8 <__kernel_rem_pio2+0x678>)
 8007e5a:	ee10 0a10 	vmov	r0, s0
 8007e5e:	2200      	movs	r2, #0
 8007e60:	4639      	mov	r1, r7
 8007e62:	f7f8 fe07 	bl	8000a74 <__aeabi_dcmpge>
 8007e66:	b300      	cbz	r0, 8007eaa <__kernel_rem_pio2+0x44a>
 8007e68:	4b9c      	ldr	r3, [pc, #624]	; (80080dc <__kernel_rem_pio2+0x67c>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	4639      	mov	r1, r7
 8007e70:	f7f8 fb7a 	bl	8000568 <__aeabi_dmul>
 8007e74:	f7f8 fe12 	bl	8000a9c <__aeabi_d2iz>
 8007e78:	4605      	mov	r5, r0
 8007e7a:	f7f8 fb0b 	bl	8000494 <__aeabi_i2d>
 8007e7e:	4b96      	ldr	r3, [pc, #600]	; (80080d8 <__kernel_rem_pio2+0x678>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	f7f8 fb71 	bl	8000568 <__aeabi_dmul>
 8007e86:	460b      	mov	r3, r1
 8007e88:	4602      	mov	r2, r0
 8007e8a:	4639      	mov	r1, r7
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7f8 f9b3 	bl	80001f8 <__aeabi_dsub>
 8007e92:	f7f8 fe03 	bl	8000a9c <__aeabi_d2iz>
 8007e96:	f104 0b01 	add.w	fp, r4, #1
 8007e9a:	ab0c      	add	r3, sp, #48	; 0x30
 8007e9c:	f10a 0a18 	add.w	sl, sl, #24
 8007ea0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007ea4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007ea8:	e72b      	b.n	8007d02 <__kernel_rem_pio2+0x2a2>
 8007eaa:	4630      	mov	r0, r6
 8007eac:	4639      	mov	r1, r7
 8007eae:	f7f8 fdf5 	bl	8000a9c <__aeabi_d2iz>
 8007eb2:	ab0c      	add	r3, sp, #48	; 0x30
 8007eb4:	46a3      	mov	fp, r4
 8007eb6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007eba:	e722      	b.n	8007d02 <__kernel_rem_pio2+0x2a2>
 8007ebc:	ab70      	add	r3, sp, #448	; 0x1c0
 8007ebe:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007ec2:	ab0c      	add	r3, sp, #48	; 0x30
 8007ec4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007ec8:	f7f8 fae4 	bl	8000494 <__aeabi_i2d>
 8007ecc:	4622      	mov	r2, r4
 8007ece:	462b      	mov	r3, r5
 8007ed0:	f7f8 fb4a 	bl	8000568 <__aeabi_dmul>
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	e9c9 0100 	strd	r0, r1, [r9]
 8007eda:	463b      	mov	r3, r7
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 fb42 	bl	8000568 <__aeabi_dmul>
 8007ee4:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	e713      	b.n	8007d16 <__kernel_rem_pio2+0x2b6>
 8007eee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007ef2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007ef6:	f7f8 fb37 	bl	8000568 <__aeabi_dmul>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4620      	mov	r0, r4
 8007f00:	4629      	mov	r1, r5
 8007f02:	f7f8 f97b 	bl	80001fc <__adddf3>
 8007f06:	3601      	adds	r6, #1
 8007f08:	4604      	mov	r4, r0
 8007f0a:	460d      	mov	r5, r1
 8007f0c:	9b04      	ldr	r3, [sp, #16]
 8007f0e:	429e      	cmp	r6, r3
 8007f10:	dc01      	bgt.n	8007f16 <__kernel_rem_pio2+0x4b6>
 8007f12:	45b0      	cmp	r8, r6
 8007f14:	daeb      	bge.n	8007eee <__kernel_rem_pio2+0x48e>
 8007f16:	ab48      	add	r3, sp, #288	; 0x120
 8007f18:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007f1c:	e9c3 4500 	strd	r4, r5, [r3]
 8007f20:	3f01      	subs	r7, #1
 8007f22:	f108 0801 	add.w	r8, r8, #1
 8007f26:	e6ff      	b.n	8007d28 <__kernel_rem_pio2+0x2c8>
 8007f28:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	dc0b      	bgt.n	8007f46 <__kernel_rem_pio2+0x4e6>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dc6e      	bgt.n	8008010 <__kernel_rem_pio2+0x5b0>
 8007f32:	d045      	beq.n	8007fc0 <__kernel_rem_pio2+0x560>
 8007f34:	9b07      	ldr	r3, [sp, #28]
 8007f36:	f003 0007 	and.w	r0, r3, #7
 8007f3a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007f3e:	ecbd 8b02 	vpop	{d8}
 8007f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f46:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d1f3      	bne.n	8007f34 <__kernel_rem_pio2+0x4d4>
 8007f4c:	ab48      	add	r3, sp, #288	; 0x120
 8007f4e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007f52:	46d0      	mov	r8, sl
 8007f54:	46d9      	mov	r9, fp
 8007f56:	f1b9 0f00 	cmp.w	r9, #0
 8007f5a:	f1a8 0808 	sub.w	r8, r8, #8
 8007f5e:	dc64      	bgt.n	800802a <__kernel_rem_pio2+0x5ca>
 8007f60:	465c      	mov	r4, fp
 8007f62:	2c01      	cmp	r4, #1
 8007f64:	f1aa 0a08 	sub.w	sl, sl, #8
 8007f68:	dc7e      	bgt.n	8008068 <__kernel_rem_pio2+0x608>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	f1bb 0f01 	cmp.w	fp, #1
 8007f72:	f300 8097 	bgt.w	80080a4 <__kernel_rem_pio2+0x644>
 8007f76:	9b02      	ldr	r3, [sp, #8]
 8007f78:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007f7c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f040 8099 	bne.w	80080b8 <__kernel_rem_pio2+0x658>
 8007f86:	9b01      	ldr	r3, [sp, #4]
 8007f88:	e9c3 5600 	strd	r5, r6, [r3]
 8007f8c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007f90:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007f94:	e7ce      	b.n	8007f34 <__kernel_rem_pio2+0x4d4>
 8007f96:	ab48      	add	r3, sp, #288	; 0x120
 8007f98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f7f8 f92c 	bl	80001fc <__adddf3>
 8007fa4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fa8:	f1bb 0f00 	cmp.w	fp, #0
 8007fac:	daf3      	bge.n	8007f96 <__kernel_rem_pio2+0x536>
 8007fae:	9b02      	ldr	r3, [sp, #8]
 8007fb0:	b113      	cbz	r3, 8007fb8 <__kernel_rem_pio2+0x558>
 8007fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	9b01      	ldr	r3, [sp, #4]
 8007fba:	e9c3 0100 	strd	r0, r1, [r3]
 8007fbe:	e7b9      	b.n	8007f34 <__kernel_rem_pio2+0x4d4>
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	e7f0      	b.n	8007fa8 <__kernel_rem_pio2+0x548>
 8007fc6:	ab48      	add	r3, sp, #288	; 0x120
 8007fc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f7f8 f914 	bl	80001fc <__adddf3>
 8007fd4:	3c01      	subs	r4, #1
 8007fd6:	2c00      	cmp	r4, #0
 8007fd8:	daf5      	bge.n	8007fc6 <__kernel_rem_pio2+0x566>
 8007fda:	9b02      	ldr	r3, [sp, #8]
 8007fdc:	b1e3      	cbz	r3, 8008018 <__kernel_rem_pio2+0x5b8>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fe4:	9c01      	ldr	r4, [sp, #4]
 8007fe6:	e9c4 2300 	strd	r2, r3, [r4]
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007ff2:	f7f8 f901 	bl	80001f8 <__aeabi_dsub>
 8007ff6:	ad4a      	add	r5, sp, #296	; 0x128
 8007ff8:	2401      	movs	r4, #1
 8007ffa:	45a3      	cmp	fp, r4
 8007ffc:	da0f      	bge.n	800801e <__kernel_rem_pio2+0x5be>
 8007ffe:	9b02      	ldr	r3, [sp, #8]
 8008000:	b113      	cbz	r3, 8008008 <__kernel_rem_pio2+0x5a8>
 8008002:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008006:	4619      	mov	r1, r3
 8008008:	9b01      	ldr	r3, [sp, #4]
 800800a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800800e:	e791      	b.n	8007f34 <__kernel_rem_pio2+0x4d4>
 8008010:	465c      	mov	r4, fp
 8008012:	2000      	movs	r0, #0
 8008014:	2100      	movs	r1, #0
 8008016:	e7de      	b.n	8007fd6 <__kernel_rem_pio2+0x576>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	e7e2      	b.n	8007fe4 <__kernel_rem_pio2+0x584>
 800801e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008022:	f7f8 f8eb 	bl	80001fc <__adddf3>
 8008026:	3401      	adds	r4, #1
 8008028:	e7e7      	b.n	8007ffa <__kernel_rem_pio2+0x59a>
 800802a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800802e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8008032:	4620      	mov	r0, r4
 8008034:	4632      	mov	r2, r6
 8008036:	463b      	mov	r3, r7
 8008038:	4629      	mov	r1, r5
 800803a:	f7f8 f8df 	bl	80001fc <__adddf3>
 800803e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4620      	mov	r0, r4
 8008048:	4629      	mov	r1, r5
 800804a:	f7f8 f8d5 	bl	80001f8 <__aeabi_dsub>
 800804e:	4632      	mov	r2, r6
 8008050:	463b      	mov	r3, r7
 8008052:	f7f8 f8d3 	bl	80001fc <__adddf3>
 8008056:	ed9d 7b04 	vldr	d7, [sp, #16]
 800805a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800805e:	ed88 7b00 	vstr	d7, [r8]
 8008062:	f109 39ff 	add.w	r9, r9, #4294967295
 8008066:	e776      	b.n	8007f56 <__kernel_rem_pio2+0x4f6>
 8008068:	e9da 8900 	ldrd	r8, r9, [sl]
 800806c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008070:	4640      	mov	r0, r8
 8008072:	4632      	mov	r2, r6
 8008074:	463b      	mov	r3, r7
 8008076:	4649      	mov	r1, r9
 8008078:	f7f8 f8c0 	bl	80001fc <__adddf3>
 800807c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4640      	mov	r0, r8
 8008086:	4649      	mov	r1, r9
 8008088:	f7f8 f8b6 	bl	80001f8 <__aeabi_dsub>
 800808c:	4632      	mov	r2, r6
 800808e:	463b      	mov	r3, r7
 8008090:	f7f8 f8b4 	bl	80001fc <__adddf3>
 8008094:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008098:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800809c:	ed8a 7b00 	vstr	d7, [sl]
 80080a0:	3c01      	subs	r4, #1
 80080a2:	e75e      	b.n	8007f62 <__kernel_rem_pio2+0x502>
 80080a4:	ab48      	add	r3, sp, #288	; 0x120
 80080a6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	f7f8 f8a5 	bl	80001fc <__adddf3>
 80080b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080b6:	e75a      	b.n	8007f6e <__kernel_rem_pio2+0x50e>
 80080b8:	9b01      	ldr	r3, [sp, #4]
 80080ba:	9a01      	ldr	r2, [sp, #4]
 80080bc:	601d      	str	r5, [r3, #0]
 80080be:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80080c2:	605c      	str	r4, [r3, #4]
 80080c4:	609f      	str	r7, [r3, #8]
 80080c6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80080ca:	60d3      	str	r3, [r2, #12]
 80080cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080d0:	6110      	str	r0, [r2, #16]
 80080d2:	6153      	str	r3, [r2, #20]
 80080d4:	e72e      	b.n	8007f34 <__kernel_rem_pio2+0x4d4>
 80080d6:	bf00      	nop
 80080d8:	41700000 	.word	0x41700000
 80080dc:	3e700000 	.word	0x3e700000

080080e0 <__kernel_sin>:
 80080e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e4:	ed2d 8b04 	vpush	{d8-d9}
 80080e8:	eeb0 8a41 	vmov.f32	s16, s2
 80080ec:	eef0 8a61 	vmov.f32	s17, s3
 80080f0:	ec55 4b10 	vmov	r4, r5, d0
 80080f4:	b083      	sub	sp, #12
 80080f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80080fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80080fe:	9001      	str	r0, [sp, #4]
 8008100:	da06      	bge.n	8008110 <__kernel_sin+0x30>
 8008102:	ee10 0a10 	vmov	r0, s0
 8008106:	4629      	mov	r1, r5
 8008108:	f7f8 fcc8 	bl	8000a9c <__aeabi_d2iz>
 800810c:	2800      	cmp	r0, #0
 800810e:	d051      	beq.n	80081b4 <__kernel_sin+0xd4>
 8008110:	4622      	mov	r2, r4
 8008112:	462b      	mov	r3, r5
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	f7f8 fa26 	bl	8000568 <__aeabi_dmul>
 800811c:	4682      	mov	sl, r0
 800811e:	468b      	mov	fp, r1
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4620      	mov	r0, r4
 8008126:	4629      	mov	r1, r5
 8008128:	f7f8 fa1e 	bl	8000568 <__aeabi_dmul>
 800812c:	a341      	add	r3, pc, #260	; (adr r3, 8008234 <__kernel_sin+0x154>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	4680      	mov	r8, r0
 8008134:	4689      	mov	r9, r1
 8008136:	4650      	mov	r0, sl
 8008138:	4659      	mov	r1, fp
 800813a:	f7f8 fa15 	bl	8000568 <__aeabi_dmul>
 800813e:	a33f      	add	r3, pc, #252	; (adr r3, 800823c <__kernel_sin+0x15c>)
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	f7f8 f858 	bl	80001f8 <__aeabi_dsub>
 8008148:	4652      	mov	r2, sl
 800814a:	465b      	mov	r3, fp
 800814c:	f7f8 fa0c 	bl	8000568 <__aeabi_dmul>
 8008150:	a33c      	add	r3, pc, #240	; (adr r3, 8008244 <__kernel_sin+0x164>)
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	f7f8 f851 	bl	80001fc <__adddf3>
 800815a:	4652      	mov	r2, sl
 800815c:	465b      	mov	r3, fp
 800815e:	f7f8 fa03 	bl	8000568 <__aeabi_dmul>
 8008162:	a33a      	add	r3, pc, #232	; (adr r3, 800824c <__kernel_sin+0x16c>)
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	f7f8 f846 	bl	80001f8 <__aeabi_dsub>
 800816c:	4652      	mov	r2, sl
 800816e:	465b      	mov	r3, fp
 8008170:	f7f8 f9fa 	bl	8000568 <__aeabi_dmul>
 8008174:	a337      	add	r3, pc, #220	; (adr r3, 8008254 <__kernel_sin+0x174>)
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	f7f8 f83f 	bl	80001fc <__adddf3>
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	4606      	mov	r6, r0
 8008182:	460f      	mov	r7, r1
 8008184:	b9eb      	cbnz	r3, 80081c2 <__kernel_sin+0xe2>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4650      	mov	r0, sl
 800818c:	4659      	mov	r1, fp
 800818e:	f7f8 f9eb 	bl	8000568 <__aeabi_dmul>
 8008192:	a325      	add	r3, pc, #148	; (adr r3, 8008228 <__kernel_sin+0x148>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	f7f8 f82e 	bl	80001f8 <__aeabi_dsub>
 800819c:	4642      	mov	r2, r8
 800819e:	464b      	mov	r3, r9
 80081a0:	f7f8 f9e2 	bl	8000568 <__aeabi_dmul>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4620      	mov	r0, r4
 80081aa:	4629      	mov	r1, r5
 80081ac:	f7f8 f826 	bl	80001fc <__adddf3>
 80081b0:	4604      	mov	r4, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	ec45 4b10 	vmov	d0, r4, r5
 80081b8:	b003      	add	sp, #12
 80081ba:	ecbd 8b04 	vpop	{d8-d9}
 80081be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c2:	4b1b      	ldr	r3, [pc, #108]	; (8008230 <__kernel_sin+0x150>)
 80081c4:	ec51 0b18 	vmov	r0, r1, d8
 80081c8:	2200      	movs	r2, #0
 80081ca:	f7f8 f9cd 	bl	8000568 <__aeabi_dmul>
 80081ce:	4632      	mov	r2, r6
 80081d0:	ec41 0b19 	vmov	d9, r0, r1
 80081d4:	463b      	mov	r3, r7
 80081d6:	4640      	mov	r0, r8
 80081d8:	4649      	mov	r1, r9
 80081da:	f7f8 f9c5 	bl	8000568 <__aeabi_dmul>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	ec51 0b19 	vmov	r0, r1, d9
 80081e6:	f7f8 f807 	bl	80001f8 <__aeabi_dsub>
 80081ea:	4652      	mov	r2, sl
 80081ec:	465b      	mov	r3, fp
 80081ee:	f7f8 f9bb 	bl	8000568 <__aeabi_dmul>
 80081f2:	ec53 2b18 	vmov	r2, r3, d8
 80081f6:	f7f7 ffff 	bl	80001f8 <__aeabi_dsub>
 80081fa:	a30b      	add	r3, pc, #44	; (adr r3, 8008228 <__kernel_sin+0x148>)
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	4606      	mov	r6, r0
 8008202:	460f      	mov	r7, r1
 8008204:	4640      	mov	r0, r8
 8008206:	4649      	mov	r1, r9
 8008208:	f7f8 f9ae 	bl	8000568 <__aeabi_dmul>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4630      	mov	r0, r6
 8008212:	4639      	mov	r1, r7
 8008214:	f7f7 fff2 	bl	80001fc <__adddf3>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4620      	mov	r0, r4
 800821e:	4629      	mov	r1, r5
 8008220:	f7f7 ffea 	bl	80001f8 <__aeabi_dsub>
 8008224:	e7c4      	b.n	80081b0 <__kernel_sin+0xd0>
 8008226:	bf00      	nop
 8008228:	55555549 	.word	0x55555549
 800822c:	3fc55555 	.word	0x3fc55555
 8008230:	3fe00000 	.word	0x3fe00000
 8008234:	5acfd57c 	.word	0x5acfd57c
 8008238:	3de5d93a 	.word	0x3de5d93a
 800823c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008240:	3e5ae5e6 	.word	0x3e5ae5e6
 8008244:	57b1fe7d 	.word	0x57b1fe7d
 8008248:	3ec71de3 	.word	0x3ec71de3
 800824c:	19c161d5 	.word	0x19c161d5
 8008250:	3f2a01a0 	.word	0x3f2a01a0
 8008254:	1110f8a6 	.word	0x1110f8a6
 8008258:	3f811111 	.word	0x3f811111

0800825c <fabs>:
 800825c:	ec51 0b10 	vmov	r0, r1, d0
 8008260:	ee10 2a10 	vmov	r2, s0
 8008264:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008268:	ec43 2b10 	vmov	d0, r2, r3
 800826c:	4770      	bx	lr
	...

08008270 <floor>:
 8008270:	ec51 0b10 	vmov	r0, r1, d0
 8008274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008278:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800827c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008280:	2e13      	cmp	r6, #19
 8008282:	ee10 5a10 	vmov	r5, s0
 8008286:	ee10 8a10 	vmov	r8, s0
 800828a:	460c      	mov	r4, r1
 800828c:	dc32      	bgt.n	80082f4 <floor+0x84>
 800828e:	2e00      	cmp	r6, #0
 8008290:	da14      	bge.n	80082bc <floor+0x4c>
 8008292:	a333      	add	r3, pc, #204	; (adr r3, 8008360 <floor+0xf0>)
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	f7f7 ffb0 	bl	80001fc <__adddf3>
 800829c:	2200      	movs	r2, #0
 800829e:	2300      	movs	r3, #0
 80082a0:	f7f8 fbf2 	bl	8000a88 <__aeabi_dcmpgt>
 80082a4:	b138      	cbz	r0, 80082b6 <floor+0x46>
 80082a6:	2c00      	cmp	r4, #0
 80082a8:	da57      	bge.n	800835a <floor+0xea>
 80082aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80082ae:	431d      	orrs	r5, r3
 80082b0:	d001      	beq.n	80082b6 <floor+0x46>
 80082b2:	4c2d      	ldr	r4, [pc, #180]	; (8008368 <floor+0xf8>)
 80082b4:	2500      	movs	r5, #0
 80082b6:	4621      	mov	r1, r4
 80082b8:	4628      	mov	r0, r5
 80082ba:	e025      	b.n	8008308 <floor+0x98>
 80082bc:	4f2b      	ldr	r7, [pc, #172]	; (800836c <floor+0xfc>)
 80082be:	4137      	asrs	r7, r6
 80082c0:	ea01 0307 	and.w	r3, r1, r7
 80082c4:	4303      	orrs	r3, r0
 80082c6:	d01f      	beq.n	8008308 <floor+0x98>
 80082c8:	a325      	add	r3, pc, #148	; (adr r3, 8008360 <floor+0xf0>)
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	f7f7 ff95 	bl	80001fc <__adddf3>
 80082d2:	2200      	movs	r2, #0
 80082d4:	2300      	movs	r3, #0
 80082d6:	f7f8 fbd7 	bl	8000a88 <__aeabi_dcmpgt>
 80082da:	2800      	cmp	r0, #0
 80082dc:	d0eb      	beq.n	80082b6 <floor+0x46>
 80082de:	2c00      	cmp	r4, #0
 80082e0:	bfbe      	ittt	lt
 80082e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80082e6:	fa43 f606 	asrlt.w	r6, r3, r6
 80082ea:	19a4      	addlt	r4, r4, r6
 80082ec:	ea24 0407 	bic.w	r4, r4, r7
 80082f0:	2500      	movs	r5, #0
 80082f2:	e7e0      	b.n	80082b6 <floor+0x46>
 80082f4:	2e33      	cmp	r6, #51	; 0x33
 80082f6:	dd0b      	ble.n	8008310 <floor+0xa0>
 80082f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80082fc:	d104      	bne.n	8008308 <floor+0x98>
 80082fe:	ee10 2a10 	vmov	r2, s0
 8008302:	460b      	mov	r3, r1
 8008304:	f7f7 ff7a 	bl	80001fc <__adddf3>
 8008308:	ec41 0b10 	vmov	d0, r0, r1
 800830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008310:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008314:	f04f 33ff 	mov.w	r3, #4294967295
 8008318:	fa23 f707 	lsr.w	r7, r3, r7
 800831c:	4207      	tst	r7, r0
 800831e:	d0f3      	beq.n	8008308 <floor+0x98>
 8008320:	a30f      	add	r3, pc, #60	; (adr r3, 8008360 <floor+0xf0>)
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	f7f7 ff69 	bl	80001fc <__adddf3>
 800832a:	2200      	movs	r2, #0
 800832c:	2300      	movs	r3, #0
 800832e:	f7f8 fbab 	bl	8000a88 <__aeabi_dcmpgt>
 8008332:	2800      	cmp	r0, #0
 8008334:	d0bf      	beq.n	80082b6 <floor+0x46>
 8008336:	2c00      	cmp	r4, #0
 8008338:	da02      	bge.n	8008340 <floor+0xd0>
 800833a:	2e14      	cmp	r6, #20
 800833c:	d103      	bne.n	8008346 <floor+0xd6>
 800833e:	3401      	adds	r4, #1
 8008340:	ea25 0507 	bic.w	r5, r5, r7
 8008344:	e7b7      	b.n	80082b6 <floor+0x46>
 8008346:	2301      	movs	r3, #1
 8008348:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800834c:	fa03 f606 	lsl.w	r6, r3, r6
 8008350:	4435      	add	r5, r6
 8008352:	4545      	cmp	r5, r8
 8008354:	bf38      	it	cc
 8008356:	18e4      	addcc	r4, r4, r3
 8008358:	e7f2      	b.n	8008340 <floor+0xd0>
 800835a:	2500      	movs	r5, #0
 800835c:	462c      	mov	r4, r5
 800835e:	e7aa      	b.n	80082b6 <floor+0x46>
 8008360:	8800759c 	.word	0x8800759c
 8008364:	7e37e43c 	.word	0x7e37e43c
 8008368:	bff00000 	.word	0xbff00000
 800836c:	000fffff 	.word	0x000fffff

08008370 <scalbn>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	ec55 4b10 	vmov	r4, r5, d0
 8008376:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800837a:	4606      	mov	r6, r0
 800837c:	462b      	mov	r3, r5
 800837e:	b99a      	cbnz	r2, 80083a8 <scalbn+0x38>
 8008380:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008384:	4323      	orrs	r3, r4
 8008386:	d036      	beq.n	80083f6 <scalbn+0x86>
 8008388:	4b39      	ldr	r3, [pc, #228]	; (8008470 <scalbn+0x100>)
 800838a:	4629      	mov	r1, r5
 800838c:	ee10 0a10 	vmov	r0, s0
 8008390:	2200      	movs	r2, #0
 8008392:	f7f8 f8e9 	bl	8000568 <__aeabi_dmul>
 8008396:	4b37      	ldr	r3, [pc, #220]	; (8008474 <scalbn+0x104>)
 8008398:	429e      	cmp	r6, r3
 800839a:	4604      	mov	r4, r0
 800839c:	460d      	mov	r5, r1
 800839e:	da10      	bge.n	80083c2 <scalbn+0x52>
 80083a0:	a32b      	add	r3, pc, #172	; (adr r3, 8008450 <scalbn+0xe0>)
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	e03a      	b.n	800841e <scalbn+0xae>
 80083a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80083ac:	428a      	cmp	r2, r1
 80083ae:	d10c      	bne.n	80083ca <scalbn+0x5a>
 80083b0:	ee10 2a10 	vmov	r2, s0
 80083b4:	4620      	mov	r0, r4
 80083b6:	4629      	mov	r1, r5
 80083b8:	f7f7 ff20 	bl	80001fc <__adddf3>
 80083bc:	4604      	mov	r4, r0
 80083be:	460d      	mov	r5, r1
 80083c0:	e019      	b.n	80083f6 <scalbn+0x86>
 80083c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80083c6:	460b      	mov	r3, r1
 80083c8:	3a36      	subs	r2, #54	; 0x36
 80083ca:	4432      	add	r2, r6
 80083cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80083d0:	428a      	cmp	r2, r1
 80083d2:	dd08      	ble.n	80083e6 <scalbn+0x76>
 80083d4:	2d00      	cmp	r5, #0
 80083d6:	a120      	add	r1, pc, #128	; (adr r1, 8008458 <scalbn+0xe8>)
 80083d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083dc:	da1c      	bge.n	8008418 <scalbn+0xa8>
 80083de:	a120      	add	r1, pc, #128	; (adr r1, 8008460 <scalbn+0xf0>)
 80083e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083e4:	e018      	b.n	8008418 <scalbn+0xa8>
 80083e6:	2a00      	cmp	r2, #0
 80083e8:	dd08      	ble.n	80083fc <scalbn+0x8c>
 80083ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80083ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80083f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80083f6:	ec45 4b10 	vmov	d0, r4, r5
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
 80083fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008400:	da19      	bge.n	8008436 <scalbn+0xc6>
 8008402:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008406:	429e      	cmp	r6, r3
 8008408:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800840c:	dd0a      	ble.n	8008424 <scalbn+0xb4>
 800840e:	a112      	add	r1, pc, #72	; (adr r1, 8008458 <scalbn+0xe8>)
 8008410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e2      	bne.n	80083de <scalbn+0x6e>
 8008418:	a30f      	add	r3, pc, #60	; (adr r3, 8008458 <scalbn+0xe8>)
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	f7f8 f8a3 	bl	8000568 <__aeabi_dmul>
 8008422:	e7cb      	b.n	80083bc <scalbn+0x4c>
 8008424:	a10a      	add	r1, pc, #40	; (adr r1, 8008450 <scalbn+0xe0>)
 8008426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0b8      	beq.n	80083a0 <scalbn+0x30>
 800842e:	a10e      	add	r1, pc, #56	; (adr r1, 8008468 <scalbn+0xf8>)
 8008430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008434:	e7b4      	b.n	80083a0 <scalbn+0x30>
 8008436:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800843a:	3236      	adds	r2, #54	; 0x36
 800843c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008440:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008444:	4620      	mov	r0, r4
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <scalbn+0x108>)
 8008448:	2200      	movs	r2, #0
 800844a:	e7e8      	b.n	800841e <scalbn+0xae>
 800844c:	f3af 8000 	nop.w
 8008450:	c2f8f359 	.word	0xc2f8f359
 8008454:	01a56e1f 	.word	0x01a56e1f
 8008458:	8800759c 	.word	0x8800759c
 800845c:	7e37e43c 	.word	0x7e37e43c
 8008460:	8800759c 	.word	0x8800759c
 8008464:	fe37e43c 	.word	0xfe37e43c
 8008468:	c2f8f359 	.word	0xc2f8f359
 800846c:	81a56e1f 	.word	0x81a56e1f
 8008470:	43500000 	.word	0x43500000
 8008474:	ffff3cb0 	.word	0xffff3cb0
 8008478:	3c900000 	.word	0x3c900000

0800847c <_init>:
 800847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847e:	bf00      	nop
 8008480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008482:	bc08      	pop	{r3}
 8008484:	469e      	mov	lr, r3
 8008486:	4770      	bx	lr

08008488 <_fini>:
 8008488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848a:	bf00      	nop
 800848c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848e:	bc08      	pop	{r3}
 8008490:	469e      	mov	lr, r3
 8008492:	4770      	bx	lr
